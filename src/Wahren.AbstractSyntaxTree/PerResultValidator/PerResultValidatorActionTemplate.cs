// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
#nullable enable

namespace Wahren.AbstractSyntaxTree.Parser;

using Statement;
using Statement.Expression;

public static partial class PerResultValidator
{
    public static void AddReferenceAndValidate(ref Context context, ref Result result, CallActionStatement call)
    {
        var arguments = call.Arguments.AsSpan();
        if (arguments.IsEmpty)
        {
            return;
        }

        ref var argument = ref arguments[0];
        ReadOnlySpan<char> span;
        switch (call.Kind)
        {
            case ActionKind.vc:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'vc'.", call.TokenId);
                }
                break;
            case ActionKind.play:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'play'.", call.TokenId);
                }
                break;
            case ActionKind.ppl1:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'ppl1'.", call.TokenId);
                }
                break;
            case ActionKind.citom:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'citom'.", call.TokenId);
                }
                break;
            case ActionKind.setbcg:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'setbcg'.", call.TokenId);
                }
                break;
            case ActionKind.showCamp:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'showCamp'.", call.TokenId);
                }
                break;
            case ActionKind.clickWait:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'clickWait'.", call.TokenId);
                }
                break;
            case ActionKind.worldskin:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'worldskin'.", call.TokenId);
                }
                break;
            case ActionKind.darkness_off:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'darkness_off'.", call.TokenId);
                }
                break;
            case ActionKind.doGameEnding:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'doGameEnding'.", call.TokenId);
                }
                break;
            case ActionKind.storeDeath:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'storeDeath'.", call.TokenId);
                }
                break;
            case ActionKind.pushDeath:
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushDeath", 2, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                argument = ref arguments[3];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                argument = ref arguments[4];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                argument = ref arguments[5];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setPowerHome:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setPowerHome", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setPowerHome", 2, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.hideImage:
                argument.ReferenceKind = ReferenceKind.image_file;
                argument.ReferenceId = result.image_fileSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.hideFace:
                argument.ReferenceKind = ReferenceKind.face;
                argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.hidePicture:
                argument.ReferenceKind = ReferenceKind.picture;
                argument.ReferenceId = result.pictureSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.bg:
                argument.ReferenceKind = ReferenceKind.image_file;
                argument.ReferenceId = result.image_fileSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("bg", 2, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.addSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addSpot", 2, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.resetTruce:
                switch (arguments.Length)
                {
                    case 1:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("resetTruce", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("resetTruce", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("resetTruce", 1, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("resetTruce", 2, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        break;
                }
                break;
            case ActionKind.resetLeague:
                switch (arguments.Length)
                {
                    case 1:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("resetLeague", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("resetLeague", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("resetLeague", 1, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("resetLeague", 2, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        break;
                }
                break;
            case ActionKind.resetEnemyPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("resetEnemyPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("resetEnemyPower", 2, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.@event:
                argument.ReferenceKind = ReferenceKind.Event;
                argument.ReferenceId = result.EventSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.Power;
                argument.ReferenceId = result.PowerSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                argument.ReferenceKind = ReferenceKind.Power;
                argument.ReferenceId = result.PowerSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.add:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.div:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.mod:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.mul:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.per:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.set:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.sub:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addv:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addv", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addv", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addv", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setv:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setv", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("setv", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("setv", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.subv:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("subv", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("subv", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("subv", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setud:
                argument.ReferenceKind = ReferenceKind.GlobalStringVariableWriter;
                argument.ReferenceId = result.GlobalStringVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.storeud:
                argument.ReferenceKind = ReferenceKind.GlobalStringVariableReader;
                argument.ReferenceId = result.GlobalStringVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeud", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeud", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeud", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.title:

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addstr:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addstr", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addstr", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addstr", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }


                break;
            case ActionKind.addVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addVar", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addVar", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addVar", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setVar", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("setVar", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("setVar", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.subVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("subVar", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("subVar", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("subVar", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.title2:

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addCapa:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addCapa", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addGain:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addGain", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushSex:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushSex", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("pushVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setCapa:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setCapa", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setDone:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setDone", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setDone", 2, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.setGain:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setGain", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.storePM:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePM", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePM", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePM", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePM", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.levelup:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("levelup", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addLevel:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addLevel", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addLoyal:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addLoyal", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addTrust:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addTrust", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.hideLink:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("hideLink", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("hideLink", 2, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushCapa:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushCapa", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushItem:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushItem", 1, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushRank:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushRank", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushSpot", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setLevel:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setLevel", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.hideEscape:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("hideEscape", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("hideEscape", 2, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addCastle:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addCastle", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addMerits:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addMerits", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.changeMap:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeMap", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.map;
                argument.ReferenceId = result.mapSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushLevel:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushLevel", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushLoyal:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushLoyal", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushTrain:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushTrain", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setCastle:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setCastle", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.changeRace:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeRace", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeRace", 2, "Race", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Race;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushCastle:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushCastle", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushMerits:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushMerits", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setDungeon:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setDungeon", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.Dungeon;
                argument.ReferenceId = result.DungeonSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.unionPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("unionPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("unionPower", 2, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addTraining:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addTraining", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.changeClass:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeClass", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeClass", 2, "Class", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Class;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushTrainUp:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushTrainUp", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setTraining:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setTraining", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addBaseLevel:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addBaseLevel", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.changeCastle:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeCastle", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setBaseLevel:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setBaseLevel", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addTrainingUp:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addTrainingUp", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.changeDungeon:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeDungeon", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.Dungeon;
                argument.ReferenceId = result.DungeonSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushBaseLevel:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushBaseLevel", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setTrainingUp:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setTrainingUp", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.storeNextSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNextSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNextSpot", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNextSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNextSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeSkillset:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillset", 1, "Skillset", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillsetSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skillset;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillset", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillset", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillset", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.changePowerFix:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changePowerFix", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }


                break;
            case ActionKind.pushBattleHome:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushBattleRect:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.changePowerName:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changePowerName", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }


                break;
            case ActionKind.changeSpotImage:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeSpotImage", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.imagedata;
                argument.ReferenceId = result.imagedataSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setDungeonFloor:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setDungeonFloor", 1, "Dungeon", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.DungeonSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Dungeon;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.storeRaceOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRaceOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRaceOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRaceOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRaceOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeSpotOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeUnitOfSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfSpot", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeClassOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeClassOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeClassOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeClassOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeClassOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storePowerOfSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfSpot", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storePowerOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeSkillOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSkillOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeSpotOfPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfPower", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeTalentPower:
                argument.ReferenceKind = ReferenceKind.Unit;
                argument.ReferenceId = result.UnitSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeTalentPower", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeTalentPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeTalentPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeUnitOfPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfPower", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeUnitOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeLeaderOfSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfSpot", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeMasterOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeMemberOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMemberOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMemberOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMemberOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMemberOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storePowerOfForce:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfForce", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfForce", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfForce", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeLeaderOfPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfPower", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeLeaderOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeMasterOfPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfPower", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeMasterOfPower", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeRoamUnitOfSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRoamUnitOfSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRoamUnitOfSpot", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRoamUnitOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRoamUnitOfSpot", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeBaseClassOfUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeBaseClassOfUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeBaseClassOfUnit", 2, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeBaseClassOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeBaseClassOfUnit", 2, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.addSkill:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addSkill", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addSkill", 2, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addSkill", i + 1, "Skill", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Skill;
                        argument.HasReference = true;
                    }

                }
                break;
            case ActionKind.addSkill2:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addSkill2", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addSkill2", 2, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addSkill2", i + 1, "Skill", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Skill;
                        argument.HasReference = true;
                    }

                }
                break;
            case ActionKind.wait:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.focus:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("focus", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.shake:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.fadein:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.fadeout:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.playBGM:
                argument.ReferenceKind = ReferenceKind.bgm;
                argument.ReferenceId = result.bgmSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.reloadMenu:
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("reloadMenu", 1, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.choiceTitle:

                break;
            case ActionKind.changePlayer:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changePlayer", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setGameClear:
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setGameClear", 1, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.image:
                argument.ReferenceKind = ReferenceKind.image_file;
                argument.ReferenceId = result.image_fileSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.image2:
                argument.ReferenceKind = ReferenceKind.image_file;
                argument.ReferenceId = result.image_fileSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.showImage:
                argument.ReferenceKind = ReferenceKind.image_file;
                argument.ReferenceId = result.image_fileSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.face:
                argument.ReferenceKind = ReferenceKind.face;
                argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.face2:
                argument.ReferenceKind = ReferenceKind.face;
                argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.showFace:
                argument.ReferenceKind = ReferenceKind.face;
                argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.picture:
                argument.ReferenceKind = ReferenceKind.picture;
                argument.ReferenceId = result.pictureSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.picture2:
                argument.ReferenceKind = ReferenceKind.picture;
                argument.ReferenceId = result.pictureSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.showPict:
                argument.ReferenceKind = ReferenceKind.picture;
                argument.ReferenceId = result.pictureSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.showPicture:
                argument.ReferenceKind = ReferenceKind.picture;
                argument.ReferenceId = result.pictureSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.call:
                argument.ReferenceKind = ReferenceKind.Event;
                argument.ReferenceId = result.EventSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.zoom:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.clear:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("clear", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("clear", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("clear", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.playSE:
                argument.ReferenceKind = ReferenceKind.sound;
                argument.ReferenceId = result.soundSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.volume:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addItem:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addItem", 1, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.minimap:
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("minimap", 1, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.routine:
                argument.ReferenceKind = ReferenceKind.Event;
                argument.ReferenceId = result.EventSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.shuffle:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shuffle", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("shuffle", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case ActionKind.addLimit:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.addPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.clearVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("clearVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("clearVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case ActionKind.exitItem:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("exitItem", 1, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.hideSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("hideSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushRand:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushTurn:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.roamUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("roamUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.roamUnit2:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("roamUnit2", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setLimit:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.showSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("showSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.showParty:
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("showParty", 1, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.entryItem:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("entryItem", 1, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.eraseItem:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseItem", 1, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.eraseUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.hideChara:
                argument.ReferenceKind = ReferenceKind.imagedata;
                argument.ReferenceId = result.imagedataSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushLimit:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushRand2:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.endingRoll:
                argument.ReferenceKind = ReferenceKind.Event;
                argument.ReferenceId = result.EventSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.erasePower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("erasePower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.removeSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("removeSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.shuffleVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shuffleVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("shuffleVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case ActionKind.battleEvent:
                argument.ReferenceKind = ReferenceKind.Event;
                argument.ReferenceId = result.EventSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.scrollSpeed:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.showDungeon:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("showDungeon", 1, "Dungeon", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.DungeonSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Dungeon;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.reverseChara:
                argument.ReferenceKind = ReferenceKind.imagedata;
                argument.ReferenceId = result.imagedataSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.showPolitics:
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("showPolitics", 1, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.storeAllSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllSpot", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllSpot", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllSpot", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeAllPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllPower", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeComPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeComPower", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeComPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeComPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeNowPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNowPower", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNowPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNowPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.pushCountPower:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.storeAllTalent:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllTalent", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllTalent", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAllTalent", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.erasePowerMerce:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("erasePowerMerce", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.erasePowerStaff:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("erasePowerStaff", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.storeBattleSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeBattleSpot", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeBattleSpot", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeBattleSpot", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storePlayerUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePlayerUnit", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePlayerUnit", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePlayerUnit", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeAttackPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAttackPower", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAttackPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAttackPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeNeutralSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNeutralSpot", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNeutralSpot", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNeutralSpot", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storePlayerPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePlayerPower", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePlayerPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePlayerPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeDefensePower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeDefensePower", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeDefensePower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeDefensePower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeSpotOfBattle:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfBattle", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfBattle", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeSpotOfBattle", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storePowerOfAttack:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfAttack", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfAttack", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfAttack", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeNonPlayerPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNonPlayerPower", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNonPlayerPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeNonPlayerPower", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storePowerOfDefense:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfDefense", 1, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfDefense", 1, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storePowerOfDefense", 1, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.font:
                argument.ReferenceKind = ReferenceKind.font;
                argument.ReferenceId = result.fontSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("font", 2, "Number", argument.TokenId);
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("font", 3, "Number", argument.TokenId);
                }

                break;
            case ActionKind.fontc:
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("fontc", 1, "Number", argument.TokenId);
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("fontc", 2, "Number", argument.TokenId);
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("fontc", 3, "Number", argument.TokenId);
                }

                break;
            case ActionKind.gread:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("gread", 1, "GlobalVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.GlobalVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.GlobalVariableReader;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("gread", 3, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("gread", 3, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("gread", 3, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.gwrite:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("gwrite", 1, "GlobalVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.GlobalVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.GlobalVariableWriter;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushv:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushv", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("pushv", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        argument = ref arguments[1];
                        argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                        argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;
                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushv", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("pushv", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.Length > 1 && span[0] == '@')
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[2];
                        argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                        argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;
                        break;
                }
                break;
            case ActionKind.addUnit:
                // skip addUnit
                break;
            case ActionKind.addDiplo:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addDiplo", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addDiplo", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addDiplo", 1, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addDiplo", 2, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                }
                break;
            case ActionKind.setDiplo:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setDiplo", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("setDiplo", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setDiplo", 1, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setDiplo", 2, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                }
                break;
            case ActionKind.setTruce:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setTruce", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("setTruce", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setTruce", 1, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setTruce", 2, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                }
                break;
            case ActionKind.equipItem:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("equipItem", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("equipItem", 2, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("equipItem", 3, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.setLeague:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setLeague", 1, "StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.HasReference = true;
                            }
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        else
                        {
                            if (context.CreateError(DiagnosticSeverity.Warning))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("setLeague", 1, "StringVariableReader", argument.TokenId);
                            }
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                            argument.HasReference = true;
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        }
                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setLeague", 1, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setLeague", 2, "Power", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Power;
                            argument.HasReference = true;
                        }
                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }
                        break;
                }
                break;
            case ActionKind.skillTroop:
                // skip skillTroop
                break;
            case ActionKind.index:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("index", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("index", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("index", 3, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("index", 3, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("index", 3, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeIndex:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndex", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndex", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndex", 3, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndex", 3, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndex", 3, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeIndexVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndexVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndexVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndexVar", 3, "StringVariableWriter", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndexVar", 3, "StringVariableWriter", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeIndexVar", 3, "StringVariableWriter", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.addStatus:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addStatus", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addStatus", 2, "Status, StringVariableReader", argument.TokenId);
                }
                else if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addStatus", 2, "Status, StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addStatus", 2, "Status, StringVariableReader", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else if (argument.HasReference = PerResultValidator.IsStatus(span, out argument.ReferenceId))
                {
                    argument.ReferenceKind = ReferenceKind.Status;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addStatus", 2, "Status, StringVariableReader", argument.TokenId);
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushDiplo:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushDiplo", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushDiplo", 2, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setArbeit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setArbeit", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setArbeit", 2, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.setStatus:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setStatus", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setStatus", 2, "Status, StringVariableReader", argument.TokenId);
                }
                else if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setStatus", 2, "Status, StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("setStatus", 2, "Status, StringVariableReader", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else if (argument.HasReference = PerResultValidator.IsStatus(span, out argument.ReferenceId))
                {
                    argument.ReferenceKind = ReferenceKind.Status;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setStatus", 2, "Status, StringVariableReader", argument.TokenId);
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushStatus:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushStatus", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsStatus(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Status;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushStatus", 2, "Status", argument.TokenId);
                }

                argument = ref arguments[2];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushSpotPos:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushSpotPos", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[2];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setEnemyPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setEnemyPower", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setEnemyPower", 2, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.shadow:
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shadow", 1, "Number", argument.TokenId);
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shadow", 2, "Number", argument.TokenId);
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shadow", 3, "Number", argument.TokenId);
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shadow", 4, "Number", argument.TokenId);
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shadow", 5, "Number", argument.TokenId);
                }

                if (arguments.Length <= 5)
                {
                    break;
                }
                argument = ref arguments[5];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shadow", 6, "Number", argument.TokenId);
                }

                break;
            case ActionKind.doskill:
                argument.ReferenceKind = ReferenceKind.Skill;
                argument.ReferenceId = result.SkillSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[4];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("doskill", 5, "Boolean", argument.TokenId);
                }

                break;
            case ActionKind.storeRectUnit:
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsRedBlue(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.RedBlue;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeRectUnit", 1, "RedBlue", argument.TokenId);
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[5];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.loopBGM:
                argument.ReferenceKind = ReferenceKind.bgm;
                argument.ReferenceId = result.bgmSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    argument.ReferenceKind = ReferenceKind.bgm;
                    argument.ReferenceId = result.bgmSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;

                }
                break;
            case ActionKind.darkness:
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("darkness", 1, "Number", argument.TokenId);
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("darkness", 2, "Number", argument.TokenId);
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("darkness", 3, "Number", argument.TokenId);
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("darkness", 4, "Number", argument.TokenId);
                }

                break;
            case ActionKind.linkSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("linkSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("linkSpot", 2, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                argument.ReferenceKind = ReferenceKind.imagedata;
                argument.ReferenceId = result.imagedataSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("linkSpot", 4, "Number", argument.TokenId);
                }

                break;
            case ActionKind.linkEscape:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("linkEscape", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("linkEscape", 2, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                argument.ReferenceKind = ReferenceKind.imagedata;
                argument.ReferenceId = result.imagedataSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("linkEscape", 4, "Number", argument.TokenId);
                }

                break;
            case ActionKind.showChara:
                argument.ReferenceKind = ReferenceKind.imagedata;
                argument.ReferenceId = result.imagedataSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 4)
                {
                    break;
                }
                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.shiftTroop2:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shiftTroop2", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[3];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shiftTroop2", 4, "Boolean", argument.TokenId);
                }

                break;
        }
    }

    public static bool ArgumentCountValidation(ref Context context, ref Result result, ActionKind kind, int count, uint index)
    {
        if (count < 0)
        {
            return false;
        }

		switch (kind)
        {
            case ActionKind.pushDeath:
                if (count < 6)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 6, index);
                    return false;
                }
                else if (count > 6)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 6, index);
                    return false;
                }
                break;
            case ActionKind.setPowerHome:
            case ActionKind.dialog:
            case ActionKind.dialogF:
            case ActionKind.hideImage:
            case ActionKind.hideFace:
            case ActionKind.hidePicture:
            case ActionKind.bg:
            case ActionKind.locate:
            case ActionKind.scroll:
            case ActionKind.addSpot:
            case ActionKind.showSpotMark:
            case ActionKind.resetTruce:
            case ActionKind.resetLeague:
            case ActionKind.resetEnemyPower:
				if (count < 1)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 1, index);
                    return false;
                }
                else if (count > 2)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 2, index);
                    return false;
                }
                break;
            case ActionKind.msg:
            case ActionKind.msg2:
            case ActionKind.talk:
            case ActionKind.talk2:
            case ActionKind.chat:
            case ActionKind.chat2:
            case ActionKind.@event:
            case ActionKind.changeMaster:
				if (count < 1)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 1, index);
                    return false;
                }
                else if (count > 3)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 3, index);
                    return false;
                }
                break;
            case ActionKind.select:
            case ActionKind.add:
            case ActionKind.div:
            case ActionKind.mod:
            case ActionKind.mul:
            case ActionKind.per:
            case ActionKind.set:
            case ActionKind.sub:
            case ActionKind.addv:
            case ActionKind.setv:
            case ActionKind.subv:
            case ActionKind.setPM:
            case ActionKind.setud:
            case ActionKind.storeud:
            case ActionKind.title:
            case ActionKind.addstr:
            case ActionKind.addVar:
            case ActionKind.setVar:
            case ActionKind.subVar:
            case ActionKind.title2:
            case ActionKind.addCapa:
            case ActionKind.addGain:
            case ActionKind.pushSex:
            case ActionKind.pushVar:
            case ActionKind.setCapa:
            case ActionKind.setDone:
            case ActionKind.setGain:
            case ActionKind.storePM:
            case ActionKind.levelup:
            case ActionKind.addLevel:
            case ActionKind.addLoyal:
            case ActionKind.addMoney:
            case ActionKind.addTrust:
            case ActionKind.hideLink:
            case ActionKind.pushCapa:
            case ActionKind.pushGain:
            case ActionKind.pushItem:
            case ActionKind.pushRank:
            case ActionKind.pushSpot:
            case ActionKind.setLevel:
            case ActionKind.setMoney:
            case ActionKind.hideEscape:
            case ActionKind.addCastle:
            case ActionKind.addMerits:
            case ActionKind.changeMap:
            case ActionKind.formTroop:
            case ActionKind.pushForce:
            case ActionKind.pushLevel:
            case ActionKind.pushLoyal:
            case ActionKind.pushMoney:
            case ActionKind.pushTrain:
            case ActionKind.pushTrust:
            case ActionKind.setCastle:
            case ActionKind.changeRace:
            case ActionKind.pushCastle:
            case ActionKind.pushMerits:
            case ActionKind.setDungeon:
            case ActionKind.speedTroop:
            case ActionKind.unionPower:
            case ActionKind.addTraining:
            case ActionKind.changeClass:
            case ActionKind.pushTrainUp:
            case ActionKind.removeSkill:
            case ActionKind.setTraining:
            case ActionKind.addBaseLevel:
            case ActionKind.changeCastle:
            case ActionKind.setBaseLevel:
            case ActionKind.addTrainingUp:
            case ActionKind.changeDungeon:
            case ActionKind.pushBaseLevel:
            case ActionKind.setTrainingUp:
            case ActionKind.storeNextSpot:
            case ActionKind.storeSkillset:
            case ActionKind.storeTodoUnit:
            case ActionKind.changePowerFix:
            case ActionKind.pushBattleHome:
            case ActionKind.pushBattleRect:
            case ActionKind.storeAliveUnit:
            case ActionKind.changePowerFlag:
            case ActionKind.changePowerName:
            case ActionKind.changeSpotImage:
            case ActionKind.setDungeonFloor:
            case ActionKind.storeRaceOfUnit:
            case ActionKind.storeSpotOfUnit:
            case ActionKind.storeUnitOfSpot:
            case ActionKind.storeClassOfUnit:
            case ActionKind.storePowerOfSpot:
            case ActionKind.storePowerOfUnit:
            case ActionKind.storeSkillOfUnit:
            case ActionKind.storeSpotOfPower:
            case ActionKind.storeTalentPower:
            case ActionKind.storeUnitOfPower:
            case ActionKind.storeLeaderOfSpot:
            case ActionKind.storeMasterOfUnit:
            case ActionKind.storeMemberOfUnit:
            case ActionKind.storePowerOfForce:
            case ActionKind.storeLeaderOfPower:
            case ActionKind.storeMasterOfPower:
            case ActionKind.storeRoamUnitOfSpot:
            case ActionKind.storeBaseClassOfUnit:
                if (count < 2)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 2, index);
                    return false;
                }
                else if (count > 2)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 2, index);
                    return false;
                }
                break;
            case ActionKind.choice:
            case ActionKind.addSkill:
            case ActionKind.addFriend:
            case ActionKind.addSkill2:
            case ActionKind.eraseUnit2:
            case ActionKind.addPowerMerce:
            case ActionKind.addPowerStaff:
            case ActionKind.addPowerMerce2:
            case ActionKind.addPowerStaff2:
                if (count < 2)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 2, index);
                    return false;
                }
                break;
            case ActionKind.exit:
            case ActionKind.wait:
            case ActionKind.focus:
            case ActionKind.shake:
            case ActionKind.fadein:
            case ActionKind.fadeout:
            case ActionKind.playBGM:
            case ActionKind.reloadMenu:
            case ActionKind.choiceTitle:
            case ActionKind.changePlayer:
            case ActionKind.setGameClear:
				if (count > 1)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 1, index);
                    return false;
                }
                break;
            case ActionKind.image:
            case ActionKind.image2:
            case ActionKind.showImage:
            case ActionKind.face:
            case ActionKind.face2:
            case ActionKind.showFace:
            case ActionKind.picture:
            case ActionKind.picture2:
            case ActionKind.showPict:
            case ActionKind.showPicture:
				if (count < 1)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 1, index);
                    return false;
                }
                else if (count > 5)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 5, index);
                    return false;
                }
                break;
            case ActionKind.stop:
            case ActionKind.win:
            case ActionKind.save:
            case ActionKind.erase:
            case ActionKind.stopBGM:
            case ActionKind.openGoal:
            case ActionKind.hideSpotMark:
            case ActionKind.closeGoal:
            case ActionKind.hideBlind:
            case ActionKind.playWorld:
            case ActionKind.resetTime:
            case ActionKind.resetZone:
            case ActionKind.showBlind:
            case ActionKind.terminate:
            case ActionKind.backScroll:
            case ActionKind.playBattle:
            case ActionKind.setWorldMusic:
            case ActionKind.resetWorldMusic:
            case ActionKind.clearBattleRecord:
				if (count != 0)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 0, index);
                    return false;
                }
                break;
            case ActionKind.call:
            case ActionKind.zoom:
            case ActionKind.clear:
            case ActionKind.playSE:
            case ActionKind.volume:
            case ActionKind.addItem:
            case ActionKind.minimap:
            case ActionKind.routine:
            case ActionKind.scroll2:
            case ActionKind.shuffle:
            case ActionKind.addLimit:
            case ActionKind.addPower:
            case ActionKind.clearVar:
            case ActionKind.exitItem:
            case ActionKind.hideSpot:
            case ActionKind.pushRand:
            case ActionKind.pushTurn:
            case ActionKind.roamUnit:
            case ActionKind.roamUnit2:
            case ActionKind.setLimit:
            case ActionKind.showSpot:
            case ActionKind.showParty:
            case ActionKind.ctrlTroop:
            case ActionKind.entryItem:
            case ActionKind.eraseItem:
            case ActionKind.eraseUnit:
            case ActionKind.freeTroop:
            case ActionKind.haltTroop:
            case ActionKind.hideChara:
            case ActionKind.pushLimit:
            case ActionKind.pushRand2:
            case ActionKind.endingRoll:
            case ActionKind.erasePower:
            case ActionKind.eraseTroop:
            case ActionKind.removeSpot:
            case ActionKind.shuffleVar:
            case ActionKind.sleepTroop:
            case ActionKind.activeTroop:
            case ActionKind.battleEvent:
            case ActionKind.removeTroop:
            case ActionKind.scrollSpeed:
            case ActionKind.showDungeon:
            case ActionKind.unctrlTroop:
            case ActionKind.retreatTroop:
            case ActionKind.reverseChara:
            case ActionKind.showPolitics:
            case ActionKind.storeAllSpot:
            case ActionKind.storeAllPower:
            case ActionKind.storeComPower:
            case ActionKind.storeNowPower:
            case ActionKind.eraseUnitTroop:
            case ActionKind.pushCountPower:
            case ActionKind.storeAllTalent:
            case ActionKind.erasePowerMerce:
            case ActionKind.erasePowerStaff:
            case ActionKind.storeBattleSpot:
            case ActionKind.storePlayerUnit:
            case ActionKind.storeAttackPower:
            case ActionKind.storeNeutralSpot:
            case ActionKind.storePlayerPower:
            case ActionKind.storeDefensePower:
            case ActionKind.storeSpotOfBattle:
            case ActionKind.storePowerOfAttack:
            case ActionKind.storeNonPlayerPower:
            case ActionKind.storePowerOfDefense:
                if (count < 1)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 1, index);
                    return false;
                }
                else if (count > 1)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 1, index);
                    return false;
                }
                break;
            case ActionKind.font:
            case ActionKind.fontc:
				if (count > 3)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 3, index);
                    return false;
                }
                break;
            case ActionKind.gread:
            case ActionKind.gwrite:
            case ActionKind.pushv:
            case ActionKind.addUnit:
            case ActionKind.addDiplo:
            case ActionKind.aimTroop:
            case ActionKind.setDiplo:
            case ActionKind.setTruce:
            case ActionKind.equipItem:
            case ActionKind.setLeague:
            case ActionKind.skillTroop:
				if (count < 2)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 2, index);
                    return false;
                }
                else if (count > 3)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 3, index);
                    return false;
                }
                break;
            case ActionKind.index:
            case ActionKind.storeIndex:
            case ActionKind.storeIndexVar:
            case ActionKind.pushCon:
            case ActionKind.addStatus:
            case ActionKind.pushDiplo:
            case ActionKind.setArbeit:
            case ActionKind.setStatus:
            case ActionKind.pushStatus:
            case ActionKind.pushSpotPos:
            case ActionKind.setEnemyPower:
                if (count < 3)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 3, index);
                    return false;
                }
                else if (count > 3)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 3, index);
                    return false;
                }
                break;
            case ActionKind.shadow:
				if (count > 6)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 6, index);
                    return false;
                }
                break;
            case ActionKind.doskill:
            case ActionKind.addTroop:
            case ActionKind.storeRectUnit:
                if (count < 5)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 5, index);
                    return false;
                }
                else if (count > 5)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 5, index);
                    return false;
                }
                break;
            case ActionKind.loopBGM:
            case ActionKind.stopTroop:
            case ActionKind.eraseSkill:
            case ActionKind.eraseFriend:
                if (count < 1)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 1, index);
                    return false;
                }
                break;
            case ActionKind.darkness:
				if (count > 4)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 4, index);
                    return false;
                }
                break;
            case ActionKind.linkSpot:
            case ActionKind.moveTroop:
            case ActionKind.moveTroopFix:
            case ActionKind.smoveTroop:
            case ActionKind.smoveTroopFix:
            case ActionKind.linkEscape:
				if (count < 2)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 2, index);
                    return false;
                }
                else if (count > 4)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 4, index);
                    return false;
                }
                break;
            case ActionKind.spotmark:
				if (count > 2)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 2, index);
                    return false;
                }
                break;
            case ActionKind.showChara:
				if (count < 3)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 3, index);
                    return false;
                }
                else if (count > 5)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 5, index);
                    return false;
                }
                break;
            case ActionKind.shiftTroop:
				if (count < 3)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 3, index);
                    return false;
                }
                else if (count > 4)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 4, index);
                    return false;
                }
                break;
            case ActionKind.shiftTroop2:
                if (count < 4)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 4, index);
                    return false;
                }
                else if (count > 4)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 4, index);
                    return false;
                }
                break;
        }
        return true;
	}

    public static void AddReferenceAndValidate(ref Context context, ref Result result, CallFunctionExpression call)
    {
        var arguments = call.Arguments.AsSpan();
        if (arguments.IsEmpty)
        {
            return;
        }

        ref var argument = ref arguments[0];
        ReadOnlySpan<char> span;
        switch (call.Kind)
        {
            case FunctionKind.isSelect:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'isSelect'.", call.TokenId);
                }
                break;
            case FunctionKind.isWhoDead:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'isWhoDead'.", call.TokenId);
                }
                break;
            case FunctionKind.isGameOver:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.WarningAdd($"Unknown action 'isGameOver'.", call.TokenId);
                }
                break;
            case FunctionKind.has:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("has", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("has", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.Length > 1 && span[0] == '@')
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.inVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("inVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("inVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.Length > 1 && span[0] == '@')
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.inSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("inSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("inSpot", 2, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("inSpot", i + 1, "Unit", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.inRoamSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("inRoamSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("inRoamSpot", 2, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("inRoamSpot", i + 1, "Unit", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.yet:
                argument.ReferenceKind = ReferenceKind.Event;
                argument.ReferenceId = result.EventSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.count:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("count", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("count", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.amount:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("amount", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("amount", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.conVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("conVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("conVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.isDone:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isDone", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.getLife:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getLife", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("countVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.isActive:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isActive", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isArbeit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isArbeit", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isEnable:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnable", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isInvade:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isInvade", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isLeader:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isLeader", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isMaster:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isMaster", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isRoamer:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isRoamer", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isTalent:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isTalent", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isVassal:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isVassal", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countGain:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countGain", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countSpot", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isAllDead:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isAllDead", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isNowSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isNowSpot", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countForce:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countForce", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countMoney:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countMoney", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countSkill:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countSkill", 1, "Skill", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.getLifePer:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getLifePer", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isInterval:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isScenario:
                argument.ReferenceKind = ReferenceKind.Scenario;
                argument.ReferenceId = result.ScenarioSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.isRoamLeader:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isRoamLeader", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.getClearFloor:
                argument.ReferenceKind = ReferenceKind.Dungeon;
                argument.ReferenceId = result.DungeonSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.equal:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("equal", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("equal", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.eqVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eqVar", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eqVar", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isWar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isWar", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.Power;
                argument.ReferenceId = result.PowerSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.ptest:
                argument.ReferenceKind = ReferenceKind.Spot;
                argument.ReferenceId = result.SpotSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.Unit;
                argument.ReferenceId = result.UnitSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.reckon:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("reckon", 1, "StringVariableReader", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("reckon", 1, "StringVariableReader", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isLeague:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isLeague", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isLeague", 2, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isSameArmy:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isSameArmy", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isDead:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isDead", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isDead", i + 1, "Unit", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.isAnyDead:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isAnyDead", 1, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isAnyDead", i + 1, "Unit", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.isNext:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isNext", 1, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isNext", 2, "Spot", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countPost:
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsRedBlue(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.RedBlue;
                }
                else
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countPost", 1, "RedBlue", argument.TokenId);
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countPost", 2, "Unit", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[5];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isComTurn:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isComTurn", 1, "Power", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isDungeon:
                argument.ReferenceKind = ReferenceKind.Dungeon;
                argument.ReferenceId = result.DungeonSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isDungeon", 2, "Number", argument.TokenId);
                }

                break;
        }
    }

    public static bool ArgumentCountValidation(ref Context context, ref Result result, FunctionKind kind, int count, uint index)
    {
        if (count < 0)
        {
            return false;
        }

		switch (kind)
        {
            case FunctionKind.has:
            case FunctionKind.inVar:
            case FunctionKind.inSpot:
            case FunctionKind.inPower:
            case FunctionKind.inRoamSpot:
                if (count < 2)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 2, index);
                    return false;
                }
                break;
            case FunctionKind.yet:
            case FunctionKind.count:
            case FunctionKind.amount:
            case FunctionKind.conVar:
            case FunctionKind.isDone:
            case FunctionKind.getLife:
            case FunctionKind.countVar:
            case FunctionKind.isActive:
            case FunctionKind.isArbeit:
            case FunctionKind.isEnable:
            case FunctionKind.isInvade:
            case FunctionKind.isLeader:
            case FunctionKind.isMaster:
            case FunctionKind.isPlayer:
            case FunctionKind.isRoamer:
            case FunctionKind.isTalent:
            case FunctionKind.isVassal:
            case FunctionKind.countGain:
            case FunctionKind.countSpot:
            case FunctionKind.countUnit:
            case FunctionKind.isAllDead:
            case FunctionKind.isNowSpot:
            case FunctionKind.countForce:
            case FunctionKind.countMoney:
            case FunctionKind.countSkill:
            case FunctionKind.getLifePer:
            case FunctionKind.isInterval:
            case FunctionKind.isScenario:
            case FunctionKind.isRoamLeader:
            case FunctionKind.getClearFloor:
                if (count < 1)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 1, index);
                    return false;
                }
                else if (count > 1)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 1, index);
                    return false;
                }
                break;
            case FunctionKind.rand:
            case FunctionKind.isMap:
            case FunctionKind.isNPM:
            case FunctionKind.getMode:
            case FunctionKind.getTime:
            case FunctionKind.getTurn:
            case FunctionKind.isEvent:
            case FunctionKind.isPeace:
            case FunctionKind.isWorld:
            case FunctionKind.getLimit:
            case FunctionKind.isNewTurn:
            case FunctionKind.istoWorld:
            case FunctionKind.countPower:
            case FunctionKind.isRedAlive:
            case FunctionKind.isWatching:
            case FunctionKind.getRedCount:
            case FunctionKind.isBlueAlive:
            case FunctionKind.isGameClear:
            case FunctionKind.isPlayerEnd:
            case FunctionKind.getBlueCount:
            case FunctionKind.isPlayerTurn:
            case FunctionKind.isWorldMusicStop:
				if (count != 0)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 0, index);
                    return false;
                }
                break;
            case FunctionKind.equal:
            case FunctionKind.eqVar:
            case FunctionKind.isWar:
            case FunctionKind.ptest:
            case FunctionKind.reckon:
            case FunctionKind.isEnemy:
            case FunctionKind.isFriend:
            case FunctionKind.isLeague:
            case FunctionKind.isSameArmy:
                if (count < 2)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 2, index);
                    return false;
                }
                else if (count > 2)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 2, index);
                    return false;
                }
                break;
            case FunctionKind.isNpc:
            case FunctionKind.isDead:
            case FunctionKind.isAlive:
            case FunctionKind.inBattle:
            case FunctionKind.isAnyDead:
                if (count < 1)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 1, index);
                    return false;
                }
                break;
            case FunctionKind.isJoin:
            case FunctionKind.isNext:
            case FunctionKind.getDistance:
				if (count < 2)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 2, index);
                    return false;
                }
                else if (count > 3)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 3, index);
                    return false;
                }
                break;
            case FunctionKind.isPostIn:
				if (count < 3)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 3, index);
                    return false;
                }
                else if (count > 5)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 5, index);
                    return false;
                }
                break;
            case FunctionKind.countPost:
                if (count < 6)
                {
                    result.ErrorAdd_TooLessArguments(kind, count, 6, index);
                    return false;
                }
                else if (count > 6)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 6, index);
                    return false;
                }
                break;
            case FunctionKind.isComTurn:
				if (count > 1)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 1, index);
                    return false;
                }
                break;
            case FunctionKind.isDungeon:
				if (count > 2)
                {
                    result.ErrorAdd_TooManyArguments(kind, count, 2, index);
                    return false;
                }
                break;
        }
        return true;
	}
}
