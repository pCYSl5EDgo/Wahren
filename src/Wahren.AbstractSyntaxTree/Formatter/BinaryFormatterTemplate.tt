<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.TextTemplateHelper.dll" #>
<#@ import namespace="Wahren.AbstractSyntaxTree.TextTemplateHelper" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using Wahren.AbstractSyntaxTree.Parser;

namespace Wahren.AbstractSyntaxTree.Formatter;

<# foreach (var (encoding, get) in new[] { ("Cp932", "System.Text.Encoding.GetEncoding(932)"), ("Utf16", "System.Text.Encoding.Unicode") }) { #>
public class <#= encoding #>BinaryFormatter : IFormatter<byte>
{
    private static readonly byte[] registeredBytes;
    private static readonly ArrayPoolList<byte>.AddConverter<char> Converter;
    private static readonly ArrayPoolList<byte>.AddConverterAssumption Assumption;

    private static readonly int NewLine_Offset;
    private static readonly int NewLine_Count;
    private const int Indent_Offset = 0;
    private static readonly int Indent_Count;

<# foreach (var x in FormatterHelper.Pairs_NewLine) { #>
    private static readonly int <#= x.name #>_NewLine_Offset;
    private static readonly int <#= x.name #>_NewLine_Count;
<# } #>
<# foreach (var x in FormatterHelper.Pairs) { #>
    private static readonly int <#= x.name #>_Offset;
    private static readonly int <#= x.name #>_Count;
<# } #>
<# foreach (var x in FormatterHelper.Pairs_NewLine_Pairs) { #>
    private static readonly int <#= x.name0 #>_NewLine_<#= x.name1 #>_Offset;
    private static readonly int <#= x.name0 #>_NewLine_<#= x.name1 #>_Count;
<# } #>
    private static readonly int NewLine_BracketLeft_NewLine_Offset;
    private static readonly int NewLine_BracketLeft_NewLine_Count;

    static <#= encoding #>BinaryFormatter()
    {
        var encoding = <#= get #>;
        Converter = new(encoding.GetBytes);
        Assumption = new(encoding.GetMaxByteCount);

        Span<byte> spanNewLine = stackalloc byte[Assumption(2)];
        NewLine_Count = Converter("\r\n", spanNewLine);
        spanNewLine = spanNewLine.Slice(0, NewLine_Count);

        Span<byte> spanIndent = stackalloc byte[Assumption(4)];
        Indent_Count = Converter("    ", spanIndent);
        spanIndent = spanIndent.Slice(0, Indent_Count);

<# int total = 0;
foreach (var x in FormatterHelper.Pairs) { total += x.content.Length; }
foreach (var x in FormatterHelper.Pairs_NewLine) { total += x.content.Length; }
foreach (var x in FormatterHelper.Pairs_NewLine_Pairs) { total += x.content0.Length + x.content1.Length; }
#>
        registeredBytes = GC.AllocateUninitializedArray<byte>(Assumption(<#= total + 1 #>) + NewLine_Count * <#= 2 + FormatterHelper.Pairs_NewLine.Length + FormatterHelper.Pairs_NewLine_Pairs.Length #> + Indent_Count, true);

        spanIndent.CopyTo(registeredBytes.AsSpan(0, Indent_Count));
        int accum = Indent_Count;

        NewLine_Offset = accum;
        NewLine_BracketLeft_NewLine_Offset = accum;
        spanNewLine.CopyTo(registeredBytes.AsSpan(accum, NewLine_Count));
        accum += NewLine_Count;
        accum += Converter("{", registeredBytes.AsSpan(accum));
        spanNewLine.CopyTo(registeredBytes.AsSpan(accum, NewLine_Count));
        accum += NewLine_Count;
        NewLine_BracketLeft_NewLine_Count = accum - NewLine_BracketLeft_NewLine_Offset;

<# foreach (var x in FormatterHelper.Pairs_NewLine) { #>

        <#= x.name #>_NewLine_Offset = accum;
        accum += Converter("<#= x.content #>", registeredBytes.AsSpan(accum));
        spanNewLine.CopyTo(registeredBytes.AsSpan(accum, NewLine_Count));
        accum += NewLine_Count;
        <#= x.name #>_NewLine_Count = accum - <#= x.name #>_NewLine_Offset;
<# } #>
<# foreach (var x in FormatterHelper.Pairs) { #>

        <#= x.name #>_Offset = accum;
        <#= x.name #>_Count = Converter("<#= x.content #>", registeredBytes.AsSpan(accum));
        accum += <#= x.name #>_Count;
<# } #>
<# foreach (var x in FormatterHelper.Pairs_NewLine_Pairs) { #>

        <#= x.name0 #>_NewLine_<#= x.name1 #>_Offset = accum;
        accum += Converter("<#= x.content0 #>", registeredBytes.AsSpan(accum));
        spanNewLine.CopyTo(registeredBytes.AsSpan(accum, NewLine_Count));
        accum += NewLine_Count;
        accum += Converter("<#= x.content1 #>", registeredBytes.AsSpan(accum));
        <#= x.name0 #>_NewLine_<#= x.name1 #>_Count = accum - <#= x.name0 #>_NewLine_<#= x.name1 #>_Offset;
<# } #>
    }

    private static void Append_NewLine(ref ArrayPoolList<byte> destination, ref bool JustChangeLine)
    {
        JustChangeLine = true;
        destination.AddRange(registeredBytes.AsSpan(NewLine_Offset, NewLine_Count));
    }

    private static void Ensure_NewLine_Indent(ref ArrayPoolList<byte> destination, ref bool JustChangeLine, int indentCount)
    {
        if (!JustChangeLine)
        {
            destination.AddRange(registeredBytes.AsSpan(NewLine_Offset, NewLine_Count));
        }

        JustChangeLine = false;
        if (indentCount <= 0)
        {
            return;
        }

        var span = registeredBytes.AsSpan(Indent_Offset, Indent_Count);
        for (uint i = 0; i != indentCount; i++)
        {
            destination.AddRange(span);
        }
    }

    private static void Append_Indent(ref ArrayPoolList<byte> destination, ref bool JustChangeLine, int indentCount)
    {
        if (indentCount == 0)
        {
            return;
        }

        JustChangeLine = false;
        var span = registeredBytes.AsSpan(Indent_Offset, Indent_Count);
        for (uint i = 0; i != indentCount; i++)
        {
            destination.AddRange(span);
        }
    }

    private static void Append_Copy(ref ArrayPoolList<byte> destination, ref bool JustChangeLine, ReadOnlySpan<char> singleLineSource)
    {
        JustChangeLine = false;
        destination.AddRangeConversion(Converter, Assumption, singleLineSource);
    }

    private static void Append_NewLine_BracketLeft_NewLine(ref ArrayPoolList<byte> destination, ref bool JustChangeLine)
    {
        JustChangeLine = true;
        destination.AddRange(registeredBytes.AsSpan(NewLine_BracketLeft_NewLine_Offset, NewLine_BracketLeft_NewLine_Count));
    }

<# foreach (var x in FormatterHelper.Pairs_NewLine) { #>

    private static void Append_<#= x.name #>_NewLine(ref ArrayPoolList<byte> destination, ref bool JustChangeLine)
    {
        JustChangeLine = true;
        destination.AddRange(registeredBytes.AsSpan(<#= x.name #>_NewLine_Offset, <#= x.name #>_NewLine_Count));
    }
<# } #>
<# foreach (var x in FormatterHelper.Pairs) { #>

    private static void Append_<#= x.name #>(ref ArrayPoolList<byte> destination, ref bool JustChangeLine)
    {
        JustChangeLine = false;
        destination.AddRange(registeredBytes.AsSpan(<#= x.name #>_Offset, <#= x.name #>_Count));
    }
<# } #>
<# foreach (var x in FormatterHelper.Pairs_NewLine_Pairs) { #>

    private static void Append_<#= x.name0 #>_NewLine_<#= x.name1 #>(ref ArrayPoolList<byte> destination, ref bool JustChangeLine)
    {
        JustChangeLine = false;
        destination.AddRange(registeredBytes.AsSpan(<#= x.name0 #>_NewLine_<#= x.name1 #>_Offset, <#= x.name0 #>_NewLine_<#= x.name1 #>_Count));
    }
<# } #>

    public static bool TryFormat(ref Result result, ref ArrayPoolList<byte> destination)
    {
        ref var tokenList = ref result.TokenList;
        ref var source = ref result.Source;
        bool JustChangeLine = false;
		for (uint tokenIndex = uint.MaxValue, tokenCount = (uint)tokenList.Count; ++tokenIndex < tokenCount;)
        {
            switch (tokenList.GetKind(tokenIndex))
            {
                case TokenKind.Deleted:
                    continue;
                case TokenKind.Comment:
                    for (uint i = JustChangeLine ? 1U : 0U, end = tokenList.GetPrecedingNewLineCount(tokenIndex); i < end; ++i)
                    {
                        Append_NewLine(ref destination, ref JustChangeLine);
                    }

                    Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                    continue;
<# foreach (var item in FormatterHelper.NameNodes) { #>
                case TokenKind.<#= Helper.Escape(item) #>:
                    for (uint i = JustChangeLine ? 1U : 0U, end = tokenList.GetPrecedingNewLineCount(tokenIndex); i < end; ++i)
                    {
                        Append_NewLine(ref destination, ref JustChangeLine);
                    }

                    Append_<#= item #>_Space(ref destination, ref JustChangeLine);
                    break;
<# } #>
<# foreach (var item in FormatterHelper.BlockNodes) { #>
                case TokenKind.<#= item #>:
                    for (uint i = JustChangeLine ? 1U : 0U, end = tokenList.GetPrecedingNewLineCount(tokenIndex); i < end; ++i)
                    {
                        Append_NewLine(ref destination, ref JustChangeLine);
                    }

                    Append_<#= item #>_NewLine_BracketLeft(ref destination, ref JustChangeLine);
                    goto CONTENTS;
<# } #>
                default:
                    return false;
            }

            if (++tokenIndex + 1 >= tokenList.Count || tokenList.GetKind(tokenIndex) != TokenKind.Name)
            {
                return false;
            }

            Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
            if (tokenList.GetKind(++tokenIndex) == TokenKind.Colon)
            {
                if (++tokenIndex + 1 >= tokenList.Count || tokenList.GetKind(tokenIndex) != TokenKind.Super)
                {
                    return false;
                }

                Append_Space_Colon_Space(ref destination, ref JustChangeLine);
                Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
            }
            else
            {
                --tokenIndex;
            }

            Append_NewLine_BracketLeft_NewLine(ref destination, ref JustChangeLine);
        CONTENTS:
            if (++tokenIndex >= tokenList.Count || tokenList.GetKind(tokenIndex) != TokenKind.BracketLeft)
            {
                return false;
            }

            if (TryFormat_Block(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces: 1))
            {
                continue;
            }

            return false;
        }

        return true;
	}

    private static bool TryFormat_Block(ref Result result, ref ArrayPoolList<byte> destination, ref bool JustChangeLine, ref uint tokenIndex, int spaces)
    {
        ref var tokenList = ref result.TokenList;
        do
        {
            if (++tokenIndex >= tokenList.Count)
            {
                return false;
            }

            switch (tokenList.GetKind(tokenIndex))
            {
                case TokenKind.BracketRight:
                    Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces - 1);
                    Append_BracketRight_NewLine(ref destination, ref JustChangeLine);
                    return true;
                case TokenKind.Comment:
                    for (uint i = JustChangeLine ? 1U : 0U, end = tokenList.GetPrecedingNewLineCount(tokenIndex); i < end; ++i)
                    {
                        Append_NewLine(ref destination, ref JustChangeLine);
                    }
                    Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                    continue;
                case TokenKind.Deleted:
                    continue;
                case TokenKind.DEFAULT:
                    if (TryFormatElementAssignment_DEFAULT(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
                    {
                        continue;
                    }

                    return false;
                case TokenKind.RAY:
                case TokenKind.CONSTI:
                case TokenKind.LOYAL:
                case TokenKind.MEMBER:
                case TokenKind.OFFSET:
                case TokenKind.ROAM:
                case TokenKind.TEXT:
                    if (TryFormatElementAssignment_Not_DEFAULT(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
                    {
                        continue;
                    }

                    return false;
                case TokenKind.rif:
                    Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                    Append_rif_Space_ParenLeft(ref destination, ref JustChangeLine);
                    if (TryFormat_If(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
                    {
                        continue;
                    }

                    return false;
                case TokenKind.@if:
                    Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                    Append_if_Space_ParenLeft(ref destination, ref JustChangeLine);
                    if (TryFormat_If(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
                    {
                        continue;
                    }

                    return false;
                case TokenKind.@while:
                    Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                    Append_while_Space_ParenLeft(ref destination, ref JustChangeLine);
                    if (!TryFormat_Condition(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
                    {
                        return false;
                    }

                    if (!TryFormat_Block(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces + 1))
                    {
                        return false;
                    }
                    continue;
                case TokenKind.battle:
                    Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                    Append_battle_NewLine(ref destination, ref JustChangeLine);
                    Append_Indent(ref destination, ref JustChangeLine, spaces);
                    Append_BracketLeft_NewLine(ref destination, ref JustChangeLine);
                    if (TryFormat_Block(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces + 1))
                    {
                        continue;
                    }
                    return false;
<# foreach (var kind in new string[] { "break", "continue", "next", "return" }) { #>
                case TokenKind.<#= kind.Escape() #>:
                    Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                    Append_<#= kind #>_ParenLeft_ParenRight_NewLine(ref destination, ref JustChangeLine);
                    continue;
<# } #>
                case TokenKind.CallAction:
                    switch ((ActionKind)tokenList.GetOther(tokenIndex))
                    {
<# foreach (var (action, _, _) in CallableInfo.ActionInfoNormals) { #>
                        case ActionKind.<#= action.Escape() #>:
                            Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                            Append_<#= action #>_ParenLeft(ref destination, ref JustChangeLine);
                            break;
<# } #>
                        default:
                            Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                            break;
                    }

                    if (TryFormatCallActionArguments(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
                    {
                        continue;
                    }

                    return false;
            }
        } while (true);
    }

    private static bool TryFormatElementAssignment_Not_DEFAULT(ref Result result, ref ArrayPoolList<byte> destination, ref bool JustChangeLine, ref uint tokenIndex, int spaces)
    {
        if (!TryFormatElementAssignment_DEFAULT(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
        {
            return false;
        }

        ref var tokenList = ref result.TokenList;
        do
        {
            if (++tokenIndex >= tokenList.Count)
            {
                return false;
            }

            switch (tokenList.GetKind(tokenIndex))
            {
                case TokenKind.Deleted:
                    continue;
                case TokenKind.Content:
                    if (tokenList.IsFirstTokenInTheLine(tokenIndex))
                    {
                        Append_NewLine(ref destination, ref JustChangeLine);
                        Append_Indent(ref destination, ref JustChangeLine, spaces + 1);
                    }

                    Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                    continue;
                case TokenKind.ContentTrailing:
                    for (uint i = JustChangeLine ? 1U : 0U, end = tokenList.GetPrecedingNewLineCount(tokenIndex); i < end; ++i)
                    {
                        Append_NewLine(ref destination, ref JustChangeLine);
                    }

                    for (uint i = 0, end = tokenList.GetPrecedingWhitespaceCount(tokenIndex); i < end; ++i)
                    {
                        Append_Space(ref destination, ref JustChangeLine);
                    }
                    Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                    continue;
                case TokenKind.Mul:
                    Append_Space_Mul_Space(ref destination, ref JustChangeLine);
                    continue;
                case TokenKind.Semicolon:
                    if (tokenList.IsFirstTokenInTheLine(tokenIndex))
                    {
                        Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                    }

                    Append_Semicolon(ref destination, ref JustChangeLine);
                    return true;
                case TokenKind.Comma:
                    if (tokenIndex + 1 < tokenList.Count && tokenList.IsFirstTokenInTheLine(tokenIndex + 1))
                    {
                        Append_Comma(ref destination, ref JustChangeLine);
                    }
                    else
                    {
                        Append_Comma_Space(ref destination, ref JustChangeLine);
                    }

                    continue;
                default:
                    --tokenIndex;
                    return true;
            }
        } while (true);
    }

    private static bool TryFormatElementAssignment_DEFAULT(ref Result result, ref ArrayPoolList<byte> destination, ref bool JustChangeLine, ref uint tokenIndex, int spaces)
    {
        var elementTokenIndex = tokenIndex;
        ref var tokenList = ref result.TokenList;
        if (++tokenIndex + 1 >= tokenList.Count || tokenList.GetKind(tokenIndex) != TokenKind.Assign)
        {
            return false;
        }

        var contentTokenIndex = ++tokenIndex;
        if (tokenList.GetKind(contentTokenIndex) != TokenKind.Content)
        {
            return false;
        }

        Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
        Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(elementTokenIndex));
        if (tokenList.IsFirstTokenInTheLine(contentTokenIndex))
        {
            Append_Space_Assign(ref destination, ref JustChangeLine);
            Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces + 1);
        }
        else
        {
            Append_Space_Assign_Space(ref destination, ref JustChangeLine);
        }
        Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(contentTokenIndex));
        return true;
    }

    private static bool TryFormatCallActionArguments(ref Result result, ref ArrayPoolList<byte> destination, ref bool JustChangeLine, ref uint tokenIndex, int spaces)
    {
        ref var tokenList = ref result.TokenList;
        do
        {
            if (++tokenIndex >= tokenList.Count)
            {
                return false;
            }

            switch (tokenList.GetKind(tokenIndex))
            {
                case TokenKind.Deleted:
                    continue;
                case TokenKind.Content:
                    if (tokenList.IsFirstTokenInTheLine(tokenIndex))
                    {
                        Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces + 1);
                    }
                    Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                    continue;
                case TokenKind.ContentTrailing:
                    for (uint i = JustChangeLine ? 1U : 0U, end = tokenList.GetPrecedingNewLineCount(tokenIndex); i < end; ++i)
                    {
                        Append_NewLine(ref destination, ref JustChangeLine);
                    }

                    for (uint i = 0, end = tokenList.GetPrecedingWhitespaceCount(tokenIndex); i < end; ++i)
                    {
                        Append_Space(ref destination, ref JustChangeLine);
                    }
                    Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                    continue;
                case TokenKind.Comma:
                    if (tokenIndex + 1 < tokenList.Count && tokenList.IsFirstTokenInTheLine(tokenIndex + 1))
                    {
                        Append_Comma(ref destination, ref JustChangeLine);
                    }
                    else
                    {
                        Append_Comma_Space(ref destination, ref JustChangeLine);
                    }

                    continue;
                case TokenKind.ParenRight:
                    Append_ParenRight(ref destination, ref JustChangeLine);
                    return true;
                default:
                    --tokenIndex;
                    return true;
            }
        } while (true);
    }

    private static bool TryFormat_If(ref Result result, ref ArrayPoolList<byte> destination, ref bool JustChangeLine, ref uint tokenIndex, int spaces)
    {
        if (!TryFormat_Condition(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces))
        {
            return false;
        }

        if (!TryFormat_Block(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces + 1))
        {
            return false;
        }

        ref var tokenList = ref result.TokenList;
        if (++tokenIndex + 1 >= tokenList.Count || tokenList.GetKind(tokenIndex) != TokenKind.Else)
        {
            --tokenIndex;
            return true;
        }

        Append_Indent(ref destination, ref JustChangeLine, spaces);
        switch (tokenList.GetKind(++tokenIndex))
        {
            case TokenKind.@if:
                Append_else_Space_if_ParenLeft(ref destination, ref JustChangeLine);
                return TryFormat_If(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces);
            case TokenKind.rif:
                Append_else_Space_rif_ParenLeft(ref destination, ref JustChangeLine);
                return TryFormat_If(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces);
            case TokenKind.BracketLeft:
                Append_else_NewLine(ref destination, ref JustChangeLine);
                Append_Indent(ref destination, ref JustChangeLine, spaces);
                Append_BracketLeft_NewLine(ref destination, ref JustChangeLine);
                return TryFormat_Block(ref result, ref destination, ref JustChangeLine, ref tokenIndex, spaces + 1);
            default:
                return false;
        }
    }

    private static bool TryFormat_Condition(ref Result result, ref ArrayPoolList<byte> destination, ref bool JustChangeLine, ref uint tokenIndex, int spaces)
    {
        ref var tokenList = ref result.TokenList;
        do
        {
            if (++tokenIndex >= tokenList.Count)
            {
                return false;
            }

            switch (tokenList.GetKind(tokenIndex))
            {
                case TokenKind.Deleted:
                    continue;
                case TokenKind.BracketLeft:
                    Ensure_NewLine_Indent(ref destination, ref JustChangeLine, spaces);
                    Append_BracketLeft(ref destination, ref JustChangeLine);
                    return true;
<# foreach (var x in FormatterHelper.Operators) { #>
                case TokenKind.<#= x.name #>:
                    Append_Space_<#= x.name #>_Space(ref destination, ref JustChangeLine);
                    continue;
<# }#>
                case TokenKind.ParenLeft:
                    Append_ParenLeft(ref destination, ref JustChangeLine);
                    continue;
                case TokenKind.ParenRight:
                    Append_ParenRight(ref destination, ref JustChangeLine);
                    continue;
                case TokenKind.Comma:
                    Append_Comma_Space(ref destination, ref JustChangeLine);
                    continue;
                case TokenKind.CallFunction:
                    switch ((FunctionKind)tokenList.GetOther(tokenIndex))
                    {
<# foreach (var (name, _, _) in CallableInfo.FunctionInfoNormals) { #>
                        case FunctionKind.<#= name.Escape() #>:
                            Append_<#= name #>_ParenLeft(ref destination, ref JustChangeLine);
                            continue;
<# } #>
                    }

                    goto default;
                default:
                    Append_Copy(ref destination, ref JustChangeLine, result.GetSpan(tokenIndex));
                    continue;
            }
        } while (true);
    }
}

<# } #>