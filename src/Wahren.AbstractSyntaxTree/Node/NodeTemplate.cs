#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
namespace Wahren.AbstractSyntaxTree.Node;

using Statement;

public partial struct PowerNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public VariantPair<Pair_NullableString_NullableIntElement> castle_battle;
	public VariantPair<Pair_NullableString_NullableIntElement> @event;
	public VariantPair<Pair_NullableString_NullableIntElement> name;
	public VariantPair<Pair_NullableString_NullableIntElement> help;
	public VariantPair<Pair_NullableString_NullableIntElement> master;
	public VariantPair<Pair_NullableString_NullableIntElement> flag;
	public VariantPair<Pair_NullableString_NullableIntElement> bgm;
	public VariantPair<Pair_NullableString_NullableIntElement> volume;
	public VariantPair<Pair_NullableString_NullableIntElement> diplomacy;
	public VariantPair<Pair_NullableString_NullableIntElement> enable_select;
	public VariantPair<Pair_NullableString_NullableIntElement> enable_talent;
	public VariantPair<Pair_NullableString_NullableIntElement> free_raise;
	public VariantPair<Pair_NullableString_NullableIntElement> money;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> home;
	public VariantPair<Pair_NullableString_NullableIntElement> fix;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> diplo;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> league;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> enemy_power;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> staff;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> merce;
	public VariantPair<Pair_NullableString_NullableIntElement> training_average;
	public VariantPair<Pair_NullableString_NullableIntElement> base_merits;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> merits;
	public VariantPair<Pair_NullableString_NullableIntElement> base_loyal;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> loyals;
	public VariantPair<Pair_NullableString_NullableIntElement> head;
	public VariantPair<Pair_NullableString_NullableIntElement> head2;
	public VariantPair<Pair_NullableString_NullableIntElement> head3;
	public VariantPair<Pair_NullableString_NullableIntElement> head4;
	public VariantPair<Pair_NullableString_NullableIntElement> head5;
	public VariantPair<Pair_NullableString_NullableIntElement> head6;
	public VariantPair<Pair_NullableString_NullableIntElement> diff;
	public VariantPair<Pair_NullableString_NullableIntElement> yabo;
	public VariantPair<Pair_NullableString_NullableIntElement> kosen;
	public VariantPair<Pair_NullableString_NullableIntElement> text;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> member;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> friend;
	public VariantPair<Pair_NullableString_NullableIntElement> master2;
	public VariantPair<Pair_NullableString_NullableIntElement> master3;
	public VariantPair<Pair_NullableString_NullableIntElement> master4;
	public VariantPair<Pair_NullableString_NullableIntElement> master5;
	public VariantPair<Pair_NullableString_NullableIntElement> master6;
	public VariantPair<Pair_NullableString_NullableIntElement> enable;
	public VariantPair<Pair_NullableString_NullableIntElement> training_up;

    public PowerNode()
    {
    
	castle_battle = new();
	@event = new();
	name = new();
	help = new();
	master = new();
	flag = new();
	bgm = new();
	volume = new();
	diplomacy = new();
	enable_select = new();
	enable_talent = new();
	free_raise = new();
	money = new();
	home = new();
	fix = new();
	diplo = new();
	league = new();
	enemy_power = new();
	staff = new();
	merce = new();
	training_average = new();
	base_merits = new();
	merits = new();
	base_loyal = new();
	loyals = new();
	head = new();
	head2 = new();
	head3 = new();
	head4 = new();
	head5 = new();
	head6 = new();
	diff = new();
	yabo = new();
	kosen = new();
	text = new();
	member = new();
	friend = new();
	master2 = new();
	master3 = new();
	master4 = new();
	master5 = new();
	master6 = new();
	enable = new();
	training_up = new();
    }

	public void Dispose()
	{
		castle_battle.Dispose();
		@event.Dispose();
		name.Dispose();
		help.Dispose();
		master.Dispose();
		flag.Dispose();
		bgm.Dispose();
		volume.Dispose();
		diplomacy.Dispose();
		enable_select.Dispose();
		enable_talent.Dispose();
		free_raise.Dispose();
		money.Dispose();
		home.Dispose();
		fix.Dispose();
		diplo.Dispose();
		league.Dispose();
		enemy_power.Dispose();
		staff.Dispose();
		merce.Dispose();
		training_average.Dispose();
		base_merits.Dispose();
		merits.Dispose();
		base_loyal.Dispose();
		loyals.Dispose();
		head.Dispose();
		head2.Dispose();
		head3.Dispose();
		head4.Dispose();
		head5.Dispose();
		head6.Dispose();
		diff.Dispose();
		yabo.Dispose();
		kosen.Dispose();
		text.Dispose();
		member.Dispose();
		friend.Dispose();
		master2.Dispose();
		master3.Dispose();
		master4.Dispose();
		master5.Dispose();
		master6.Dispose();
		enable.Dispose();
		training_up.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    castle_battle.IncrementToken(indexEqualToOrGreaterThan, count);
	    @event.IncrementToken(indexEqualToOrGreaterThan, count);
	    name.IncrementToken(indexEqualToOrGreaterThan, count);
	    help.IncrementToken(indexEqualToOrGreaterThan, count);
	    master.IncrementToken(indexEqualToOrGreaterThan, count);
	    flag.IncrementToken(indexEqualToOrGreaterThan, count);
	    bgm.IncrementToken(indexEqualToOrGreaterThan, count);
	    volume.IncrementToken(indexEqualToOrGreaterThan, count);
	    diplomacy.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable_select.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable_talent.IncrementToken(indexEqualToOrGreaterThan, count);
	    free_raise.IncrementToken(indexEqualToOrGreaterThan, count);
	    money.IncrementToken(indexEqualToOrGreaterThan, count);
	    home.IncrementToken(indexEqualToOrGreaterThan, count);
	    fix.IncrementToken(indexEqualToOrGreaterThan, count);
	    diplo.IncrementToken(indexEqualToOrGreaterThan, count);
	    league.IncrementToken(indexEqualToOrGreaterThan, count);
	    enemy_power.IncrementToken(indexEqualToOrGreaterThan, count);
	    staff.IncrementToken(indexEqualToOrGreaterThan, count);
	    merce.IncrementToken(indexEqualToOrGreaterThan, count);
	    training_average.IncrementToken(indexEqualToOrGreaterThan, count);
	    base_merits.IncrementToken(indexEqualToOrGreaterThan, count);
	    merits.IncrementToken(indexEqualToOrGreaterThan, count);
	    base_loyal.IncrementToken(indexEqualToOrGreaterThan, count);
	    loyals.IncrementToken(indexEqualToOrGreaterThan, count);
	    head.IncrementToken(indexEqualToOrGreaterThan, count);
	    head2.IncrementToken(indexEqualToOrGreaterThan, count);
	    head3.IncrementToken(indexEqualToOrGreaterThan, count);
	    head4.IncrementToken(indexEqualToOrGreaterThan, count);
	    head5.IncrementToken(indexEqualToOrGreaterThan, count);
	    head6.IncrementToken(indexEqualToOrGreaterThan, count);
	    diff.IncrementToken(indexEqualToOrGreaterThan, count);
	    yabo.IncrementToken(indexEqualToOrGreaterThan, count);
	    kosen.IncrementToken(indexEqualToOrGreaterThan, count);
	    text.IncrementToken(indexEqualToOrGreaterThan, count);
	    member.IncrementToken(indexEqualToOrGreaterThan, count);
	    friend.IncrementToken(indexEqualToOrGreaterThan, count);
	    master2.IncrementToken(indexEqualToOrGreaterThan, count);
	    master3.IncrementToken(indexEqualToOrGreaterThan, count);
	    master4.IncrementToken(indexEqualToOrGreaterThan, count);
	    master5.IncrementToken(indexEqualToOrGreaterThan, count);
	    master6.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable.IncrementToken(indexEqualToOrGreaterThan, count);
	    training_up.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    castle_battle.DecrementToken(indexEqualToOrGreaterThan, count);
	    @event.DecrementToken(indexEqualToOrGreaterThan, count);
	    name.DecrementToken(indexEqualToOrGreaterThan, count);
	    help.DecrementToken(indexEqualToOrGreaterThan, count);
	    master.DecrementToken(indexEqualToOrGreaterThan, count);
	    flag.DecrementToken(indexEqualToOrGreaterThan, count);
	    bgm.DecrementToken(indexEqualToOrGreaterThan, count);
	    volume.DecrementToken(indexEqualToOrGreaterThan, count);
	    diplomacy.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable_select.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable_talent.DecrementToken(indexEqualToOrGreaterThan, count);
	    free_raise.DecrementToken(indexEqualToOrGreaterThan, count);
	    money.DecrementToken(indexEqualToOrGreaterThan, count);
	    home.DecrementToken(indexEqualToOrGreaterThan, count);
	    fix.DecrementToken(indexEqualToOrGreaterThan, count);
	    diplo.DecrementToken(indexEqualToOrGreaterThan, count);
	    league.DecrementToken(indexEqualToOrGreaterThan, count);
	    enemy_power.DecrementToken(indexEqualToOrGreaterThan, count);
	    staff.DecrementToken(indexEqualToOrGreaterThan, count);
	    merce.DecrementToken(indexEqualToOrGreaterThan, count);
	    training_average.DecrementToken(indexEqualToOrGreaterThan, count);
	    base_merits.DecrementToken(indexEqualToOrGreaterThan, count);
	    merits.DecrementToken(indexEqualToOrGreaterThan, count);
	    base_loyal.DecrementToken(indexEqualToOrGreaterThan, count);
	    loyals.DecrementToken(indexEqualToOrGreaterThan, count);
	    head.DecrementToken(indexEqualToOrGreaterThan, count);
	    head2.DecrementToken(indexEqualToOrGreaterThan, count);
	    head3.DecrementToken(indexEqualToOrGreaterThan, count);
	    head4.DecrementToken(indexEqualToOrGreaterThan, count);
	    head5.DecrementToken(indexEqualToOrGreaterThan, count);
	    head6.DecrementToken(indexEqualToOrGreaterThan, count);
	    diff.DecrementToken(indexEqualToOrGreaterThan, count);
	    yabo.DecrementToken(indexEqualToOrGreaterThan, count);
	    kosen.DecrementToken(indexEqualToOrGreaterThan, count);
	    text.DecrementToken(indexEqualToOrGreaterThan, count);
	    member.DecrementToken(indexEqualToOrGreaterThan, count);
	    friend.DecrementToken(indexEqualToOrGreaterThan, count);
	    master2.DecrementToken(indexEqualToOrGreaterThan, count);
	    master3.DecrementToken(indexEqualToOrGreaterThan, count);
	    master4.DecrementToken(indexEqualToOrGreaterThan, count);
	    master5.DecrementToken(indexEqualToOrGreaterThan, count);
	    master6.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable.DecrementToken(indexEqualToOrGreaterThan, count);
	    training_up.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct ClassNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public VariantPair<Pair_NullableString_NullableIntElement> troop_sort;
	public VariantPair<Pair_NullableString_NullableIntElement> stealth;
	public VariantPair<Pair_NullableString_NullableIntElement> free_move;
	public VariantPair<Pair_NullableString_NullableIntElement> name;
	public VariantPair<Pair_NullableString_NullableIntElement> help;
	public VariantPair<Pair_NullableString_NullableIntElement> sex;
	public VariantPair<Pair_NullableString_NullableIntElement> a;
	public VariantPair<Pair_NullableString_NullableIntElement> h;
	public VariantPair<Pair_NullableString_NullableIntElement> w;
	public VariantPair<Pair_NullableString_NullableIntElement> text;
	public VariantPair<Pair_NullableString_NullableIntElement> sub_image_even;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> yorozu;
	public VariantPair<Pair_NullableString_NullableIntElement> radius;
	public VariantPair<Pair_NullableString_NullableIntElement> radius_press;
	public VariantPair<Pair_NullableString_NullableIntElement> no_escape;
	public VariantPair<Pair_NullableString_NullableIntElement> no_regular;
	public VariantPair<Pair_NullableString_NullableIntElement> no_knock;
	public VariantPair<Pair_NullableString_NullableIntElement> no_cover;
	public VariantPair<Pair_NullableString_NullableIntElement> dead_event;
	public VariantPair<Pair_NullableString_NullableIntElement> beast_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> summon_max;
	public VariantPair<Pair_NullableString_NullableIntElement> summon_level;
	public VariantPair<Pair_NullableString_NullableIntElement> attack_range;
	public VariantPair<Pair_NullableString_NullableIntElement> escape_range;
	public VariantPair<Pair_NullableString_NullableIntElement> escape_run;
	public VariantPair<Pair_NullableString_NullableIntElement> hand_range;
	public VariantPair<Pair_NullableString_NullableIntElement> wake_range;
	public VariantPair<Pair_NullableString_NullableIntElement> view_range;
	public VariantPair<Pair_NullableString_NullableIntElement> cavalry_range;
	public VariantPair<Pair_NullableString_NullableIntElement> view_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> force_view_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> force_blind_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> satellite;
	public VariantPair<Pair_NullableString_NullableIntElement> hasexp;
	public VariantPair<Pair_NullableString_NullableIntElement> brave;
	public VariantPair<Pair_NullableString_NullableIntElement> level;
	public VariantPair<Pair_NullableString_NullableIntElement> hp;
	public VariantPair<Pair_NullableString_NullableIntElement> mp;
	public VariantPair<Pair_NullableString_NullableIntElement> attack;
	public VariantPair<Pair_NullableString_NullableIntElement> defense;
	public VariantPair<Pair_NullableString_NullableIntElement> magic;
	public VariantPair<Pair_NullableString_NullableIntElement> magdef;
	public VariantPair<Pair_NullableString_NullableIntElement> speed;
	public VariantPair<Pair_NullableString_NullableIntElement> dext;
	public VariantPair<Pair_NullableString_NullableIntElement> move;
	public VariantPair<Pair_NullableString_NullableIntElement> hprec;
	public VariantPair<Pair_NullableString_NullableIntElement> mprec;
	public VariantPair<Pair_NullableString_NullableIntElement> heal_max;
	public VariantPair<Pair_NullableString_NullableIntElement> attack_max;
	public VariantPair<Pair_NullableString_NullableIntElement> defense_max;
	public VariantPair<Pair_NullableString_NullableIntElement> magic_max;
	public VariantPair<Pair_NullableString_NullableIntElement> magdef_max;
	public VariantPair<Pair_NullableString_NullableIntElement> speed_max;
	public VariantPair<Pair_NullableString_NullableIntElement> dext_max;
	public VariantPair<Pair_NullableString_NullableIntElement> move_max;
	public VariantPair<Pair_NullableString_NullableIntElement> hprec_max;
	public VariantPair<Pair_NullableString_NullableIntElement> mprec_max;
	public VariantPair<Pair_NullableString_NullableIntElement> movetype;
	public VariantPair<Pair_NullableString_NullableIntElement> hpUp;
	public VariantPair<Pair_NullableString_NullableIntElement> mpUp;
	public VariantPair<Pair_NullableString_NullableIntElement> attackUp;
	public VariantPair<Pair_NullableString_NullableIntElement> defenseUp;
	public VariantPair<Pair_NullableString_NullableIntElement> magicUp;
	public VariantPair<Pair_NullableString_NullableIntElement> magdefUp;
	public VariantPair<Pair_NullableString_NullableIntElement> speedUp;
	public VariantPair<Pair_NullableString_NullableIntElement> dextUp;
	public VariantPair<Pair_NullableString_NullableIntElement> moveUp;
	public VariantPair<Pair_NullableString_NullableIntElement> hprecUp;
	public VariantPair<Pair_NullableString_NullableIntElement> mprecUp;
	public VariantPair<Pair_NullableString_NullableIntElement> hpMax;
	public VariantPair<Pair_NullableString_NullableIntElement> mpMax;
	public VariantPair<Pair_NullableString_NullableIntElement> attackMax;
	public VariantPair<Pair_NullableString_NullableIntElement> defenseMax;
	public VariantPair<Pair_NullableString_NullableIntElement> magicMax;
	public VariantPair<Pair_NullableString_NullableIntElement> magdefMax;
	public VariantPair<Pair_NullableString_NullableIntElement> speedMax;
	public VariantPair<Pair_NullableString_NullableIntElement> dextMax;
	public VariantPair<Pair_NullableString_NullableIntElement> moveMax;
	public VariantPair<Pair_NullableString_NullableIntElement> hprecMax;
	public VariantPair<Pair_NullableString_NullableIntElement> mprecMax;
	public VariantPair<Pair_NullableString_NullableIntElement> race;
	public VariantPair<Pair_NullableString_NullableIntElement> sortkey;
	public VariantPair<Pair_NullableString_NullableIntElement> picture;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_detail;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_menu;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_floor;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_shift;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_shift_up;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_center;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_back;
	public VariantPair<Pair_NullableString_NullableIntElement> price;
	public VariantPair<Pair_NullableString_NullableIntElement> cost;
	public VariantPair<Pair_NullableString_NullableIntElement> finance;
	public VariantPair<Pair_NullableString_NullableIntElement> tkool;
	public VariantPair<Pair_NullableString_NullableIntElement> keep_form;
	public VariantPair<Pair_NullableString_NullableIntElement> breast_width;
	public VariantPair<Pair_NullableString_NullableIntElement> medical;
	public VariantPair<Pair_NullableString_NullableIntElement> active;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> activenum;
	public VariantPair<Pair_NullableString_NullableIntElement> handle;
	public VariantPair<Pair_NullableString_NullableIntElement> red;
	public VariantPair<Pair_NullableString_NullableIntElement> rank_text;
	public VariantPair<Pair_NullableString_NullableIntElement> no_training;
	public VariantPair<Pair_NullableString_NullableIntElement> force_voice;
	public VariantPair<Pair_NullableString_NullableIntElement> face;
	public VariantPair<Pair_NullableString_NullableIntElement> same_friend;
	public VariantPair<Pair_NullableString_NullableIntElement> same_call;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> member;
	public VariantPair<Pair_NullableString_NullableIntElement> level_max;
	public VariantPair<Pair_NullableString_NullableIntElement> exp;
	public VariantPair<Pair_NullableString_NullableIntElement> exp_mul;
	public VariantPair<Pair_NullableString_NullableIntElement> exp_max;
	public VariantPair<Pair_NullableString_NullableIntElement> line;
	public VariantPair<Pair_NullableString_NullableIntElement> image;
	public VariantPair<Pair_NullableString_NullableIntElement> sub_image;
	public VariantPair<Pair_NullableString_NullableIntElement> politics;
	public VariantPair<Pair_NullableString_NullableIntElement> element_lost;
	public VariantPair<Pair_NullableString_NullableIntElement> fkey;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> friend;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> merce;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> consti;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> multi;
	public VariantPair<Pair_NullableString_NullableIntElement> lost_corpse;
	public VariantPair<Pair_NullableString_NullableIntElement> add_vassal;
	public VariantPair<Pair_NullableString_NullableIntElement> value;
	public VariantPair<Pair_NullableString_NullableIntElement> @break;
	public VariantPair<Pair_NullableString_NullableIntElement> scream;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> skill;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> skill2;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> learn;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> delskill;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> delskill2;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> item;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> leader_skill;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> assist_skill;
	public VariantPair<Pair_NullableString_NullableIntElement> image2;
	public VariantPair<Pair_NullableString_NullableIntElement> sub_image2;
	public VariantPair<Pair_NullableString_NullableIntElement> unique;
	public VariantPair<Pair_NullableString_NullableIntElement> same_sex;
	public VariantPair<Pair_NullableString_NullableIntElement> change;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> friend_ex;

    public ClassNode()
    {
    
	troop_sort = new();
	stealth = new();
	free_move = new();
	name = new();
	help = new();
	sex = new();
	a = new();
	h = new();
	w = new();
	text = new();
	sub_image_even = new();
	yorozu = new();
	radius = new();
	radius_press = new();
	no_escape = new();
	no_regular = new();
	no_knock = new();
	no_cover = new();
	dead_event = new();
	beast_unit = new();
	summon_max = new();
	summon_level = new();
	attack_range = new();
	escape_range = new();
	escape_run = new();
	hand_range = new();
	wake_range = new();
	view_range = new();
	cavalry_range = new();
	view_unit = new();
	force_view_unit = new();
	force_blind_unit = new();
	satellite = new();
	hasexp = new();
	brave = new();
	level = new();
	hp = new();
	mp = new();
	attack = new();
	defense = new();
	magic = new();
	magdef = new();
	speed = new();
	dext = new();
	move = new();
	hprec = new();
	mprec = new();
	heal_max = new();
	attack_max = new();
	defense_max = new();
	magic_max = new();
	magdef_max = new();
	speed_max = new();
	dext_max = new();
	move_max = new();
	hprec_max = new();
	mprec_max = new();
	movetype = new();
	hpUp = new();
	mpUp = new();
	attackUp = new();
	defenseUp = new();
	magicUp = new();
	magdefUp = new();
	speedUp = new();
	dextUp = new();
	moveUp = new();
	hprecUp = new();
	mprecUp = new();
	hpMax = new();
	mpMax = new();
	attackMax = new();
	defenseMax = new();
	magicMax = new();
	magdefMax = new();
	speedMax = new();
	dextMax = new();
	moveMax = new();
	hprecMax = new();
	mprecMax = new();
	race = new();
	sortkey = new();
	picture = new();
	picture_detail = new();
	picture_menu = new();
	picture_floor = new();
	picture_shift = new();
	picture_shift_up = new();
	picture_center = new();
	picture_back = new();
	price = new();
	cost = new();
	finance = new();
	tkool = new();
	keep_form = new();
	breast_width = new();
	medical = new();
	active = new();
	activenum = new();
	handle = new();
	red = new();
	rank_text = new();
	no_training = new();
	force_voice = new();
	face = new();
	same_friend = new();
	same_call = new();
	member = new();
	level_max = new();
	exp = new();
	exp_mul = new();
	exp_max = new();
	line = new();
	image = new();
	sub_image = new();
	politics = new();
	element_lost = new();
	fkey = new();
	friend = new();
	merce = new();
	consti = new();
	multi = new();
	lost_corpse = new();
	add_vassal = new();
	value = new();
	@break = new();
	scream = new();
	skill = new();
	skill2 = new();
	learn = new();
	delskill = new();
	delskill2 = new();
	item = new();
	leader_skill = new();
	assist_skill = new();
	image2 = new();
	sub_image2 = new();
	unique = new();
	same_sex = new();
	change = new();
	friend_ex = new();
    }

	public void Dispose()
	{
		troop_sort.Dispose();
		stealth.Dispose();
		free_move.Dispose();
		name.Dispose();
		help.Dispose();
		sex.Dispose();
		a.Dispose();
		h.Dispose();
		w.Dispose();
		text.Dispose();
		sub_image_even.Dispose();
		yorozu.Dispose();
		radius.Dispose();
		radius_press.Dispose();
		no_escape.Dispose();
		no_regular.Dispose();
		no_knock.Dispose();
		no_cover.Dispose();
		dead_event.Dispose();
		beast_unit.Dispose();
		summon_max.Dispose();
		summon_level.Dispose();
		attack_range.Dispose();
		escape_range.Dispose();
		escape_run.Dispose();
		hand_range.Dispose();
		wake_range.Dispose();
		view_range.Dispose();
		cavalry_range.Dispose();
		view_unit.Dispose();
		force_view_unit.Dispose();
		force_blind_unit.Dispose();
		satellite.Dispose();
		hasexp.Dispose();
		brave.Dispose();
		level.Dispose();
		hp.Dispose();
		mp.Dispose();
		attack.Dispose();
		defense.Dispose();
		magic.Dispose();
		magdef.Dispose();
		speed.Dispose();
		dext.Dispose();
		move.Dispose();
		hprec.Dispose();
		mprec.Dispose();
		heal_max.Dispose();
		attack_max.Dispose();
		defense_max.Dispose();
		magic_max.Dispose();
		magdef_max.Dispose();
		speed_max.Dispose();
		dext_max.Dispose();
		move_max.Dispose();
		hprec_max.Dispose();
		mprec_max.Dispose();
		movetype.Dispose();
		hpUp.Dispose();
		mpUp.Dispose();
		attackUp.Dispose();
		defenseUp.Dispose();
		magicUp.Dispose();
		magdefUp.Dispose();
		speedUp.Dispose();
		dextUp.Dispose();
		moveUp.Dispose();
		hprecUp.Dispose();
		mprecUp.Dispose();
		hpMax.Dispose();
		mpMax.Dispose();
		attackMax.Dispose();
		defenseMax.Dispose();
		magicMax.Dispose();
		magdefMax.Dispose();
		speedMax.Dispose();
		dextMax.Dispose();
		moveMax.Dispose();
		hprecMax.Dispose();
		mprecMax.Dispose();
		race.Dispose();
		sortkey.Dispose();
		picture.Dispose();
		picture_detail.Dispose();
		picture_menu.Dispose();
		picture_floor.Dispose();
		picture_shift.Dispose();
		picture_shift_up.Dispose();
		picture_center.Dispose();
		picture_back.Dispose();
		price.Dispose();
		cost.Dispose();
		finance.Dispose();
		tkool.Dispose();
		keep_form.Dispose();
		breast_width.Dispose();
		medical.Dispose();
		active.Dispose();
		activenum.Dispose();
		handle.Dispose();
		red.Dispose();
		rank_text.Dispose();
		no_training.Dispose();
		force_voice.Dispose();
		face.Dispose();
		same_friend.Dispose();
		same_call.Dispose();
		member.Dispose();
		level_max.Dispose();
		exp.Dispose();
		exp_mul.Dispose();
		exp_max.Dispose();
		line.Dispose();
		image.Dispose();
		sub_image.Dispose();
		politics.Dispose();
		element_lost.Dispose();
		fkey.Dispose();
		friend.Dispose();
		merce.Dispose();
		consti.Dispose();
		multi.Dispose();
		lost_corpse.Dispose();
		add_vassal.Dispose();
		value.Dispose();
		@break.Dispose();
		scream.Dispose();
		skill.Dispose();
		skill2.Dispose();
		learn.Dispose();
		delskill.Dispose();
		delskill2.Dispose();
		item.Dispose();
		leader_skill.Dispose();
		assist_skill.Dispose();
		image2.Dispose();
		sub_image2.Dispose();
		unique.Dispose();
		same_sex.Dispose();
		change.Dispose();
		friend_ex.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    troop_sort.IncrementToken(indexEqualToOrGreaterThan, count);
	    stealth.IncrementToken(indexEqualToOrGreaterThan, count);
	    free_move.IncrementToken(indexEqualToOrGreaterThan, count);
	    name.IncrementToken(indexEqualToOrGreaterThan, count);
	    help.IncrementToken(indexEqualToOrGreaterThan, count);
	    sex.IncrementToken(indexEqualToOrGreaterThan, count);
	    a.IncrementToken(indexEqualToOrGreaterThan, count);
	    h.IncrementToken(indexEqualToOrGreaterThan, count);
	    w.IncrementToken(indexEqualToOrGreaterThan, count);
	    text.IncrementToken(indexEqualToOrGreaterThan, count);
	    sub_image_even.IncrementToken(indexEqualToOrGreaterThan, count);
	    yorozu.IncrementToken(indexEqualToOrGreaterThan, count);
	    radius.IncrementToken(indexEqualToOrGreaterThan, count);
	    radius_press.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_escape.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_regular.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_knock.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_cover.IncrementToken(indexEqualToOrGreaterThan, count);
	    dead_event.IncrementToken(indexEqualToOrGreaterThan, count);
	    beast_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    summon_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    summon_level.IncrementToken(indexEqualToOrGreaterThan, count);
	    attack_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    escape_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    escape_run.IncrementToken(indexEqualToOrGreaterThan, count);
	    hand_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    wake_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    view_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    cavalry_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    view_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_view_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_blind_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    satellite.IncrementToken(indexEqualToOrGreaterThan, count);
	    hasexp.IncrementToken(indexEqualToOrGreaterThan, count);
	    brave.IncrementToken(indexEqualToOrGreaterThan, count);
	    level.IncrementToken(indexEqualToOrGreaterThan, count);
	    hp.IncrementToken(indexEqualToOrGreaterThan, count);
	    mp.IncrementToken(indexEqualToOrGreaterThan, count);
	    attack.IncrementToken(indexEqualToOrGreaterThan, count);
	    defense.IncrementToken(indexEqualToOrGreaterThan, count);
	    magic.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdef.IncrementToken(indexEqualToOrGreaterThan, count);
	    speed.IncrementToken(indexEqualToOrGreaterThan, count);
	    dext.IncrementToken(indexEqualToOrGreaterThan, count);
	    move.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprec.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprec.IncrementToken(indexEqualToOrGreaterThan, count);
	    heal_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    attack_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    defense_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    magic_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdef_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    speed_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    dext_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    move_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprec_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprec_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    movetype.IncrementToken(indexEqualToOrGreaterThan, count);
	    hpUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    mpUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    attackUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    defenseUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    magicUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdefUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    speedUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    dextUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    moveUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprecUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprecUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    hpMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    mpMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    attackMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    defenseMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    magicMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdefMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    speedMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    dextMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    moveMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprecMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprecMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    race.IncrementToken(indexEqualToOrGreaterThan, count);
	    sortkey.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_detail.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_menu.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_floor.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift_up.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_center.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_back.IncrementToken(indexEqualToOrGreaterThan, count);
	    price.IncrementToken(indexEqualToOrGreaterThan, count);
	    cost.IncrementToken(indexEqualToOrGreaterThan, count);
	    finance.IncrementToken(indexEqualToOrGreaterThan, count);
	    tkool.IncrementToken(indexEqualToOrGreaterThan, count);
	    keep_form.IncrementToken(indexEqualToOrGreaterThan, count);
	    breast_width.IncrementToken(indexEqualToOrGreaterThan, count);
	    medical.IncrementToken(indexEqualToOrGreaterThan, count);
	    active.IncrementToken(indexEqualToOrGreaterThan, count);
	    activenum.IncrementToken(indexEqualToOrGreaterThan, count);
	    handle.IncrementToken(indexEqualToOrGreaterThan, count);
	    red.IncrementToken(indexEqualToOrGreaterThan, count);
	    rank_text.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_training.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_voice.IncrementToken(indexEqualToOrGreaterThan, count);
	    face.IncrementToken(indexEqualToOrGreaterThan, count);
	    same_friend.IncrementToken(indexEqualToOrGreaterThan, count);
	    same_call.IncrementToken(indexEqualToOrGreaterThan, count);
	    member.IncrementToken(indexEqualToOrGreaterThan, count);
	    level_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    exp.IncrementToken(indexEqualToOrGreaterThan, count);
	    exp_mul.IncrementToken(indexEqualToOrGreaterThan, count);
	    exp_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    line.IncrementToken(indexEqualToOrGreaterThan, count);
	    image.IncrementToken(indexEqualToOrGreaterThan, count);
	    sub_image.IncrementToken(indexEqualToOrGreaterThan, count);
	    politics.IncrementToken(indexEqualToOrGreaterThan, count);
	    element_lost.IncrementToken(indexEqualToOrGreaterThan, count);
	    fkey.IncrementToken(indexEqualToOrGreaterThan, count);
	    friend.IncrementToken(indexEqualToOrGreaterThan, count);
	    merce.IncrementToken(indexEqualToOrGreaterThan, count);
	    consti.IncrementToken(indexEqualToOrGreaterThan, count);
	    multi.IncrementToken(indexEqualToOrGreaterThan, count);
	    lost_corpse.IncrementToken(indexEqualToOrGreaterThan, count);
	    add_vassal.IncrementToken(indexEqualToOrGreaterThan, count);
	    value.IncrementToken(indexEqualToOrGreaterThan, count);
	    @break.IncrementToken(indexEqualToOrGreaterThan, count);
	    scream.IncrementToken(indexEqualToOrGreaterThan, count);
	    skill.IncrementToken(indexEqualToOrGreaterThan, count);
	    skill2.IncrementToken(indexEqualToOrGreaterThan, count);
	    learn.IncrementToken(indexEqualToOrGreaterThan, count);
	    delskill.IncrementToken(indexEqualToOrGreaterThan, count);
	    delskill2.IncrementToken(indexEqualToOrGreaterThan, count);
	    item.IncrementToken(indexEqualToOrGreaterThan, count);
	    leader_skill.IncrementToken(indexEqualToOrGreaterThan, count);
	    assist_skill.IncrementToken(indexEqualToOrGreaterThan, count);
	    image2.IncrementToken(indexEqualToOrGreaterThan, count);
	    sub_image2.IncrementToken(indexEqualToOrGreaterThan, count);
	    unique.IncrementToken(indexEqualToOrGreaterThan, count);
	    same_sex.IncrementToken(indexEqualToOrGreaterThan, count);
	    change.IncrementToken(indexEqualToOrGreaterThan, count);
	    friend_ex.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    troop_sort.DecrementToken(indexEqualToOrGreaterThan, count);
	    stealth.DecrementToken(indexEqualToOrGreaterThan, count);
	    free_move.DecrementToken(indexEqualToOrGreaterThan, count);
	    name.DecrementToken(indexEqualToOrGreaterThan, count);
	    help.DecrementToken(indexEqualToOrGreaterThan, count);
	    sex.DecrementToken(indexEqualToOrGreaterThan, count);
	    a.DecrementToken(indexEqualToOrGreaterThan, count);
	    h.DecrementToken(indexEqualToOrGreaterThan, count);
	    w.DecrementToken(indexEqualToOrGreaterThan, count);
	    text.DecrementToken(indexEqualToOrGreaterThan, count);
	    sub_image_even.DecrementToken(indexEqualToOrGreaterThan, count);
	    yorozu.DecrementToken(indexEqualToOrGreaterThan, count);
	    radius.DecrementToken(indexEqualToOrGreaterThan, count);
	    radius_press.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_escape.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_regular.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_knock.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_cover.DecrementToken(indexEqualToOrGreaterThan, count);
	    dead_event.DecrementToken(indexEqualToOrGreaterThan, count);
	    beast_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    summon_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    summon_level.DecrementToken(indexEqualToOrGreaterThan, count);
	    attack_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    escape_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    escape_run.DecrementToken(indexEqualToOrGreaterThan, count);
	    hand_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    wake_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    view_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    cavalry_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    view_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_view_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_blind_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    satellite.DecrementToken(indexEqualToOrGreaterThan, count);
	    hasexp.DecrementToken(indexEqualToOrGreaterThan, count);
	    brave.DecrementToken(indexEqualToOrGreaterThan, count);
	    level.DecrementToken(indexEqualToOrGreaterThan, count);
	    hp.DecrementToken(indexEqualToOrGreaterThan, count);
	    mp.DecrementToken(indexEqualToOrGreaterThan, count);
	    attack.DecrementToken(indexEqualToOrGreaterThan, count);
	    defense.DecrementToken(indexEqualToOrGreaterThan, count);
	    magic.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdef.DecrementToken(indexEqualToOrGreaterThan, count);
	    speed.DecrementToken(indexEqualToOrGreaterThan, count);
	    dext.DecrementToken(indexEqualToOrGreaterThan, count);
	    move.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprec.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprec.DecrementToken(indexEqualToOrGreaterThan, count);
	    heal_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    attack_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    defense_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    magic_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdef_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    speed_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    dext_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    move_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprec_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprec_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    movetype.DecrementToken(indexEqualToOrGreaterThan, count);
	    hpUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    mpUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    attackUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    defenseUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    magicUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdefUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    speedUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    dextUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    moveUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprecUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprecUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    hpMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    mpMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    attackMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    defenseMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    magicMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdefMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    speedMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    dextMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    moveMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprecMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprecMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    race.DecrementToken(indexEqualToOrGreaterThan, count);
	    sortkey.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_detail.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_menu.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_floor.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift_up.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_center.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_back.DecrementToken(indexEqualToOrGreaterThan, count);
	    price.DecrementToken(indexEqualToOrGreaterThan, count);
	    cost.DecrementToken(indexEqualToOrGreaterThan, count);
	    finance.DecrementToken(indexEqualToOrGreaterThan, count);
	    tkool.DecrementToken(indexEqualToOrGreaterThan, count);
	    keep_form.DecrementToken(indexEqualToOrGreaterThan, count);
	    breast_width.DecrementToken(indexEqualToOrGreaterThan, count);
	    medical.DecrementToken(indexEqualToOrGreaterThan, count);
	    active.DecrementToken(indexEqualToOrGreaterThan, count);
	    activenum.DecrementToken(indexEqualToOrGreaterThan, count);
	    handle.DecrementToken(indexEqualToOrGreaterThan, count);
	    red.DecrementToken(indexEqualToOrGreaterThan, count);
	    rank_text.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_training.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_voice.DecrementToken(indexEqualToOrGreaterThan, count);
	    face.DecrementToken(indexEqualToOrGreaterThan, count);
	    same_friend.DecrementToken(indexEqualToOrGreaterThan, count);
	    same_call.DecrementToken(indexEqualToOrGreaterThan, count);
	    member.DecrementToken(indexEqualToOrGreaterThan, count);
	    level_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    exp.DecrementToken(indexEqualToOrGreaterThan, count);
	    exp_mul.DecrementToken(indexEqualToOrGreaterThan, count);
	    exp_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    line.DecrementToken(indexEqualToOrGreaterThan, count);
	    image.DecrementToken(indexEqualToOrGreaterThan, count);
	    sub_image.DecrementToken(indexEqualToOrGreaterThan, count);
	    politics.DecrementToken(indexEqualToOrGreaterThan, count);
	    element_lost.DecrementToken(indexEqualToOrGreaterThan, count);
	    fkey.DecrementToken(indexEqualToOrGreaterThan, count);
	    friend.DecrementToken(indexEqualToOrGreaterThan, count);
	    merce.DecrementToken(indexEqualToOrGreaterThan, count);
	    consti.DecrementToken(indexEqualToOrGreaterThan, count);
	    multi.DecrementToken(indexEqualToOrGreaterThan, count);
	    lost_corpse.DecrementToken(indexEqualToOrGreaterThan, count);
	    add_vassal.DecrementToken(indexEqualToOrGreaterThan, count);
	    value.DecrementToken(indexEqualToOrGreaterThan, count);
	    @break.DecrementToken(indexEqualToOrGreaterThan, count);
	    scream.DecrementToken(indexEqualToOrGreaterThan, count);
	    skill.DecrementToken(indexEqualToOrGreaterThan, count);
	    skill2.DecrementToken(indexEqualToOrGreaterThan, count);
	    learn.DecrementToken(indexEqualToOrGreaterThan, count);
	    delskill.DecrementToken(indexEqualToOrGreaterThan, count);
	    delskill2.DecrementToken(indexEqualToOrGreaterThan, count);
	    item.DecrementToken(indexEqualToOrGreaterThan, count);
	    leader_skill.DecrementToken(indexEqualToOrGreaterThan, count);
	    assist_skill.DecrementToken(indexEqualToOrGreaterThan, count);
	    image2.DecrementToken(indexEqualToOrGreaterThan, count);
	    sub_image2.DecrementToken(indexEqualToOrGreaterThan, count);
	    unique.DecrementToken(indexEqualToOrGreaterThan, count);
	    same_sex.DecrementToken(indexEqualToOrGreaterThan, count);
	    change.DecrementToken(indexEqualToOrGreaterThan, count);
	    friend_ex.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct DungeonNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public VariantPair<Pair_NullableString_NullableIntElement> name;
	public VariantPair<Pair_NullableString_NullableIntElement> max;
	public VariantPair<Pair_NullableString_NullableIntElement> move_speed;
	public VariantPair<Pair_NullableString_NullableIntElement> prefix;
	public VariantPair<Pair_NullableString_NullableIntElement> suffix;
	public VariantPair<Pair_NullableString_NullableIntElement> lv_adjust;
	public VariantPair<Pair_NullableString_NullableIntElement> open;
	public VariantPair<Pair_NullableString_NullableIntElement> limit;
	public VariantPair<Pair_NullableString_NullableIntElement> bgm;
	public VariantPair<Pair_NullableString_NullableIntElement> volume;
	public VariantPair<Pair_NullableString_NullableIntElement> blind;
	public VariantPair<Pair_NullableString_NullableIntElement> base_level;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> color;
	public VariantPair<Pair_NullableString_NullableIntElement> map;
	public VariantPair<Pair_NullableString_NullableIntElement> floor;
	public VariantPair<Pair_NullableString_NullableIntElement> wall;
	public VariantPair<Pair_NullableString_NullableIntElement> start;
	public VariantPair<Pair_NullableString_NullableIntElement> goal;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> monster;
	public VariantPair<Pair_NullableString_NullableIntElement> monster_num;
	public VariantPair<Pair_NullableString_NullableIntElement> box;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> item;
	public VariantPair<Pair_NullableString_NullableIntElement> item_num;
	public VariantPair<Pair_NullableString_NullableIntElement> item_text;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> home;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> ray;

    public DungeonNode()
    {
    
	name = new();
	max = new();
	move_speed = new();
	prefix = new();
	suffix = new();
	lv_adjust = new();
	open = new();
	limit = new();
	bgm = new();
	volume = new();
	blind = new();
	base_level = new();
	color = new();
	map = new();
	floor = new();
	wall = new();
	start = new();
	goal = new();
	monster = new();
	monster_num = new();
	box = new();
	item = new();
	item_num = new();
	item_text = new();
	home = new();
	ray = new();
    }

	public void Dispose()
	{
		name.Dispose();
		max.Dispose();
		move_speed.Dispose();
		prefix.Dispose();
		suffix.Dispose();
		lv_adjust.Dispose();
		open.Dispose();
		limit.Dispose();
		bgm.Dispose();
		volume.Dispose();
		blind.Dispose();
		base_level.Dispose();
		color.Dispose();
		map.Dispose();
		floor.Dispose();
		wall.Dispose();
		start.Dispose();
		goal.Dispose();
		monster.Dispose();
		monster_num.Dispose();
		box.Dispose();
		item.Dispose();
		item_num.Dispose();
		item_text.Dispose();
		home.Dispose();
		ray.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    name.IncrementToken(indexEqualToOrGreaterThan, count);
	    max.IncrementToken(indexEqualToOrGreaterThan, count);
	    move_speed.IncrementToken(indexEqualToOrGreaterThan, count);
	    prefix.IncrementToken(indexEqualToOrGreaterThan, count);
	    suffix.IncrementToken(indexEqualToOrGreaterThan, count);
	    lv_adjust.IncrementToken(indexEqualToOrGreaterThan, count);
	    open.IncrementToken(indexEqualToOrGreaterThan, count);
	    limit.IncrementToken(indexEqualToOrGreaterThan, count);
	    bgm.IncrementToken(indexEqualToOrGreaterThan, count);
	    volume.IncrementToken(indexEqualToOrGreaterThan, count);
	    blind.IncrementToken(indexEqualToOrGreaterThan, count);
	    base_level.IncrementToken(indexEqualToOrGreaterThan, count);
	    color.IncrementToken(indexEqualToOrGreaterThan, count);
	    map.IncrementToken(indexEqualToOrGreaterThan, count);
	    floor.IncrementToken(indexEqualToOrGreaterThan, count);
	    wall.IncrementToken(indexEqualToOrGreaterThan, count);
	    start.IncrementToken(indexEqualToOrGreaterThan, count);
	    goal.IncrementToken(indexEqualToOrGreaterThan, count);
	    monster.IncrementToken(indexEqualToOrGreaterThan, count);
	    monster_num.IncrementToken(indexEqualToOrGreaterThan, count);
	    box.IncrementToken(indexEqualToOrGreaterThan, count);
	    item.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_num.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_text.IncrementToken(indexEqualToOrGreaterThan, count);
	    home.IncrementToken(indexEqualToOrGreaterThan, count);
	    ray.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    name.DecrementToken(indexEqualToOrGreaterThan, count);
	    max.DecrementToken(indexEqualToOrGreaterThan, count);
	    move_speed.DecrementToken(indexEqualToOrGreaterThan, count);
	    prefix.DecrementToken(indexEqualToOrGreaterThan, count);
	    suffix.DecrementToken(indexEqualToOrGreaterThan, count);
	    lv_adjust.DecrementToken(indexEqualToOrGreaterThan, count);
	    open.DecrementToken(indexEqualToOrGreaterThan, count);
	    limit.DecrementToken(indexEqualToOrGreaterThan, count);
	    bgm.DecrementToken(indexEqualToOrGreaterThan, count);
	    volume.DecrementToken(indexEqualToOrGreaterThan, count);
	    blind.DecrementToken(indexEqualToOrGreaterThan, count);
	    base_level.DecrementToken(indexEqualToOrGreaterThan, count);
	    color.DecrementToken(indexEqualToOrGreaterThan, count);
	    map.DecrementToken(indexEqualToOrGreaterThan, count);
	    floor.DecrementToken(indexEqualToOrGreaterThan, count);
	    wall.DecrementToken(indexEqualToOrGreaterThan, count);
	    start.DecrementToken(indexEqualToOrGreaterThan, count);
	    goal.DecrementToken(indexEqualToOrGreaterThan, count);
	    monster.DecrementToken(indexEqualToOrGreaterThan, count);
	    monster_num.DecrementToken(indexEqualToOrGreaterThan, count);
	    box.DecrementToken(indexEqualToOrGreaterThan, count);
	    item.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_num.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_text.DecrementToken(indexEqualToOrGreaterThan, count);
	    home.DecrementToken(indexEqualToOrGreaterThan, count);
	    ray.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct FieldNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public Pair_NullableString_NullableIntElement? type;
	public Pair_NullableString_NullableIntElement? attr;
	public Pair_NullableString_NullableInt_ArrayElement? color;
	public Pair_NullableString_NullableIntElement? id;
	public Pair_NullableString_NullableIntElement? edge;
	public Pair_NullableString_NullableInt_ArrayElement? joint;
	public Pair_NullableString_NullableIntElement? image;
	public Pair_NullableString_NullableInt_ArrayElement? add2;
	public Pair_NullableString_NullableInt_ArrayElement? member;
	public Pair_NullableString_NullableIntElement? alt;
	public Pair_NullableString_NullableIntElement? alt_max;
	public Pair_NullableString_NullableIntElement? smooth;

    public FieldNode()
    {
    
	type = default;
	attr = default;
	color = default;
	id = default;
	edge = default;
	joint = default;
	image = default;
	add2 = default;
	member = default;
	alt = default;
	alt_max = default;
	smooth = default;
    }

	public void Dispose()
	{
		type = default;
		attr = default;
		color?.Dispose();
		color = default;
		id = default;
		edge = default;
		joint?.Dispose();
		joint = default;
		image = default;
		add2?.Dispose();
		add2 = default;
		member?.Dispose();
		member = default;
		alt = default;
		alt_max = default;
		smooth = default;
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    type?.IncrementToken(indexEqualToOrGreaterThan, count);
	    attr?.IncrementToken(indexEqualToOrGreaterThan, count);
	    color?.IncrementToken(indexEqualToOrGreaterThan, count);
	    id?.IncrementToken(indexEqualToOrGreaterThan, count);
	    edge?.IncrementToken(indexEqualToOrGreaterThan, count);
	    joint?.IncrementToken(indexEqualToOrGreaterThan, count);
	    image?.IncrementToken(indexEqualToOrGreaterThan, count);
	    add2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    member?.IncrementToken(indexEqualToOrGreaterThan, count);
	    alt?.IncrementToken(indexEqualToOrGreaterThan, count);
	    alt_max?.IncrementToken(indexEqualToOrGreaterThan, count);
	    smooth?.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    type?.DecrementToken(indexEqualToOrGreaterThan, count);
	    attr?.DecrementToken(indexEqualToOrGreaterThan, count);
	    color?.DecrementToken(indexEqualToOrGreaterThan, count);
	    id?.DecrementToken(indexEqualToOrGreaterThan, count);
	    edge?.DecrementToken(indexEqualToOrGreaterThan, count);
	    joint?.DecrementToken(indexEqualToOrGreaterThan, count);
	    image?.DecrementToken(indexEqualToOrGreaterThan, count);
	    add2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    member?.DecrementToken(indexEqualToOrGreaterThan, count);
	    alt?.DecrementToken(indexEqualToOrGreaterThan, count);
	    alt_max?.DecrementToken(indexEqualToOrGreaterThan, count);
	    smooth?.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct MovetypeNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public Pair_NullableString_NullableIntElement? name;
	public Pair_NullableString_NullableIntElement? help;
	public Pair_NullableString_NullableInt_ArrayElement? consti;

    public MovetypeNode()
    {
    
	name = default;
	help = default;
	consti = default;
    }

	public void Dispose()
	{
		name = default;
		help = default;
		consti?.Dispose();
		consti = default;
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    name?.IncrementToken(indexEqualToOrGreaterThan, count);
	    help?.IncrementToken(indexEqualToOrGreaterThan, count);
	    consti?.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    name?.DecrementToken(indexEqualToOrGreaterThan, count);
	    help?.DecrementToken(indexEqualToOrGreaterThan, count);
	    consti?.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct ObjectNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public Pair_NullableString_NullableInt_ArrayElement? skill;
	public Pair_NullableString_NullableIntElement? front;
	public Pair_NullableString_NullableIntElement? width;
	public Pair_NullableString_NullableIntElement? height;
	public Pair_NullableString_NullableIntElement? alpha;
	public Pair_NullableString_NullableIntElement? type;
	public Pair_NullableString_NullableIntElement? breakfire;
	public Pair_NullableString_NullableInt_ArrayElement? color;
	public Pair_NullableString_NullableIntElement? land_base;
	public Pair_NullableString_NullableIntElement? no_stop;
	public Pair_NullableString_NullableIntElement? no_wall2;
	public Pair_NullableString_NullableIntElement? no_arc_hit;
	public Pair_NullableString_NullableIntElement? radius;
	public Pair_NullableString_NullableIntElement? blk;
	public Pair_NullableString_NullableIntElement? w;
	public Pair_NullableString_NullableIntElement? h;
	public Pair_NullableString_NullableIntElement? a;
	public Pair_NullableString_NullableIntElement? image;
	public Pair_NullableString_NullableIntElement? image2;
	public Pair_NullableString_NullableIntElement? image2_w;
	public Pair_NullableString_NullableIntElement? image2_h;
	public Pair_NullableString_NullableIntElement? image2_a;
	public Pair_NullableString_NullableInt_ArrayElement? member;
	public Pair_NullableString_NullableIntElement? ground;

    public ObjectNode()
    {
    
	skill = default;
	front = default;
	width = default;
	height = default;
	alpha = default;
	type = default;
	breakfire = default;
	color = default;
	land_base = default;
	no_stop = default;
	no_wall2 = default;
	no_arc_hit = default;
	radius = default;
	blk = default;
	w = default;
	h = default;
	a = default;
	image = default;
	image2 = default;
	image2_w = default;
	image2_h = default;
	image2_a = default;
	member = default;
	ground = default;
    }

	public void Dispose()
	{
		skill?.Dispose();
		skill = default;
		front = default;
		width = default;
		height = default;
		alpha = default;
		type = default;
		breakfire = default;
		color?.Dispose();
		color = default;
		land_base = default;
		no_stop = default;
		no_wall2 = default;
		no_arc_hit = default;
		radius = default;
		blk = default;
		w = default;
		h = default;
		a = default;
		image = default;
		image2 = default;
		image2_w = default;
		image2_h = default;
		image2_a = default;
		member?.Dispose();
		member = default;
		ground = default;
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    skill?.IncrementToken(indexEqualToOrGreaterThan, count);
	    front?.IncrementToken(indexEqualToOrGreaterThan, count);
	    width?.IncrementToken(indexEqualToOrGreaterThan, count);
	    height?.IncrementToken(indexEqualToOrGreaterThan, count);
	    alpha?.IncrementToken(indexEqualToOrGreaterThan, count);
	    type?.IncrementToken(indexEqualToOrGreaterThan, count);
	    breakfire?.IncrementToken(indexEqualToOrGreaterThan, count);
	    color?.IncrementToken(indexEqualToOrGreaterThan, count);
	    land_base?.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_stop?.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_wall2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_arc_hit?.IncrementToken(indexEqualToOrGreaterThan, count);
	    radius?.IncrementToken(indexEqualToOrGreaterThan, count);
	    blk?.IncrementToken(indexEqualToOrGreaterThan, count);
	    w?.IncrementToken(indexEqualToOrGreaterThan, count);
	    h?.IncrementToken(indexEqualToOrGreaterThan, count);
	    a?.IncrementToken(indexEqualToOrGreaterThan, count);
	    image?.IncrementToken(indexEqualToOrGreaterThan, count);
	    image2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    image2_w?.IncrementToken(indexEqualToOrGreaterThan, count);
	    image2_h?.IncrementToken(indexEqualToOrGreaterThan, count);
	    image2_a?.IncrementToken(indexEqualToOrGreaterThan, count);
	    member?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ground?.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    skill?.DecrementToken(indexEqualToOrGreaterThan, count);
	    front?.DecrementToken(indexEqualToOrGreaterThan, count);
	    width?.DecrementToken(indexEqualToOrGreaterThan, count);
	    height?.DecrementToken(indexEqualToOrGreaterThan, count);
	    alpha?.DecrementToken(indexEqualToOrGreaterThan, count);
	    type?.DecrementToken(indexEqualToOrGreaterThan, count);
	    breakfire?.DecrementToken(indexEqualToOrGreaterThan, count);
	    color?.DecrementToken(indexEqualToOrGreaterThan, count);
	    land_base?.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_stop?.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_wall2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_arc_hit?.DecrementToken(indexEqualToOrGreaterThan, count);
	    radius?.DecrementToken(indexEqualToOrGreaterThan, count);
	    blk?.DecrementToken(indexEqualToOrGreaterThan, count);
	    w?.DecrementToken(indexEqualToOrGreaterThan, count);
	    h?.DecrementToken(indexEqualToOrGreaterThan, count);
	    a?.DecrementToken(indexEqualToOrGreaterThan, count);
	    image?.DecrementToken(indexEqualToOrGreaterThan, count);
	    image2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    image2_w?.DecrementToken(indexEqualToOrGreaterThan, count);
	    image2_h?.DecrementToken(indexEqualToOrGreaterThan, count);
	    image2_a?.DecrementToken(indexEqualToOrGreaterThan, count);
	    member?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ground?.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct RaceNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public VariantPair<Pair_NullableString_NullableIntElement> name;
	public VariantPair<Pair_NullableString_NullableIntElement> align;
	public VariantPair<Pair_NullableString_NullableIntElement> brave;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> consti;
	public VariantPair<Pair_NullableString_NullableIntElement> movetype;

    public RaceNode()
    {
    
	name = new();
	align = new();
	brave = new();
	consti = new();
	movetype = new();
    }

	public void Dispose()
	{
		name.Dispose();
		align.Dispose();
		brave.Dispose();
		consti.Dispose();
		movetype.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    name.IncrementToken(indexEqualToOrGreaterThan, count);
	    align.IncrementToken(indexEqualToOrGreaterThan, count);
	    brave.IncrementToken(indexEqualToOrGreaterThan, count);
	    consti.IncrementToken(indexEqualToOrGreaterThan, count);
	    movetype.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    name.DecrementToken(indexEqualToOrGreaterThan, count);
	    align.DecrementToken(indexEqualToOrGreaterThan, count);
	    brave.DecrementToken(indexEqualToOrGreaterThan, count);
	    consti.DecrementToken(indexEqualToOrGreaterThan, count);
	    movetype.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct SkillNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public SkillKind SkillKind;
	public SkillMovetype SkillMovetype;
	public Pair_NullableString_NullableIntElement? bright;
	public Pair_NullableString_NullableIntElement? func;
	public Pair_NullableString_NullableIntElement? name;
	public Pair_NullableString_NullableInt_ArrayElement? icon;
	public Pair_NullableString_NullableIntElement? fkey;
	public Pair_NullableString_NullableIntElement? sortkey;
	public Pair_NullableString_NullableIntElement? special;
	public Pair_NullableString_NullableIntElement? delay;
	public Pair_NullableString_NullableIntElement? gun_delay;
	public Pair_NullableString_NullableIntElement? quickreload;
	public Pair_NullableString_NullableIntElement? help;
	public Pair_NullableString_NullableIntElement? hide_help;
	public Pair_NullableString_NullableInt_ArrayElement? sound;
	public VariantPair<Pair_NullableString_NullableIntElement> msg;
	public VariantPair<Pair_NullableString_NullableIntElement> picture;
	public Pair_NullableString_NullableInt_ArrayElement? cutin;
	public Pair_NullableString_NullableIntElement? value;
	public Pair_NullableString_NullableIntElement? talent;
	public Pair_NullableString_NullableIntElement? exp_per;
	public Pair_NullableString_NullableIntElement? movetype;
	public Pair_NullableString_NullableIntElement? type;
	public Pair_NullableString_NullableInt_ArrayElement? color;
	public Pair_NullableString_NullableIntElement? w;
	public Pair_NullableString_NullableIntElement? h;
	public Pair_NullableString_NullableIntElement? a;
	public Pair_NullableString_NullableIntElement? mp;
	public Pair_NullableString_NullableIntElement? image;
	public Pair_NullableString_NullableIntElement? alpha_tip;
	public Pair_NullableString_NullableIntElement? alpha_butt;
	public Pair_NullableString_NullableIntElement? anime;
	public Pair_NullableString_NullableIntElement? anime_interval;
	public Pair_NullableString_NullableIntElement? center;
	public Pair_NullableString_NullableIntElement? ground;
	public Pair_NullableString_NullableIntElement? d360;
	public Pair_NullableString_NullableIntElement? d360_adj;
	public Pair_NullableString_NullableIntElement? rotate;
	public Pair_NullableString_NullableIntElement? direct;
	public Pair_NullableString_NullableIntElement? resize_interval;
	public Pair_NullableString_NullableIntElement? resize_start;
	public Pair_NullableString_NullableIntElement? resize_reverse;
	public Pair_NullableString_NullableIntElement? resize_w;
	public Pair_NullableString_NullableIntElement? resize_w_start;
	public Pair_NullableString_NullableIntElement? resize_w_max;
	public Pair_NullableString_NullableIntElement? resize_w_min;
	public Pair_NullableString_NullableIntElement? resize_h_min;
	public Pair_NullableString_NullableIntElement? resize_h_max;
	public Pair_NullableString_NullableIntElement? resize_h_start;
	public Pair_NullableString_NullableIntElement? resize_h;
	public Pair_NullableString_NullableIntElement? resize_x;
	public Pair_NullableString_NullableIntElement? resize_x_start;
	public Pair_NullableString_NullableIntElement? resize_x_max;
	public Pair_NullableString_NullableIntElement? resize_x_min;
	public Pair_NullableString_NullableIntElement? resize_y_min;
	public Pair_NullableString_NullableIntElement? resize_y_max;
	public Pair_NullableString_NullableIntElement? resize_y_start;
	public Pair_NullableString_NullableIntElement? resize_y;
	public Pair_NullableString_NullableIntElement? resize_a;
	public Pair_NullableString_NullableIntElement? resize_s;
	public Pair_NullableString_NullableIntElement? resize_a_start;
	public Pair_NullableString_NullableIntElement? resize_s_start;
	public Pair_NullableString_NullableIntElement? resize_a_max;
	public Pair_NullableString_NullableIntElement? resize_s_max;
	public Pair_NullableString_NullableIntElement? resize_a_min;
	public Pair_NullableString_NullableIntElement? resize_s_min;
	public Pair_NullableString_NullableIntElement? force_fire;
	public Pair_NullableString_NullableIntElement? slow_per;
	public Pair_NullableString_NullableIntElement? slow_time;
	public Pair_NullableString_NullableIntElement? slide;
	public Pair_NullableString_NullableIntElement? slide_speed;
	public Pair_NullableString_NullableIntElement? slide_delay;
	public Pair_NullableString_NullableIntElement? slide_stamp;
	public Pair_NullableString_NullableIntElement? wait_time;
	public Pair_NullableString_NullableIntElement? wait_time2;
	public Pair_NullableString_NullableIntElement? shake;
	public Pair_NullableString_NullableInt_ArrayElement? ray;
	public Pair_NullableString_NullableIntElement? force_ray;
	public Pair_NullableString_NullableIntElement? flash;
	public Pair_NullableString_NullableIntElement? flash_anime;
	public Pair_NullableString_NullableIntElement? flash_image;
	public Pair_NullableString_NullableIntElement? collision;
	public Pair_NullableString_NullableIntElement? afterdeath;
	public Pair_NullableString_NullableIntElement? afterhit;
	public Pair_NullableString_NullableInt_ArrayElement? yorozu;
	public Pair_NullableString_NullableIntElement? str;
	public Pair_NullableString_NullableIntElement? str_ratio;
	public Pair_NullableString_NullableIntElement? attr;
	public Pair_NullableString_NullableIntElement? add;
	public Pair_NullableString_NullableInt_ArrayElement? add2;
	public Pair_NullableString_NullableIntElement? add_all;
	public Pair_NullableString_NullableIntElement? add_per;
	public Pair_NullableString_NullableIntElement? damage;
	public Pair_NullableString_NullableIntElement? damage_range_adjust;
	public Pair_NullableString_NullableIntElement? attack_us;
	public Pair_NullableString_NullableIntElement? allfunc;
	public Pair_NullableString_NullableIntElement? bom;
	public Pair_NullableString_NullableIntElement? homing;
	public Pair_NullableString_NullableIntElement? homing2;
	public Pair_NullableString_NullableIntElement? forward;
	public Pair_NullableString_NullableIntElement? far;
	public Pair_NullableString_NullableIntElement? hard;
	public Pair_NullableString_NullableIntElement? hard2;
	public Pair_NullableString_NullableIntElement? onehit;
	public Pair_NullableString_NullableInt_ArrayElement? offset;
	public Pair_NullableString_NullableIntElement? offset_attr;
	public Pair_NullableString_NullableIntElement? knock;
	public Pair_NullableString_NullableIntElement? knock_speed;
	public Pair_NullableString_NullableIntElement? knock_power;
	public Pair_NullableString_NullableIntElement? range;
	public Pair_NullableString_NullableIntElement? range_min;
	public Pair_NullableString_NullableIntElement? check;
	public Pair_NullableString_NullableIntElement? speed;
	public Pair_NullableString_NullableInt_ArrayElement? wave;
	public Pair_NullableString_NullableIntElement? origin;
	public Pair_NullableString_NullableIntElement? random_space;
	public Pair_NullableString_NullableIntElement? random_space_min;
	public Pair_NullableString_NullableIntElement? time;
	public Pair_NullableString_NullableIntElement? height;
	public Pair_NullableString_NullableIntElement? rush;
	public Pair_NullableString_NullableIntElement? rush_interval;
	public Pair_NullableString_NullableIntElement? rush_degree;
	public Pair_NullableString_NullableIntElement? rush_random_degree;
	public Pair_NullableString_NullableIntElement? follow;
	public Pair_NullableString_NullableIntElement? start_degree;
	public Pair_NullableString_NullableIntElement? start_degree_fix;
	public Pair_NullableString_NullableIntElement? start_degree_turnunit;
	public Pair_NullableString_NullableIntElement? start_degree_type;
	public Pair_NullableString_NullableIntElement? start_random_degree;
	public Pair_NullableString_NullableIntElement? drop_degree;
	public Pair_NullableString_NullableIntElement? drop_degree2;
	public Pair_NullableString_NullableIntElement? joint_skill;
	public Pair_NullableString_NullableIntElement? send_target;
	public Pair_NullableString_NullableIntElement? send_image_degree;
	public Pair_NullableString_NullableIntElement? next;
	public Pair_NullableString_NullableInt_ArrayElement? next2;
	public Pair_NullableString_NullableInt_ArrayElement? next3;
	public Pair_NullableString_NullableIntElement? next4;
	public Pair_NullableString_NullableIntElement? next_order;
	public Pair_NullableString_NullableIntElement? next_last;
	public Pair_NullableString_NullableIntElement? next_first;
	public Pair_NullableString_NullableIntElement? next_interval;
	public Pair_NullableString_NullableInt_ArrayElement? just_next;
	public Pair_NullableString_NullableIntElement? pair_next;
	public Pair_NullableString_NullableIntElement? item_type;
	public Pair_NullableString_NullableIntElement? item_sort;
	public Pair_NullableString_NullableIntElement? item_nosell;
	public Pair_NullableString_NullableIntElement? price;
	public Pair_NullableString_NullableInt_ArrayElement? friend;
	public Pair_NullableString_NullableIntElement? summon_level;

    public SkillNode()
    {
    
	SkillKind = new();
	SkillMovetype = new();
	bright = default;
	func = default;
	name = default;
	icon = default;
	fkey = default;
	sortkey = default;
	special = default;
	delay = default;
	gun_delay = default;
	quickreload = default;
	help = default;
	hide_help = default;
	sound = default;
	msg = new();
	picture = new();
	cutin = default;
	value = default;
	talent = default;
	exp_per = default;
	movetype = default;
	type = default;
	color = default;
	w = default;
	h = default;
	a = default;
	mp = default;
	image = default;
	alpha_tip = default;
	alpha_butt = default;
	anime = default;
	anime_interval = default;
	center = default;
	ground = default;
	d360 = default;
	d360_adj = default;
	rotate = default;
	direct = default;
	resize_interval = default;
	resize_start = default;
	resize_reverse = default;
	resize_w = default;
	resize_w_start = default;
	resize_w_max = default;
	resize_w_min = default;
	resize_h_min = default;
	resize_h_max = default;
	resize_h_start = default;
	resize_h = default;
	resize_x = default;
	resize_x_start = default;
	resize_x_max = default;
	resize_x_min = default;
	resize_y_min = default;
	resize_y_max = default;
	resize_y_start = default;
	resize_y = default;
	resize_a = default;
	resize_s = default;
	resize_a_start = default;
	resize_s_start = default;
	resize_a_max = default;
	resize_s_max = default;
	resize_a_min = default;
	resize_s_min = default;
	force_fire = default;
	slow_per = default;
	slow_time = default;
	slide = default;
	slide_speed = default;
	slide_delay = default;
	slide_stamp = default;
	wait_time = default;
	wait_time2 = default;
	shake = default;
	ray = default;
	force_ray = default;
	flash = default;
	flash_anime = default;
	flash_image = default;
	collision = default;
	afterdeath = default;
	afterhit = default;
	yorozu = default;
	str = default;
	str_ratio = default;
	attr = default;
	add = default;
	add2 = default;
	add_all = default;
	add_per = default;
	damage = default;
	damage_range_adjust = default;
	attack_us = default;
	allfunc = default;
	bom = default;
	homing = default;
	homing2 = default;
	forward = default;
	far = default;
	hard = default;
	hard2 = default;
	onehit = default;
	offset = default;
	offset_attr = default;
	knock = default;
	knock_speed = default;
	knock_power = default;
	range = default;
	range_min = default;
	check = default;
	speed = default;
	wave = default;
	origin = default;
	random_space = default;
	random_space_min = default;
	time = default;
	height = default;
	rush = default;
	rush_interval = default;
	rush_degree = default;
	rush_random_degree = default;
	follow = default;
	start_degree = default;
	start_degree_fix = default;
	start_degree_turnunit = default;
	start_degree_type = default;
	start_random_degree = default;
	drop_degree = default;
	drop_degree2 = default;
	joint_skill = default;
	send_target = default;
	send_image_degree = default;
	next = default;
	next2 = default;
	next3 = default;
	next4 = default;
	next_order = default;
	next_last = default;
	next_first = default;
	next_interval = default;
	just_next = default;
	pair_next = default;
	item_type = default;
	item_sort = default;
	item_nosell = default;
	price = default;
	friend = default;
	summon_level = default;
    }

	public void Dispose()
	{
		bright = default;
		func = default;
		name = default;
		icon?.Dispose();
		icon = default;
		fkey = default;
		sortkey = default;
		special = default;
		delay = default;
		gun_delay = default;
		quickreload = default;
		help = default;
		hide_help = default;
		sound?.Dispose();
		sound = default;
		msg.Dispose();
		picture.Dispose();
		cutin?.Dispose();
		cutin = default;
		value = default;
		talent = default;
		exp_per = default;
		movetype = default;
		type = default;
		color?.Dispose();
		color = default;
		w = default;
		h = default;
		a = default;
		mp = default;
		image = default;
		alpha_tip = default;
		alpha_butt = default;
		anime = default;
		anime_interval = default;
		center = default;
		ground = default;
		d360 = default;
		d360_adj = default;
		rotate = default;
		direct = default;
		resize_interval = default;
		resize_start = default;
		resize_reverse = default;
		resize_w = default;
		resize_w_start = default;
		resize_w_max = default;
		resize_w_min = default;
		resize_h_min = default;
		resize_h_max = default;
		resize_h_start = default;
		resize_h = default;
		resize_x = default;
		resize_x_start = default;
		resize_x_max = default;
		resize_x_min = default;
		resize_y_min = default;
		resize_y_max = default;
		resize_y_start = default;
		resize_y = default;
		resize_a = default;
		resize_s = default;
		resize_a_start = default;
		resize_s_start = default;
		resize_a_max = default;
		resize_s_max = default;
		resize_a_min = default;
		resize_s_min = default;
		force_fire = default;
		slow_per = default;
		slow_time = default;
		slide = default;
		slide_speed = default;
		slide_delay = default;
		slide_stamp = default;
		wait_time = default;
		wait_time2 = default;
		shake = default;
		ray?.Dispose();
		ray = default;
		force_ray = default;
		flash = default;
		flash_anime = default;
		flash_image = default;
		collision = default;
		afterdeath = default;
		afterhit = default;
		yorozu?.Dispose();
		yorozu = default;
		str = default;
		str_ratio = default;
		attr = default;
		add = default;
		add2?.Dispose();
		add2 = default;
		add_all = default;
		add_per = default;
		damage = default;
		damage_range_adjust = default;
		attack_us = default;
		allfunc = default;
		bom = default;
		homing = default;
		homing2 = default;
		forward = default;
		far = default;
		hard = default;
		hard2 = default;
		onehit = default;
		offset?.Dispose();
		offset = default;
		offset_attr = default;
		knock = default;
		knock_speed = default;
		knock_power = default;
		range = default;
		range_min = default;
		check = default;
		speed = default;
		wave?.Dispose();
		wave = default;
		origin = default;
		random_space = default;
		random_space_min = default;
		time = default;
		height = default;
		rush = default;
		rush_interval = default;
		rush_degree = default;
		rush_random_degree = default;
		follow = default;
		start_degree = default;
		start_degree_fix = default;
		start_degree_turnunit = default;
		start_degree_type = default;
		start_random_degree = default;
		drop_degree = default;
		drop_degree2 = default;
		joint_skill = default;
		send_target = default;
		send_image_degree = default;
		next = default;
		next2?.Dispose();
		next2 = default;
		next3?.Dispose();
		next3 = default;
		next4 = default;
		next_order = default;
		next_last = default;
		next_first = default;
		next_interval = default;
		just_next?.Dispose();
		just_next = default;
		pair_next = default;
		item_type = default;
		item_sort = default;
		item_nosell = default;
		price = default;
		friend?.Dispose();
		friend = default;
		summon_level = default;
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    bright?.IncrementToken(indexEqualToOrGreaterThan, count);
	    func?.IncrementToken(indexEqualToOrGreaterThan, count);
	    name?.IncrementToken(indexEqualToOrGreaterThan, count);
	    icon?.IncrementToken(indexEqualToOrGreaterThan, count);
	    fkey?.IncrementToken(indexEqualToOrGreaterThan, count);
	    sortkey?.IncrementToken(indexEqualToOrGreaterThan, count);
	    special?.IncrementToken(indexEqualToOrGreaterThan, count);
	    delay?.IncrementToken(indexEqualToOrGreaterThan, count);
	    gun_delay?.IncrementToken(indexEqualToOrGreaterThan, count);
	    quickreload?.IncrementToken(indexEqualToOrGreaterThan, count);
	    help?.IncrementToken(indexEqualToOrGreaterThan, count);
	    hide_help?.IncrementToken(indexEqualToOrGreaterThan, count);
	    sound?.IncrementToken(indexEqualToOrGreaterThan, count);
	    msg.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture.IncrementToken(indexEqualToOrGreaterThan, count);
	    cutin?.IncrementToken(indexEqualToOrGreaterThan, count);
	    value?.IncrementToken(indexEqualToOrGreaterThan, count);
	    talent?.IncrementToken(indexEqualToOrGreaterThan, count);
	    exp_per?.IncrementToken(indexEqualToOrGreaterThan, count);
	    movetype?.IncrementToken(indexEqualToOrGreaterThan, count);
	    type?.IncrementToken(indexEqualToOrGreaterThan, count);
	    color?.IncrementToken(indexEqualToOrGreaterThan, count);
	    w?.IncrementToken(indexEqualToOrGreaterThan, count);
	    h?.IncrementToken(indexEqualToOrGreaterThan, count);
	    a?.IncrementToken(indexEqualToOrGreaterThan, count);
	    mp?.IncrementToken(indexEqualToOrGreaterThan, count);
	    image?.IncrementToken(indexEqualToOrGreaterThan, count);
	    alpha_tip?.IncrementToken(indexEqualToOrGreaterThan, count);
	    alpha_butt?.IncrementToken(indexEqualToOrGreaterThan, count);
	    anime?.IncrementToken(indexEqualToOrGreaterThan, count);
	    anime_interval?.IncrementToken(indexEqualToOrGreaterThan, count);
	    center?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ground?.IncrementToken(indexEqualToOrGreaterThan, count);
	    d360?.IncrementToken(indexEqualToOrGreaterThan, count);
	    d360_adj?.IncrementToken(indexEqualToOrGreaterThan, count);
	    rotate?.IncrementToken(indexEqualToOrGreaterThan, count);
	    direct?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_interval?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_start?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_reverse?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_w?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_w_start?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_w_max?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_w_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_h_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_h_max?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_h_start?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_h?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_x?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_x_start?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_x_max?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_x_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_y_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_y_max?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_y_start?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_y?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_a?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_s?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_a_start?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_s_start?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_a_max?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_s_max?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_a_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    resize_s_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_fire?.IncrementToken(indexEqualToOrGreaterThan, count);
	    slow_per?.IncrementToken(indexEqualToOrGreaterThan, count);
	    slow_time?.IncrementToken(indexEqualToOrGreaterThan, count);
	    slide?.IncrementToken(indexEqualToOrGreaterThan, count);
	    slide_speed?.IncrementToken(indexEqualToOrGreaterThan, count);
	    slide_delay?.IncrementToken(indexEqualToOrGreaterThan, count);
	    slide_stamp?.IncrementToken(indexEqualToOrGreaterThan, count);
	    wait_time?.IncrementToken(indexEqualToOrGreaterThan, count);
	    wait_time2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    shake?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ray?.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_ray?.IncrementToken(indexEqualToOrGreaterThan, count);
	    flash?.IncrementToken(indexEqualToOrGreaterThan, count);
	    flash_anime?.IncrementToken(indexEqualToOrGreaterThan, count);
	    flash_image?.IncrementToken(indexEqualToOrGreaterThan, count);
	    collision?.IncrementToken(indexEqualToOrGreaterThan, count);
	    afterdeath?.IncrementToken(indexEqualToOrGreaterThan, count);
	    afterhit?.IncrementToken(indexEqualToOrGreaterThan, count);
	    yorozu?.IncrementToken(indexEqualToOrGreaterThan, count);
	    str?.IncrementToken(indexEqualToOrGreaterThan, count);
	    str_ratio?.IncrementToken(indexEqualToOrGreaterThan, count);
	    attr?.IncrementToken(indexEqualToOrGreaterThan, count);
	    add?.IncrementToken(indexEqualToOrGreaterThan, count);
	    add2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    add_all?.IncrementToken(indexEqualToOrGreaterThan, count);
	    add_per?.IncrementToken(indexEqualToOrGreaterThan, count);
	    damage?.IncrementToken(indexEqualToOrGreaterThan, count);
	    damage_range_adjust?.IncrementToken(indexEqualToOrGreaterThan, count);
	    attack_us?.IncrementToken(indexEqualToOrGreaterThan, count);
	    allfunc?.IncrementToken(indexEqualToOrGreaterThan, count);
	    bom?.IncrementToken(indexEqualToOrGreaterThan, count);
	    homing?.IncrementToken(indexEqualToOrGreaterThan, count);
	    homing2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    forward?.IncrementToken(indexEqualToOrGreaterThan, count);
	    far?.IncrementToken(indexEqualToOrGreaterThan, count);
	    hard?.IncrementToken(indexEqualToOrGreaterThan, count);
	    hard2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    onehit?.IncrementToken(indexEqualToOrGreaterThan, count);
	    offset?.IncrementToken(indexEqualToOrGreaterThan, count);
	    offset_attr?.IncrementToken(indexEqualToOrGreaterThan, count);
	    knock?.IncrementToken(indexEqualToOrGreaterThan, count);
	    knock_speed?.IncrementToken(indexEqualToOrGreaterThan, count);
	    knock_power?.IncrementToken(indexEqualToOrGreaterThan, count);
	    range?.IncrementToken(indexEqualToOrGreaterThan, count);
	    range_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    check?.IncrementToken(indexEqualToOrGreaterThan, count);
	    speed?.IncrementToken(indexEqualToOrGreaterThan, count);
	    wave?.IncrementToken(indexEqualToOrGreaterThan, count);
	    origin?.IncrementToken(indexEqualToOrGreaterThan, count);
	    random_space?.IncrementToken(indexEqualToOrGreaterThan, count);
	    random_space_min?.IncrementToken(indexEqualToOrGreaterThan, count);
	    time?.IncrementToken(indexEqualToOrGreaterThan, count);
	    height?.IncrementToken(indexEqualToOrGreaterThan, count);
	    rush?.IncrementToken(indexEqualToOrGreaterThan, count);
	    rush_interval?.IncrementToken(indexEqualToOrGreaterThan, count);
	    rush_degree?.IncrementToken(indexEqualToOrGreaterThan, count);
	    rush_random_degree?.IncrementToken(indexEqualToOrGreaterThan, count);
	    follow?.IncrementToken(indexEqualToOrGreaterThan, count);
	    start_degree?.IncrementToken(indexEqualToOrGreaterThan, count);
	    start_degree_fix?.IncrementToken(indexEqualToOrGreaterThan, count);
	    start_degree_turnunit?.IncrementToken(indexEqualToOrGreaterThan, count);
	    start_degree_type?.IncrementToken(indexEqualToOrGreaterThan, count);
	    start_random_degree?.IncrementToken(indexEqualToOrGreaterThan, count);
	    drop_degree?.IncrementToken(indexEqualToOrGreaterThan, count);
	    drop_degree2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    joint_skill?.IncrementToken(indexEqualToOrGreaterThan, count);
	    send_target?.IncrementToken(indexEqualToOrGreaterThan, count);
	    send_image_degree?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next3?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next4?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next_order?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next_last?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next_first?.IncrementToken(indexEqualToOrGreaterThan, count);
	    next_interval?.IncrementToken(indexEqualToOrGreaterThan, count);
	    just_next?.IncrementToken(indexEqualToOrGreaterThan, count);
	    pair_next?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_type?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_sort?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_nosell?.IncrementToken(indexEqualToOrGreaterThan, count);
	    price?.IncrementToken(indexEqualToOrGreaterThan, count);
	    friend?.IncrementToken(indexEqualToOrGreaterThan, count);
	    summon_level?.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    bright?.DecrementToken(indexEqualToOrGreaterThan, count);
	    func?.DecrementToken(indexEqualToOrGreaterThan, count);
	    name?.DecrementToken(indexEqualToOrGreaterThan, count);
	    icon?.DecrementToken(indexEqualToOrGreaterThan, count);
	    fkey?.DecrementToken(indexEqualToOrGreaterThan, count);
	    sortkey?.DecrementToken(indexEqualToOrGreaterThan, count);
	    special?.DecrementToken(indexEqualToOrGreaterThan, count);
	    delay?.DecrementToken(indexEqualToOrGreaterThan, count);
	    gun_delay?.DecrementToken(indexEqualToOrGreaterThan, count);
	    quickreload?.DecrementToken(indexEqualToOrGreaterThan, count);
	    help?.DecrementToken(indexEqualToOrGreaterThan, count);
	    hide_help?.DecrementToken(indexEqualToOrGreaterThan, count);
	    sound?.DecrementToken(indexEqualToOrGreaterThan, count);
	    msg.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture.DecrementToken(indexEqualToOrGreaterThan, count);
	    cutin?.DecrementToken(indexEqualToOrGreaterThan, count);
	    value?.DecrementToken(indexEqualToOrGreaterThan, count);
	    talent?.DecrementToken(indexEqualToOrGreaterThan, count);
	    exp_per?.DecrementToken(indexEqualToOrGreaterThan, count);
	    movetype?.DecrementToken(indexEqualToOrGreaterThan, count);
	    type?.DecrementToken(indexEqualToOrGreaterThan, count);
	    color?.DecrementToken(indexEqualToOrGreaterThan, count);
	    w?.DecrementToken(indexEqualToOrGreaterThan, count);
	    h?.DecrementToken(indexEqualToOrGreaterThan, count);
	    a?.DecrementToken(indexEqualToOrGreaterThan, count);
	    mp?.DecrementToken(indexEqualToOrGreaterThan, count);
	    image?.DecrementToken(indexEqualToOrGreaterThan, count);
	    alpha_tip?.DecrementToken(indexEqualToOrGreaterThan, count);
	    alpha_butt?.DecrementToken(indexEqualToOrGreaterThan, count);
	    anime?.DecrementToken(indexEqualToOrGreaterThan, count);
	    anime_interval?.DecrementToken(indexEqualToOrGreaterThan, count);
	    center?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ground?.DecrementToken(indexEqualToOrGreaterThan, count);
	    d360?.DecrementToken(indexEqualToOrGreaterThan, count);
	    d360_adj?.DecrementToken(indexEqualToOrGreaterThan, count);
	    rotate?.DecrementToken(indexEqualToOrGreaterThan, count);
	    direct?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_interval?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_start?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_reverse?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_w?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_w_start?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_w_max?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_w_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_h_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_h_max?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_h_start?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_h?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_x?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_x_start?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_x_max?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_x_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_y_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_y_max?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_y_start?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_y?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_a?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_s?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_a_start?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_s_start?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_a_max?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_s_max?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_a_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    resize_s_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_fire?.DecrementToken(indexEqualToOrGreaterThan, count);
	    slow_per?.DecrementToken(indexEqualToOrGreaterThan, count);
	    slow_time?.DecrementToken(indexEqualToOrGreaterThan, count);
	    slide?.DecrementToken(indexEqualToOrGreaterThan, count);
	    slide_speed?.DecrementToken(indexEqualToOrGreaterThan, count);
	    slide_delay?.DecrementToken(indexEqualToOrGreaterThan, count);
	    slide_stamp?.DecrementToken(indexEqualToOrGreaterThan, count);
	    wait_time?.DecrementToken(indexEqualToOrGreaterThan, count);
	    wait_time2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    shake?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ray?.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_ray?.DecrementToken(indexEqualToOrGreaterThan, count);
	    flash?.DecrementToken(indexEqualToOrGreaterThan, count);
	    flash_anime?.DecrementToken(indexEqualToOrGreaterThan, count);
	    flash_image?.DecrementToken(indexEqualToOrGreaterThan, count);
	    collision?.DecrementToken(indexEqualToOrGreaterThan, count);
	    afterdeath?.DecrementToken(indexEqualToOrGreaterThan, count);
	    afterhit?.DecrementToken(indexEqualToOrGreaterThan, count);
	    yorozu?.DecrementToken(indexEqualToOrGreaterThan, count);
	    str?.DecrementToken(indexEqualToOrGreaterThan, count);
	    str_ratio?.DecrementToken(indexEqualToOrGreaterThan, count);
	    attr?.DecrementToken(indexEqualToOrGreaterThan, count);
	    add?.DecrementToken(indexEqualToOrGreaterThan, count);
	    add2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    add_all?.DecrementToken(indexEqualToOrGreaterThan, count);
	    add_per?.DecrementToken(indexEqualToOrGreaterThan, count);
	    damage?.DecrementToken(indexEqualToOrGreaterThan, count);
	    damage_range_adjust?.DecrementToken(indexEqualToOrGreaterThan, count);
	    attack_us?.DecrementToken(indexEqualToOrGreaterThan, count);
	    allfunc?.DecrementToken(indexEqualToOrGreaterThan, count);
	    bom?.DecrementToken(indexEqualToOrGreaterThan, count);
	    homing?.DecrementToken(indexEqualToOrGreaterThan, count);
	    homing2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    forward?.DecrementToken(indexEqualToOrGreaterThan, count);
	    far?.DecrementToken(indexEqualToOrGreaterThan, count);
	    hard?.DecrementToken(indexEqualToOrGreaterThan, count);
	    hard2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    onehit?.DecrementToken(indexEqualToOrGreaterThan, count);
	    offset?.DecrementToken(indexEqualToOrGreaterThan, count);
	    offset_attr?.DecrementToken(indexEqualToOrGreaterThan, count);
	    knock?.DecrementToken(indexEqualToOrGreaterThan, count);
	    knock_speed?.DecrementToken(indexEqualToOrGreaterThan, count);
	    knock_power?.DecrementToken(indexEqualToOrGreaterThan, count);
	    range?.DecrementToken(indexEqualToOrGreaterThan, count);
	    range_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    check?.DecrementToken(indexEqualToOrGreaterThan, count);
	    speed?.DecrementToken(indexEqualToOrGreaterThan, count);
	    wave?.DecrementToken(indexEqualToOrGreaterThan, count);
	    origin?.DecrementToken(indexEqualToOrGreaterThan, count);
	    random_space?.DecrementToken(indexEqualToOrGreaterThan, count);
	    random_space_min?.DecrementToken(indexEqualToOrGreaterThan, count);
	    time?.DecrementToken(indexEqualToOrGreaterThan, count);
	    height?.DecrementToken(indexEqualToOrGreaterThan, count);
	    rush?.DecrementToken(indexEqualToOrGreaterThan, count);
	    rush_interval?.DecrementToken(indexEqualToOrGreaterThan, count);
	    rush_degree?.DecrementToken(indexEqualToOrGreaterThan, count);
	    rush_random_degree?.DecrementToken(indexEqualToOrGreaterThan, count);
	    follow?.DecrementToken(indexEqualToOrGreaterThan, count);
	    start_degree?.DecrementToken(indexEqualToOrGreaterThan, count);
	    start_degree_fix?.DecrementToken(indexEqualToOrGreaterThan, count);
	    start_degree_turnunit?.DecrementToken(indexEqualToOrGreaterThan, count);
	    start_degree_type?.DecrementToken(indexEqualToOrGreaterThan, count);
	    start_random_degree?.DecrementToken(indexEqualToOrGreaterThan, count);
	    drop_degree?.DecrementToken(indexEqualToOrGreaterThan, count);
	    drop_degree2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    joint_skill?.DecrementToken(indexEqualToOrGreaterThan, count);
	    send_target?.DecrementToken(indexEqualToOrGreaterThan, count);
	    send_image_degree?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next3?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next4?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next_order?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next_last?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next_first?.DecrementToken(indexEqualToOrGreaterThan, count);
	    next_interval?.DecrementToken(indexEqualToOrGreaterThan, count);
	    just_next?.DecrementToken(indexEqualToOrGreaterThan, count);
	    pair_next?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_type?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_sort?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_nosell?.DecrementToken(indexEqualToOrGreaterThan, count);
	    price?.DecrementToken(indexEqualToOrGreaterThan, count);
	    friend?.DecrementToken(indexEqualToOrGreaterThan, count);
	    summon_level?.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct SkillsetNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public Pair_NullableString_NullableIntElement? name;
	public Pair_NullableString_NullableIntElement? back;
	public Pair_NullableString_NullableInt_ArrayElement? member;

    public SkillsetNode()
    {
    
	name = default;
	back = default;
	member = default;
    }

	public void Dispose()
	{
		name = default;
		back = default;
		member?.Dispose();
		member = default;
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    name?.IncrementToken(indexEqualToOrGreaterThan, count);
	    back?.IncrementToken(indexEqualToOrGreaterThan, count);
	    member?.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    name?.DecrementToken(indexEqualToOrGreaterThan, count);
	    back?.DecrementToken(indexEqualToOrGreaterThan, count);
	    member?.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct SpotNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public VariantPair<Pair_NullableString_NullableIntElement> value;
	public VariantPair<Pair_NullableString_NullableIntElement> politics;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> merce;
	public VariantPair<Pair_NullableString_NullableIntElement> name;
	public VariantPair<Pair_NullableString_NullableIntElement> image;
	public VariantPair<Pair_NullableString_NullableIntElement> x;
	public VariantPair<Pair_NullableString_NullableIntElement> y;
	public VariantPair<Pair_NullableString_NullableIntElement> w;
	public VariantPair<Pair_NullableString_NullableIntElement> h;
	public VariantPair<Pair_NullableString_NullableIntElement> big;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> color;
	public VariantPair<Pair_NullableString_NullableIntElement> map;
	public VariantPair<Pair_NullableString_NullableIntElement> castle_battle;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> yorozu;
	public VariantPair<Pair_NullableString_NullableIntElement> limit;
	public VariantPair<Pair_NullableString_NullableIntElement> bgm;
	public VariantPair<Pair_NullableString_NullableIntElement> volume;
	public VariantPair<Pair_NullableString_NullableIntElement> gain;
	public VariantPair<Pair_NullableString_NullableIntElement> castle;
	public VariantPair<Pair_NullableString_NullableIntElement> capacity;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> monster;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> member;
	public VariantPair<Pair_NullableString_NullableIntElement> dungeon;
	public VariantPair<Pair_NullableString_NullableIntElement> no_home;
	public VariantPair<Pair_NullableString_NullableIntElement> no_raise;
	public VariantPair<Pair_NullableString_NullableIntElement> castle_lot;
	public VariantPair<Pair_NullableString_NullableIntElement> text;

    public SpotNode()
    {
    
	value = new();
	politics = new();
	merce = new();
	name = new();
	image = new();
	x = new();
	y = new();
	w = new();
	h = new();
	big = new();
	color = new();
	map = new();
	castle_battle = new();
	yorozu = new();
	limit = new();
	bgm = new();
	volume = new();
	gain = new();
	castle = new();
	capacity = new();
	monster = new();
	member = new();
	dungeon = new();
	no_home = new();
	no_raise = new();
	castle_lot = new();
	text = new();
    }

	public void Dispose()
	{
		value.Dispose();
		politics.Dispose();
		merce.Dispose();
		name.Dispose();
		image.Dispose();
		x.Dispose();
		y.Dispose();
		w.Dispose();
		h.Dispose();
		big.Dispose();
		color.Dispose();
		map.Dispose();
		castle_battle.Dispose();
		yorozu.Dispose();
		limit.Dispose();
		bgm.Dispose();
		volume.Dispose();
		gain.Dispose();
		castle.Dispose();
		capacity.Dispose();
		monster.Dispose();
		member.Dispose();
		dungeon.Dispose();
		no_home.Dispose();
		no_raise.Dispose();
		castle_lot.Dispose();
		text.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    value.IncrementToken(indexEqualToOrGreaterThan, count);
	    politics.IncrementToken(indexEqualToOrGreaterThan, count);
	    merce.IncrementToken(indexEqualToOrGreaterThan, count);
	    name.IncrementToken(indexEqualToOrGreaterThan, count);
	    image.IncrementToken(indexEqualToOrGreaterThan, count);
	    x.IncrementToken(indexEqualToOrGreaterThan, count);
	    y.IncrementToken(indexEqualToOrGreaterThan, count);
	    w.IncrementToken(indexEqualToOrGreaterThan, count);
	    h.IncrementToken(indexEqualToOrGreaterThan, count);
	    big.IncrementToken(indexEqualToOrGreaterThan, count);
	    color.IncrementToken(indexEqualToOrGreaterThan, count);
	    map.IncrementToken(indexEqualToOrGreaterThan, count);
	    castle_battle.IncrementToken(indexEqualToOrGreaterThan, count);
	    yorozu.IncrementToken(indexEqualToOrGreaterThan, count);
	    limit.IncrementToken(indexEqualToOrGreaterThan, count);
	    bgm.IncrementToken(indexEqualToOrGreaterThan, count);
	    volume.IncrementToken(indexEqualToOrGreaterThan, count);
	    gain.IncrementToken(indexEqualToOrGreaterThan, count);
	    castle.IncrementToken(indexEqualToOrGreaterThan, count);
	    capacity.IncrementToken(indexEqualToOrGreaterThan, count);
	    monster.IncrementToken(indexEqualToOrGreaterThan, count);
	    member.IncrementToken(indexEqualToOrGreaterThan, count);
	    dungeon.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_home.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_raise.IncrementToken(indexEqualToOrGreaterThan, count);
	    castle_lot.IncrementToken(indexEqualToOrGreaterThan, count);
	    text.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    value.DecrementToken(indexEqualToOrGreaterThan, count);
	    politics.DecrementToken(indexEqualToOrGreaterThan, count);
	    merce.DecrementToken(indexEqualToOrGreaterThan, count);
	    name.DecrementToken(indexEqualToOrGreaterThan, count);
	    image.DecrementToken(indexEqualToOrGreaterThan, count);
	    x.DecrementToken(indexEqualToOrGreaterThan, count);
	    y.DecrementToken(indexEqualToOrGreaterThan, count);
	    w.DecrementToken(indexEqualToOrGreaterThan, count);
	    h.DecrementToken(indexEqualToOrGreaterThan, count);
	    big.DecrementToken(indexEqualToOrGreaterThan, count);
	    color.DecrementToken(indexEqualToOrGreaterThan, count);
	    map.DecrementToken(indexEqualToOrGreaterThan, count);
	    castle_battle.DecrementToken(indexEqualToOrGreaterThan, count);
	    yorozu.DecrementToken(indexEqualToOrGreaterThan, count);
	    limit.DecrementToken(indexEqualToOrGreaterThan, count);
	    bgm.DecrementToken(indexEqualToOrGreaterThan, count);
	    volume.DecrementToken(indexEqualToOrGreaterThan, count);
	    gain.DecrementToken(indexEqualToOrGreaterThan, count);
	    castle.DecrementToken(indexEqualToOrGreaterThan, count);
	    capacity.DecrementToken(indexEqualToOrGreaterThan, count);
	    monster.DecrementToken(indexEqualToOrGreaterThan, count);
	    member.DecrementToken(indexEqualToOrGreaterThan, count);
	    dungeon.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_home.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_raise.DecrementToken(indexEqualToOrGreaterThan, count);
	    castle_lot.DecrementToken(indexEqualToOrGreaterThan, count);
	    text.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct UnitNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public VariantPair<Pair_NullableString_NullableIntElement> troop_sort;
	public VariantPair<Pair_NullableString_NullableIntElement> stealth;
	public VariantPair<Pair_NullableString_NullableIntElement> free_move;
	public VariantPair<Pair_NullableString_NullableIntElement> name;
	public VariantPair<Pair_NullableString_NullableIntElement> help;
	public VariantPair<Pair_NullableString_NullableIntElement> sex;
	public VariantPair<Pair_NullableString_NullableIntElement> a;
	public VariantPair<Pair_NullableString_NullableIntElement> h;
	public VariantPair<Pair_NullableString_NullableIntElement> w;
	public VariantPair<Pair_NullableString_NullableIntElement> text;
	public VariantPair<Pair_NullableString_NullableIntElement> sub_image_even;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> yorozu;
	public VariantPair<Pair_NullableString_NullableIntElement> radius;
	public VariantPair<Pair_NullableString_NullableIntElement> radius_press;
	public VariantPair<Pair_NullableString_NullableIntElement> no_escape;
	public VariantPair<Pair_NullableString_NullableIntElement> no_regular;
	public VariantPair<Pair_NullableString_NullableIntElement> no_knock;
	public VariantPair<Pair_NullableString_NullableIntElement> no_cover;
	public VariantPair<Pair_NullableString_NullableIntElement> dead_event;
	public VariantPair<Pair_NullableString_NullableIntElement> beast_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> summon_max;
	public VariantPair<Pair_NullableString_NullableIntElement> summon_level;
	public VariantPair<Pair_NullableString_NullableIntElement> attack_range;
	public VariantPair<Pair_NullableString_NullableIntElement> escape_range;
	public VariantPair<Pair_NullableString_NullableIntElement> escape_run;
	public VariantPair<Pair_NullableString_NullableIntElement> hand_range;
	public VariantPair<Pair_NullableString_NullableIntElement> wake_range;
	public VariantPair<Pair_NullableString_NullableIntElement> view_range;
	public VariantPair<Pair_NullableString_NullableIntElement> cavalry_range;
	public VariantPair<Pair_NullableString_NullableIntElement> view_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> force_view_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> force_blind_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> satellite;
	public VariantPair<Pair_NullableString_NullableIntElement> hasexp;
	public VariantPair<Pair_NullableString_NullableIntElement> brave;
	public VariantPair<Pair_NullableString_NullableIntElement> level;
	public VariantPair<Pair_NullableString_NullableIntElement> hp;
	public VariantPair<Pair_NullableString_NullableIntElement> mp;
	public VariantPair<Pair_NullableString_NullableIntElement> attack;
	public VariantPair<Pair_NullableString_NullableIntElement> defense;
	public VariantPair<Pair_NullableString_NullableIntElement> magic;
	public VariantPair<Pair_NullableString_NullableIntElement> magdef;
	public VariantPair<Pair_NullableString_NullableIntElement> speed;
	public VariantPair<Pair_NullableString_NullableIntElement> dext;
	public VariantPair<Pair_NullableString_NullableIntElement> move;
	public VariantPair<Pair_NullableString_NullableIntElement> hprec;
	public VariantPair<Pair_NullableString_NullableIntElement> mprec;
	public VariantPair<Pair_NullableString_NullableIntElement> heal_max;
	public VariantPair<Pair_NullableString_NullableIntElement> attack_max;
	public VariantPair<Pair_NullableString_NullableIntElement> defense_max;
	public VariantPair<Pair_NullableString_NullableIntElement> magic_max;
	public VariantPair<Pair_NullableString_NullableIntElement> magdef_max;
	public VariantPair<Pair_NullableString_NullableIntElement> speed_max;
	public VariantPair<Pair_NullableString_NullableIntElement> dext_max;
	public VariantPair<Pair_NullableString_NullableIntElement> move_max;
	public VariantPair<Pair_NullableString_NullableIntElement> hprec_max;
	public VariantPair<Pair_NullableString_NullableIntElement> mprec_max;
	public VariantPair<Pair_NullableString_NullableIntElement> movetype;
	public VariantPair<Pair_NullableString_NullableIntElement> hpUp;
	public VariantPair<Pair_NullableString_NullableIntElement> mpUp;
	public VariantPair<Pair_NullableString_NullableIntElement> attackUp;
	public VariantPair<Pair_NullableString_NullableIntElement> defenseUp;
	public VariantPair<Pair_NullableString_NullableIntElement> magicUp;
	public VariantPair<Pair_NullableString_NullableIntElement> magdefUp;
	public VariantPair<Pair_NullableString_NullableIntElement> speedUp;
	public VariantPair<Pair_NullableString_NullableIntElement> dextUp;
	public VariantPair<Pair_NullableString_NullableIntElement> moveUp;
	public VariantPair<Pair_NullableString_NullableIntElement> hprecUp;
	public VariantPair<Pair_NullableString_NullableIntElement> mprecUp;
	public VariantPair<Pair_NullableString_NullableIntElement> hpMax;
	public VariantPair<Pair_NullableString_NullableIntElement> mpMax;
	public VariantPair<Pair_NullableString_NullableIntElement> attackMax;
	public VariantPair<Pair_NullableString_NullableIntElement> defenseMax;
	public VariantPair<Pair_NullableString_NullableIntElement> magicMax;
	public VariantPair<Pair_NullableString_NullableIntElement> magdefMax;
	public VariantPair<Pair_NullableString_NullableIntElement> speedMax;
	public VariantPair<Pair_NullableString_NullableIntElement> dextMax;
	public VariantPair<Pair_NullableString_NullableIntElement> moveMax;
	public VariantPair<Pair_NullableString_NullableIntElement> hprecMax;
	public VariantPair<Pair_NullableString_NullableIntElement> mprecMax;
	public VariantPair<Pair_NullableString_NullableIntElement> race;
	public VariantPair<Pair_NullableString_NullableIntElement> sortkey;
	public VariantPair<Pair_NullableString_NullableIntElement> picture;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_detail;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_menu;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_floor;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_shift;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_shift_up;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_center;
	public VariantPair<Pair_NullableString_NullableIntElement> picture_back;
	public VariantPair<Pair_NullableString_NullableIntElement> price;
	public VariantPair<Pair_NullableString_NullableIntElement> cost;
	public VariantPair<Pair_NullableString_NullableIntElement> finance;
	public VariantPair<Pair_NullableString_NullableIntElement> tkool;
	public VariantPair<Pair_NullableString_NullableIntElement> keep_form;
	public VariantPair<Pair_NullableString_NullableIntElement> breast_width;
	public VariantPair<Pair_NullableString_NullableIntElement> medical;
	public VariantPair<Pair_NullableString_NullableIntElement> active;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> activenum;
	public VariantPair<Pair_NullableString_NullableIntElement> handle;
	public VariantPair<Pair_NullableString_NullableIntElement> red;
	public VariantPair<Pair_NullableString_NullableIntElement> rank_text;
	public VariantPair<Pair_NullableString_NullableIntElement> no_training;
	public VariantPair<Pair_NullableString_NullableIntElement> force_voice;
	public VariantPair<Pair_NullableString_NullableIntElement> face;
	public VariantPair<Pair_NullableString_NullableIntElement> same_friend;
	public VariantPair<Pair_NullableString_NullableIntElement> same_call;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> member;
	public VariantPair<Pair_NullableString_NullableIntElement> level_max;
	public VariantPair<Pair_NullableString_NullableIntElement> exp;
	public VariantPair<Pair_NullableString_NullableIntElement> exp_mul;
	public VariantPair<Pair_NullableString_NullableIntElement> exp_max;
	public VariantPair<Pair_NullableString_NullableIntElement> line;
	public VariantPair<Pair_NullableString_NullableIntElement> image;
	public VariantPair<Pair_NullableString_NullableIntElement> sub_image;
	public VariantPair<Pair_NullableString_NullableIntElement> politics;
	public VariantPair<Pair_NullableString_NullableIntElement> element_lost;
	public VariantPair<Pair_NullableString_NullableIntElement> fkey;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> friend;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> merce;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> consti;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> multi;
	public VariantPair<Pair_NullableString_NullableIntElement> lost_corpse;
	public VariantPair<Pair_NullableString_NullableIntElement> add_vassal;
	public VariantPair<Pair_NullableString_NullableIntElement> value;
	public VariantPair<Pair_NullableString_NullableIntElement> @break;
	public VariantPair<Pair_NullableString_NullableIntElement> scream;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> skill;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> skill2;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> learn;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> delskill;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> delskill2;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> item;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> leader_skill;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> assist_skill;
	public VariantPair<Pair_NullableString_NullableIntElement> talent;
	public VariantPair<Pair_NullableString_NullableIntElement> @class;
	public VariantPair<Pair_NullableString_NullableIntElement> bgm;
	public VariantPair<Pair_NullableString_NullableIntElement> volume;
	public VariantPair<Pair_NullableString_NullableIntElement> alive_per;
	public VariantPair<Pair_NullableString_NullableIntElement> yabo;
	public VariantPair<Pair_NullableString_NullableIntElement> kosen;
	public VariantPair<Pair_NullableString_NullableIntElement> align;
	public VariantPair<Pair_NullableString_NullableIntElement> loyal;
	public VariantPair<Pair_NullableString_NullableIntElement> power_name;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> enemy;
	public VariantPair<Pair_NullableString_NullableIntElement> flag;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> staff;
	public VariantPair<Pair_NullableString_NullableIntElement> diplomacy;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> castle_guard;
	public VariantPair<Pair_NullableString_NullableIntElement> actor;
	public VariantPair<Pair_NullableString_NullableIntElement> enable;
	public VariantPair<Pair_NullableString_NullableIntElement> enable_select;
	public VariantPair<Pair_NullableString_NullableIntElement> enable_max;
	public VariantPair<Pair_NullableString_NullableIntElement> fix;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> home;
	public VariantPair<Pair_NullableString_NullableIntElement> noremove_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> noemploy_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> noitem_unit;
	public VariantPair<Pair_NullableString_NullableIntElement> arbeit;
	public VariantPair<Pair_NullableString_NullableIntElement> arbeit_capacity;
	public VariantPair<Pair_NullableString_NullableIntElement> join;
	public VariantPair<Pair_NullableString_NullableIntElement> dead;
	public VariantPair<Pair_NullableString_NullableIntElement> retreat;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> voice_type;

    public UnitNode()
    {
    
	troop_sort = new();
	stealth = new();
	free_move = new();
	name = new();
	help = new();
	sex = new();
	a = new();
	h = new();
	w = new();
	text = new();
	sub_image_even = new();
	yorozu = new();
	radius = new();
	radius_press = new();
	no_escape = new();
	no_regular = new();
	no_knock = new();
	no_cover = new();
	dead_event = new();
	beast_unit = new();
	summon_max = new();
	summon_level = new();
	attack_range = new();
	escape_range = new();
	escape_run = new();
	hand_range = new();
	wake_range = new();
	view_range = new();
	cavalry_range = new();
	view_unit = new();
	force_view_unit = new();
	force_blind_unit = new();
	satellite = new();
	hasexp = new();
	brave = new();
	level = new();
	hp = new();
	mp = new();
	attack = new();
	defense = new();
	magic = new();
	magdef = new();
	speed = new();
	dext = new();
	move = new();
	hprec = new();
	mprec = new();
	heal_max = new();
	attack_max = new();
	defense_max = new();
	magic_max = new();
	magdef_max = new();
	speed_max = new();
	dext_max = new();
	move_max = new();
	hprec_max = new();
	mprec_max = new();
	movetype = new();
	hpUp = new();
	mpUp = new();
	attackUp = new();
	defenseUp = new();
	magicUp = new();
	magdefUp = new();
	speedUp = new();
	dextUp = new();
	moveUp = new();
	hprecUp = new();
	mprecUp = new();
	hpMax = new();
	mpMax = new();
	attackMax = new();
	defenseMax = new();
	magicMax = new();
	magdefMax = new();
	speedMax = new();
	dextMax = new();
	moveMax = new();
	hprecMax = new();
	mprecMax = new();
	race = new();
	sortkey = new();
	picture = new();
	picture_detail = new();
	picture_menu = new();
	picture_floor = new();
	picture_shift = new();
	picture_shift_up = new();
	picture_center = new();
	picture_back = new();
	price = new();
	cost = new();
	finance = new();
	tkool = new();
	keep_form = new();
	breast_width = new();
	medical = new();
	active = new();
	activenum = new();
	handle = new();
	red = new();
	rank_text = new();
	no_training = new();
	force_voice = new();
	face = new();
	same_friend = new();
	same_call = new();
	member = new();
	level_max = new();
	exp = new();
	exp_mul = new();
	exp_max = new();
	line = new();
	image = new();
	sub_image = new();
	politics = new();
	element_lost = new();
	fkey = new();
	friend = new();
	merce = new();
	consti = new();
	multi = new();
	lost_corpse = new();
	add_vassal = new();
	value = new();
	@break = new();
	scream = new();
	skill = new();
	skill2 = new();
	learn = new();
	delskill = new();
	delskill2 = new();
	item = new();
	leader_skill = new();
	assist_skill = new();
	talent = new();
	@class = new();
	bgm = new();
	volume = new();
	alive_per = new();
	yabo = new();
	kosen = new();
	align = new();
	loyal = new();
	power_name = new();
	enemy = new();
	flag = new();
	staff = new();
	diplomacy = new();
	castle_guard = new();
	actor = new();
	enable = new();
	enable_select = new();
	enable_max = new();
	fix = new();
	home = new();
	noremove_unit = new();
	noemploy_unit = new();
	noitem_unit = new();
	arbeit = new();
	arbeit_capacity = new();
	join = new();
	dead = new();
	retreat = new();
	voice_type = new();
    }

	public void Dispose()
	{
		troop_sort.Dispose();
		stealth.Dispose();
		free_move.Dispose();
		name.Dispose();
		help.Dispose();
		sex.Dispose();
		a.Dispose();
		h.Dispose();
		w.Dispose();
		text.Dispose();
		sub_image_even.Dispose();
		yorozu.Dispose();
		radius.Dispose();
		radius_press.Dispose();
		no_escape.Dispose();
		no_regular.Dispose();
		no_knock.Dispose();
		no_cover.Dispose();
		dead_event.Dispose();
		beast_unit.Dispose();
		summon_max.Dispose();
		summon_level.Dispose();
		attack_range.Dispose();
		escape_range.Dispose();
		escape_run.Dispose();
		hand_range.Dispose();
		wake_range.Dispose();
		view_range.Dispose();
		cavalry_range.Dispose();
		view_unit.Dispose();
		force_view_unit.Dispose();
		force_blind_unit.Dispose();
		satellite.Dispose();
		hasexp.Dispose();
		brave.Dispose();
		level.Dispose();
		hp.Dispose();
		mp.Dispose();
		attack.Dispose();
		defense.Dispose();
		magic.Dispose();
		magdef.Dispose();
		speed.Dispose();
		dext.Dispose();
		move.Dispose();
		hprec.Dispose();
		mprec.Dispose();
		heal_max.Dispose();
		attack_max.Dispose();
		defense_max.Dispose();
		magic_max.Dispose();
		magdef_max.Dispose();
		speed_max.Dispose();
		dext_max.Dispose();
		move_max.Dispose();
		hprec_max.Dispose();
		mprec_max.Dispose();
		movetype.Dispose();
		hpUp.Dispose();
		mpUp.Dispose();
		attackUp.Dispose();
		defenseUp.Dispose();
		magicUp.Dispose();
		magdefUp.Dispose();
		speedUp.Dispose();
		dextUp.Dispose();
		moveUp.Dispose();
		hprecUp.Dispose();
		mprecUp.Dispose();
		hpMax.Dispose();
		mpMax.Dispose();
		attackMax.Dispose();
		defenseMax.Dispose();
		magicMax.Dispose();
		magdefMax.Dispose();
		speedMax.Dispose();
		dextMax.Dispose();
		moveMax.Dispose();
		hprecMax.Dispose();
		mprecMax.Dispose();
		race.Dispose();
		sortkey.Dispose();
		picture.Dispose();
		picture_detail.Dispose();
		picture_menu.Dispose();
		picture_floor.Dispose();
		picture_shift.Dispose();
		picture_shift_up.Dispose();
		picture_center.Dispose();
		picture_back.Dispose();
		price.Dispose();
		cost.Dispose();
		finance.Dispose();
		tkool.Dispose();
		keep_form.Dispose();
		breast_width.Dispose();
		medical.Dispose();
		active.Dispose();
		activenum.Dispose();
		handle.Dispose();
		red.Dispose();
		rank_text.Dispose();
		no_training.Dispose();
		force_voice.Dispose();
		face.Dispose();
		same_friend.Dispose();
		same_call.Dispose();
		member.Dispose();
		level_max.Dispose();
		exp.Dispose();
		exp_mul.Dispose();
		exp_max.Dispose();
		line.Dispose();
		image.Dispose();
		sub_image.Dispose();
		politics.Dispose();
		element_lost.Dispose();
		fkey.Dispose();
		friend.Dispose();
		merce.Dispose();
		consti.Dispose();
		multi.Dispose();
		lost_corpse.Dispose();
		add_vassal.Dispose();
		value.Dispose();
		@break.Dispose();
		scream.Dispose();
		skill.Dispose();
		skill2.Dispose();
		learn.Dispose();
		delskill.Dispose();
		delskill2.Dispose();
		item.Dispose();
		leader_skill.Dispose();
		assist_skill.Dispose();
		talent.Dispose();
		@class.Dispose();
		bgm.Dispose();
		volume.Dispose();
		alive_per.Dispose();
		yabo.Dispose();
		kosen.Dispose();
		align.Dispose();
		loyal.Dispose();
		power_name.Dispose();
		enemy.Dispose();
		flag.Dispose();
		staff.Dispose();
		diplomacy.Dispose();
		castle_guard.Dispose();
		actor.Dispose();
		enable.Dispose();
		enable_select.Dispose();
		enable_max.Dispose();
		fix.Dispose();
		home.Dispose();
		noremove_unit.Dispose();
		noemploy_unit.Dispose();
		noitem_unit.Dispose();
		arbeit.Dispose();
		arbeit_capacity.Dispose();
		join.Dispose();
		dead.Dispose();
		retreat.Dispose();
		voice_type.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    troop_sort.IncrementToken(indexEqualToOrGreaterThan, count);
	    stealth.IncrementToken(indexEqualToOrGreaterThan, count);
	    free_move.IncrementToken(indexEqualToOrGreaterThan, count);
	    name.IncrementToken(indexEqualToOrGreaterThan, count);
	    help.IncrementToken(indexEqualToOrGreaterThan, count);
	    sex.IncrementToken(indexEqualToOrGreaterThan, count);
	    a.IncrementToken(indexEqualToOrGreaterThan, count);
	    h.IncrementToken(indexEqualToOrGreaterThan, count);
	    w.IncrementToken(indexEqualToOrGreaterThan, count);
	    text.IncrementToken(indexEqualToOrGreaterThan, count);
	    sub_image_even.IncrementToken(indexEqualToOrGreaterThan, count);
	    yorozu.IncrementToken(indexEqualToOrGreaterThan, count);
	    radius.IncrementToken(indexEqualToOrGreaterThan, count);
	    radius_press.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_escape.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_regular.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_knock.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_cover.IncrementToken(indexEqualToOrGreaterThan, count);
	    dead_event.IncrementToken(indexEqualToOrGreaterThan, count);
	    beast_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    summon_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    summon_level.IncrementToken(indexEqualToOrGreaterThan, count);
	    attack_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    escape_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    escape_run.IncrementToken(indexEqualToOrGreaterThan, count);
	    hand_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    wake_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    view_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    cavalry_range.IncrementToken(indexEqualToOrGreaterThan, count);
	    view_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_view_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_blind_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    satellite.IncrementToken(indexEqualToOrGreaterThan, count);
	    hasexp.IncrementToken(indexEqualToOrGreaterThan, count);
	    brave.IncrementToken(indexEqualToOrGreaterThan, count);
	    level.IncrementToken(indexEqualToOrGreaterThan, count);
	    hp.IncrementToken(indexEqualToOrGreaterThan, count);
	    mp.IncrementToken(indexEqualToOrGreaterThan, count);
	    attack.IncrementToken(indexEqualToOrGreaterThan, count);
	    defense.IncrementToken(indexEqualToOrGreaterThan, count);
	    magic.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdef.IncrementToken(indexEqualToOrGreaterThan, count);
	    speed.IncrementToken(indexEqualToOrGreaterThan, count);
	    dext.IncrementToken(indexEqualToOrGreaterThan, count);
	    move.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprec.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprec.IncrementToken(indexEqualToOrGreaterThan, count);
	    heal_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    attack_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    defense_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    magic_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdef_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    speed_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    dext_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    move_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprec_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprec_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    movetype.IncrementToken(indexEqualToOrGreaterThan, count);
	    hpUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    mpUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    attackUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    defenseUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    magicUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdefUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    speedUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    dextUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    moveUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprecUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprecUp.IncrementToken(indexEqualToOrGreaterThan, count);
	    hpMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    mpMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    attackMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    defenseMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    magicMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    magdefMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    speedMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    dextMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    moveMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    hprecMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    mprecMax.IncrementToken(indexEqualToOrGreaterThan, count);
	    race.IncrementToken(indexEqualToOrGreaterThan, count);
	    sortkey.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_detail.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_menu.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_floor.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift_up.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_center.IncrementToken(indexEqualToOrGreaterThan, count);
	    picture_back.IncrementToken(indexEqualToOrGreaterThan, count);
	    price.IncrementToken(indexEqualToOrGreaterThan, count);
	    cost.IncrementToken(indexEqualToOrGreaterThan, count);
	    finance.IncrementToken(indexEqualToOrGreaterThan, count);
	    tkool.IncrementToken(indexEqualToOrGreaterThan, count);
	    keep_form.IncrementToken(indexEqualToOrGreaterThan, count);
	    breast_width.IncrementToken(indexEqualToOrGreaterThan, count);
	    medical.IncrementToken(indexEqualToOrGreaterThan, count);
	    active.IncrementToken(indexEqualToOrGreaterThan, count);
	    activenum.IncrementToken(indexEqualToOrGreaterThan, count);
	    handle.IncrementToken(indexEqualToOrGreaterThan, count);
	    red.IncrementToken(indexEqualToOrGreaterThan, count);
	    rank_text.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_training.IncrementToken(indexEqualToOrGreaterThan, count);
	    force_voice.IncrementToken(indexEqualToOrGreaterThan, count);
	    face.IncrementToken(indexEqualToOrGreaterThan, count);
	    same_friend.IncrementToken(indexEqualToOrGreaterThan, count);
	    same_call.IncrementToken(indexEqualToOrGreaterThan, count);
	    member.IncrementToken(indexEqualToOrGreaterThan, count);
	    level_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    exp.IncrementToken(indexEqualToOrGreaterThan, count);
	    exp_mul.IncrementToken(indexEqualToOrGreaterThan, count);
	    exp_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    line.IncrementToken(indexEqualToOrGreaterThan, count);
	    image.IncrementToken(indexEqualToOrGreaterThan, count);
	    sub_image.IncrementToken(indexEqualToOrGreaterThan, count);
	    politics.IncrementToken(indexEqualToOrGreaterThan, count);
	    element_lost.IncrementToken(indexEqualToOrGreaterThan, count);
	    fkey.IncrementToken(indexEqualToOrGreaterThan, count);
	    friend.IncrementToken(indexEqualToOrGreaterThan, count);
	    merce.IncrementToken(indexEqualToOrGreaterThan, count);
	    consti.IncrementToken(indexEqualToOrGreaterThan, count);
	    multi.IncrementToken(indexEqualToOrGreaterThan, count);
	    lost_corpse.IncrementToken(indexEqualToOrGreaterThan, count);
	    add_vassal.IncrementToken(indexEqualToOrGreaterThan, count);
	    value.IncrementToken(indexEqualToOrGreaterThan, count);
	    @break.IncrementToken(indexEqualToOrGreaterThan, count);
	    scream.IncrementToken(indexEqualToOrGreaterThan, count);
	    skill.IncrementToken(indexEqualToOrGreaterThan, count);
	    skill2.IncrementToken(indexEqualToOrGreaterThan, count);
	    learn.IncrementToken(indexEqualToOrGreaterThan, count);
	    delskill.IncrementToken(indexEqualToOrGreaterThan, count);
	    delskill2.IncrementToken(indexEqualToOrGreaterThan, count);
	    item.IncrementToken(indexEqualToOrGreaterThan, count);
	    leader_skill.IncrementToken(indexEqualToOrGreaterThan, count);
	    assist_skill.IncrementToken(indexEqualToOrGreaterThan, count);
	    talent.IncrementToken(indexEqualToOrGreaterThan, count);
	    @class.IncrementToken(indexEqualToOrGreaterThan, count);
	    bgm.IncrementToken(indexEqualToOrGreaterThan, count);
	    volume.IncrementToken(indexEqualToOrGreaterThan, count);
	    alive_per.IncrementToken(indexEqualToOrGreaterThan, count);
	    yabo.IncrementToken(indexEqualToOrGreaterThan, count);
	    kosen.IncrementToken(indexEqualToOrGreaterThan, count);
	    align.IncrementToken(indexEqualToOrGreaterThan, count);
	    loyal.IncrementToken(indexEqualToOrGreaterThan, count);
	    power_name.IncrementToken(indexEqualToOrGreaterThan, count);
	    enemy.IncrementToken(indexEqualToOrGreaterThan, count);
	    flag.IncrementToken(indexEqualToOrGreaterThan, count);
	    staff.IncrementToken(indexEqualToOrGreaterThan, count);
	    diplomacy.IncrementToken(indexEqualToOrGreaterThan, count);
	    castle_guard.IncrementToken(indexEqualToOrGreaterThan, count);
	    actor.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable_select.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable_max.IncrementToken(indexEqualToOrGreaterThan, count);
	    fix.IncrementToken(indexEqualToOrGreaterThan, count);
	    home.IncrementToken(indexEqualToOrGreaterThan, count);
	    noremove_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    noemploy_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    noitem_unit.IncrementToken(indexEqualToOrGreaterThan, count);
	    arbeit.IncrementToken(indexEqualToOrGreaterThan, count);
	    arbeit_capacity.IncrementToken(indexEqualToOrGreaterThan, count);
	    join.IncrementToken(indexEqualToOrGreaterThan, count);
	    dead.IncrementToken(indexEqualToOrGreaterThan, count);
	    retreat.IncrementToken(indexEqualToOrGreaterThan, count);
	    voice_type.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    troop_sort.DecrementToken(indexEqualToOrGreaterThan, count);
	    stealth.DecrementToken(indexEqualToOrGreaterThan, count);
	    free_move.DecrementToken(indexEqualToOrGreaterThan, count);
	    name.DecrementToken(indexEqualToOrGreaterThan, count);
	    help.DecrementToken(indexEqualToOrGreaterThan, count);
	    sex.DecrementToken(indexEqualToOrGreaterThan, count);
	    a.DecrementToken(indexEqualToOrGreaterThan, count);
	    h.DecrementToken(indexEqualToOrGreaterThan, count);
	    w.DecrementToken(indexEqualToOrGreaterThan, count);
	    text.DecrementToken(indexEqualToOrGreaterThan, count);
	    sub_image_even.DecrementToken(indexEqualToOrGreaterThan, count);
	    yorozu.DecrementToken(indexEqualToOrGreaterThan, count);
	    radius.DecrementToken(indexEqualToOrGreaterThan, count);
	    radius_press.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_escape.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_regular.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_knock.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_cover.DecrementToken(indexEqualToOrGreaterThan, count);
	    dead_event.DecrementToken(indexEqualToOrGreaterThan, count);
	    beast_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    summon_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    summon_level.DecrementToken(indexEqualToOrGreaterThan, count);
	    attack_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    escape_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    escape_run.DecrementToken(indexEqualToOrGreaterThan, count);
	    hand_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    wake_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    view_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    cavalry_range.DecrementToken(indexEqualToOrGreaterThan, count);
	    view_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_view_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_blind_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    satellite.DecrementToken(indexEqualToOrGreaterThan, count);
	    hasexp.DecrementToken(indexEqualToOrGreaterThan, count);
	    brave.DecrementToken(indexEqualToOrGreaterThan, count);
	    level.DecrementToken(indexEqualToOrGreaterThan, count);
	    hp.DecrementToken(indexEqualToOrGreaterThan, count);
	    mp.DecrementToken(indexEqualToOrGreaterThan, count);
	    attack.DecrementToken(indexEqualToOrGreaterThan, count);
	    defense.DecrementToken(indexEqualToOrGreaterThan, count);
	    magic.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdef.DecrementToken(indexEqualToOrGreaterThan, count);
	    speed.DecrementToken(indexEqualToOrGreaterThan, count);
	    dext.DecrementToken(indexEqualToOrGreaterThan, count);
	    move.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprec.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprec.DecrementToken(indexEqualToOrGreaterThan, count);
	    heal_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    attack_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    defense_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    magic_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdef_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    speed_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    dext_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    move_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprec_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprec_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    movetype.DecrementToken(indexEqualToOrGreaterThan, count);
	    hpUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    mpUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    attackUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    defenseUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    magicUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdefUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    speedUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    dextUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    moveUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprecUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprecUp.DecrementToken(indexEqualToOrGreaterThan, count);
	    hpMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    mpMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    attackMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    defenseMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    magicMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    magdefMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    speedMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    dextMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    moveMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    hprecMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    mprecMax.DecrementToken(indexEqualToOrGreaterThan, count);
	    race.DecrementToken(indexEqualToOrGreaterThan, count);
	    sortkey.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_detail.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_menu.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_floor.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_shift_up.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_center.DecrementToken(indexEqualToOrGreaterThan, count);
	    picture_back.DecrementToken(indexEqualToOrGreaterThan, count);
	    price.DecrementToken(indexEqualToOrGreaterThan, count);
	    cost.DecrementToken(indexEqualToOrGreaterThan, count);
	    finance.DecrementToken(indexEqualToOrGreaterThan, count);
	    tkool.DecrementToken(indexEqualToOrGreaterThan, count);
	    keep_form.DecrementToken(indexEqualToOrGreaterThan, count);
	    breast_width.DecrementToken(indexEqualToOrGreaterThan, count);
	    medical.DecrementToken(indexEqualToOrGreaterThan, count);
	    active.DecrementToken(indexEqualToOrGreaterThan, count);
	    activenum.DecrementToken(indexEqualToOrGreaterThan, count);
	    handle.DecrementToken(indexEqualToOrGreaterThan, count);
	    red.DecrementToken(indexEqualToOrGreaterThan, count);
	    rank_text.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_training.DecrementToken(indexEqualToOrGreaterThan, count);
	    force_voice.DecrementToken(indexEqualToOrGreaterThan, count);
	    face.DecrementToken(indexEqualToOrGreaterThan, count);
	    same_friend.DecrementToken(indexEqualToOrGreaterThan, count);
	    same_call.DecrementToken(indexEqualToOrGreaterThan, count);
	    member.DecrementToken(indexEqualToOrGreaterThan, count);
	    level_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    exp.DecrementToken(indexEqualToOrGreaterThan, count);
	    exp_mul.DecrementToken(indexEqualToOrGreaterThan, count);
	    exp_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    line.DecrementToken(indexEqualToOrGreaterThan, count);
	    image.DecrementToken(indexEqualToOrGreaterThan, count);
	    sub_image.DecrementToken(indexEqualToOrGreaterThan, count);
	    politics.DecrementToken(indexEqualToOrGreaterThan, count);
	    element_lost.DecrementToken(indexEqualToOrGreaterThan, count);
	    fkey.DecrementToken(indexEqualToOrGreaterThan, count);
	    friend.DecrementToken(indexEqualToOrGreaterThan, count);
	    merce.DecrementToken(indexEqualToOrGreaterThan, count);
	    consti.DecrementToken(indexEqualToOrGreaterThan, count);
	    multi.DecrementToken(indexEqualToOrGreaterThan, count);
	    lost_corpse.DecrementToken(indexEqualToOrGreaterThan, count);
	    add_vassal.DecrementToken(indexEqualToOrGreaterThan, count);
	    value.DecrementToken(indexEqualToOrGreaterThan, count);
	    @break.DecrementToken(indexEqualToOrGreaterThan, count);
	    scream.DecrementToken(indexEqualToOrGreaterThan, count);
	    skill.DecrementToken(indexEqualToOrGreaterThan, count);
	    skill2.DecrementToken(indexEqualToOrGreaterThan, count);
	    learn.DecrementToken(indexEqualToOrGreaterThan, count);
	    delskill.DecrementToken(indexEqualToOrGreaterThan, count);
	    delskill2.DecrementToken(indexEqualToOrGreaterThan, count);
	    item.DecrementToken(indexEqualToOrGreaterThan, count);
	    leader_skill.DecrementToken(indexEqualToOrGreaterThan, count);
	    assist_skill.DecrementToken(indexEqualToOrGreaterThan, count);
	    talent.DecrementToken(indexEqualToOrGreaterThan, count);
	    @class.DecrementToken(indexEqualToOrGreaterThan, count);
	    bgm.DecrementToken(indexEqualToOrGreaterThan, count);
	    volume.DecrementToken(indexEqualToOrGreaterThan, count);
	    alive_per.DecrementToken(indexEqualToOrGreaterThan, count);
	    yabo.DecrementToken(indexEqualToOrGreaterThan, count);
	    kosen.DecrementToken(indexEqualToOrGreaterThan, count);
	    align.DecrementToken(indexEqualToOrGreaterThan, count);
	    loyal.DecrementToken(indexEqualToOrGreaterThan, count);
	    power_name.DecrementToken(indexEqualToOrGreaterThan, count);
	    enemy.DecrementToken(indexEqualToOrGreaterThan, count);
	    flag.DecrementToken(indexEqualToOrGreaterThan, count);
	    staff.DecrementToken(indexEqualToOrGreaterThan, count);
	    diplomacy.DecrementToken(indexEqualToOrGreaterThan, count);
	    castle_guard.DecrementToken(indexEqualToOrGreaterThan, count);
	    actor.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable_select.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable_max.DecrementToken(indexEqualToOrGreaterThan, count);
	    fix.DecrementToken(indexEqualToOrGreaterThan, count);
	    home.DecrementToken(indexEqualToOrGreaterThan, count);
	    noremove_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    noemploy_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    noitem_unit.DecrementToken(indexEqualToOrGreaterThan, count);
	    arbeit.DecrementToken(indexEqualToOrGreaterThan, count);
	    arbeit_capacity.DecrementToken(indexEqualToOrGreaterThan, count);
	    join.DecrementToken(indexEqualToOrGreaterThan, count);
	    dead.DecrementToken(indexEqualToOrGreaterThan, count);
	    retreat.DecrementToken(indexEqualToOrGreaterThan, count);
	    voice_type.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct VoiceNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> voice_type;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> delskill;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> spot;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> roam;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> power;

    public VoiceNode()
    {
    
	voice_type = new();
	delskill = new();
	spot = new();
	roam = new();
	power = new();
    }

	public void Dispose()
	{
		voice_type.Dispose();
		delskill.Dispose();
		spot.Dispose();
		roam.Dispose();
		power.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

	    voice_type.IncrementToken(indexEqualToOrGreaterThan, count);
	    delskill.IncrementToken(indexEqualToOrGreaterThan, count);
	    spot.IncrementToken(indexEqualToOrGreaterThan, count);
	    roam.IncrementToken(indexEqualToOrGreaterThan, count);
	    power.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

	    voice_type.DecrementToken(indexEqualToOrGreaterThan, count);
	    delskill.DecrementToken(indexEqualToOrGreaterThan, count);
	    spot.DecrementToken(indexEqualToOrGreaterThan, count);
	    roam.DecrementToken(indexEqualToOrGreaterThan, count);
	    power.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct ScenarioNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

    public ArrayPoolList<IStatement> Statements;
	public Pair_NullableString_NullableIntElement? ws_red;
	public Pair_NullableString_NullableIntElement? ws_blue;
	public Pair_NullableString_NullableIntElement? ws_green;
	public Pair_NullableString_NullableIntElement? ws_alpha;
	public Pair_NullableString_NullableIntElement? ws_light;
	public Pair_NullableString_NullableIntElement? ws_light_range;
	public Pair_NullableString_NullableIntElement? discus;
	public Pair_NullableString_NullableIntElement? save_name;
	public Pair_NullableString_NullableIntElement? enable_select;
	public Pair_NullableString_NullableIntElement? max_unit;
	public Pair_NullableString_NullableIntElement? blind;
	public Pair_NullableString_NullableIntElement? name;
	public Pair_NullableString_NullableIntElement? map;
	public Pair_NullableString_NullableIntElement? help;
	public Pair_NullableString_NullableIntElement? locate_x;
	public Pair_NullableString_NullableIntElement? locate_y;
	public Pair_NullableString_NullableIntElement? begin_text;
	public Pair_NullableString_NullableIntElement? world;
	public Pair_NullableString_NullableIntElement? fight;
	public Pair_NullableString_NullableIntElement? politics;
	public Pair_NullableString_NullableIntElement? war_capacity;
	public Pair_NullableString_NullableIntElement? spot_capacity;
	public Pair_NullableString_NullableIntElement? gain_per;
	public Pair_NullableString_NullableIntElement? support_range;
	public Pair_NullableString_NullableIntElement? my_range;
	public Pair_NullableString_NullableIntElement? myhelp_range;
	public Pair_NullableString_NullableIntElement? base_level;
	public Pair_NullableString_NullableIntElement? monster_level;
	public Pair_NullableString_NullableIntElement? training_up;
	public Pair_NullableString_NullableIntElement? actor_per;
	public Pair_NullableString_NullableIntElement? sortkey;
	public Pair_NullableString_NullableIntElement? default_ending;
	public Pair_NullableString_NullableIntElement? power_order;
	public Pair_NullableString_NullableIntElement? enable;
	public Pair_NullableString_NullableIntElement? enable_talent;
	public Pair_NullableString_NullableIntElement? party;
	public Pair_NullableString_NullableIntElement? no_autosave;
	public Pair_NullableString_NullableIntElement? zone;
	public Pair_NullableString_NullableIntElement? nozone;
	public Pair_NullableString_NullableIntElement? item0;
	public Pair_NullableString_NullableIntElement? item1;
	public Pair_NullableString_NullableIntElement? item2;
	public Pair_NullableString_NullableIntElement? item3;
	public Pair_NullableString_NullableIntElement? item4;
	public Pair_NullableString_NullableIntElement? item5;
	public Pair_NullableString_NullableIntElement? item6;
	public Pair_NullableString_NullableIntElement? item_limit;
	public Pair_NullableString_NullableInt_ArrayElement? poli;
	public Pair_NullableString_NullableInt_ArrayElement? camp;
	public Pair_NullableString_NullableInt_ArrayElement? multi;
	public Pair_NullableString_NullableInt_ArrayElement? item;
	public Pair_NullableString_NullableInt_ArrayElement? item_sale;
	public Pair_NullableString_NullableInt_ArrayElement? item_hold;
	public Pair_NullableString_NullableIntElement? text;
	public Pair_NullableString_NullableInt_ArrayElement? roam;
	public Pair_NullableString_NullableInt_ArrayElement? spot;
	public Pair_NullableString_NullableInt_ArrayElement? power;
	public Pair_NullableString_NullableInt_ArrayElement? offset;

    public ScenarioNode()
    {
        Statements = new();
    
	ws_red = default;
	ws_blue = default;
	ws_green = default;
	ws_alpha = default;
	ws_light = default;
	ws_light_range = default;
	discus = default;
	save_name = default;
	enable_select = default;
	max_unit = default;
	blind = default;
	name = default;
	map = default;
	help = default;
	locate_x = default;
	locate_y = default;
	begin_text = default;
	world = default;
	fight = default;
	politics = default;
	war_capacity = default;
	spot_capacity = default;
	gain_per = default;
	support_range = default;
	my_range = default;
	myhelp_range = default;
	base_level = default;
	monster_level = default;
	training_up = default;
	actor_per = default;
	sortkey = default;
	default_ending = default;
	power_order = default;
	enable = default;
	enable_talent = default;
	party = default;
	no_autosave = default;
	zone = default;
	nozone = default;
	item0 = default;
	item1 = default;
	item2 = default;
	item3 = default;
	item4 = default;
	item5 = default;
	item6 = default;
	item_limit = default;
	poli = default;
	camp = default;
	multi = default;
	item = default;
	item_sale = default;
	item_hold = default;
	text = default;
	roam = default;
	spot = default;
	power = default;
	offset = default;
    }

	public void Dispose()
	{
		Statements.Dispose();
		ws_red = default;
		ws_blue = default;
		ws_green = default;
		ws_alpha = default;
		ws_light = default;
		ws_light_range = default;
		discus = default;
		save_name = default;
		enable_select = default;
		max_unit = default;
		blind = default;
		name = default;
		map = default;
		help = default;
		locate_x = default;
		locate_y = default;
		begin_text = default;
		world = default;
		fight = default;
		politics = default;
		war_capacity = default;
		spot_capacity = default;
		gain_per = default;
		support_range = default;
		my_range = default;
		myhelp_range = default;
		base_level = default;
		monster_level = default;
		training_up = default;
		actor_per = default;
		sortkey = default;
		default_ending = default;
		power_order = default;
		enable = default;
		enable_talent = default;
		party = default;
		no_autosave = default;
		zone = default;
		nozone = default;
		item0 = default;
		item1 = default;
		item2 = default;
		item3 = default;
		item4 = default;
		item5 = default;
		item6 = default;
		item_limit = default;
		poli?.Dispose();
		poli = default;
		camp?.Dispose();
		camp = default;
		multi?.Dispose();
		multi = default;
		item?.Dispose();
		item = default;
		item_sale?.Dispose();
		item_sale = default;
		item_hold?.Dispose();
		item_hold = default;
		text = default;
		roam?.Dispose();
		roam = default;
		spot?.Dispose();
		spot = default;
		power?.Dispose();
		power = default;
		offset?.Dispose();
		offset = default;
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

        foreach (ref var statement in Statements.AsSpan())
        {
            statement.IncrementToken(indexEqualToOrGreaterThan, count);
        }

	    ws_red?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ws_blue?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ws_green?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ws_alpha?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ws_light?.IncrementToken(indexEqualToOrGreaterThan, count);
	    ws_light_range?.IncrementToken(indexEqualToOrGreaterThan, count);
	    discus?.IncrementToken(indexEqualToOrGreaterThan, count);
	    save_name?.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable_select?.IncrementToken(indexEqualToOrGreaterThan, count);
	    max_unit?.IncrementToken(indexEqualToOrGreaterThan, count);
	    blind?.IncrementToken(indexEqualToOrGreaterThan, count);
	    name?.IncrementToken(indexEqualToOrGreaterThan, count);
	    map?.IncrementToken(indexEqualToOrGreaterThan, count);
	    help?.IncrementToken(indexEqualToOrGreaterThan, count);
	    locate_x?.IncrementToken(indexEqualToOrGreaterThan, count);
	    locate_y?.IncrementToken(indexEqualToOrGreaterThan, count);
	    begin_text?.IncrementToken(indexEqualToOrGreaterThan, count);
	    world?.IncrementToken(indexEqualToOrGreaterThan, count);
	    fight?.IncrementToken(indexEqualToOrGreaterThan, count);
	    politics?.IncrementToken(indexEqualToOrGreaterThan, count);
	    war_capacity?.IncrementToken(indexEqualToOrGreaterThan, count);
	    spot_capacity?.IncrementToken(indexEqualToOrGreaterThan, count);
	    gain_per?.IncrementToken(indexEqualToOrGreaterThan, count);
	    support_range?.IncrementToken(indexEqualToOrGreaterThan, count);
	    my_range?.IncrementToken(indexEqualToOrGreaterThan, count);
	    myhelp_range?.IncrementToken(indexEqualToOrGreaterThan, count);
	    base_level?.IncrementToken(indexEqualToOrGreaterThan, count);
	    monster_level?.IncrementToken(indexEqualToOrGreaterThan, count);
	    training_up?.IncrementToken(indexEqualToOrGreaterThan, count);
	    actor_per?.IncrementToken(indexEqualToOrGreaterThan, count);
	    sortkey?.IncrementToken(indexEqualToOrGreaterThan, count);
	    default_ending?.IncrementToken(indexEqualToOrGreaterThan, count);
	    power_order?.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable?.IncrementToken(indexEqualToOrGreaterThan, count);
	    enable_talent?.IncrementToken(indexEqualToOrGreaterThan, count);
	    party?.IncrementToken(indexEqualToOrGreaterThan, count);
	    no_autosave?.IncrementToken(indexEqualToOrGreaterThan, count);
	    zone?.IncrementToken(indexEqualToOrGreaterThan, count);
	    nozone?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item0?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item1?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item2?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item3?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item4?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item5?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item6?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_limit?.IncrementToken(indexEqualToOrGreaterThan, count);
	    poli?.IncrementToken(indexEqualToOrGreaterThan, count);
	    camp?.IncrementToken(indexEqualToOrGreaterThan, count);
	    multi?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_sale?.IncrementToken(indexEqualToOrGreaterThan, count);
	    item_hold?.IncrementToken(indexEqualToOrGreaterThan, count);
	    text?.IncrementToken(indexEqualToOrGreaterThan, count);
	    roam?.IncrementToken(indexEqualToOrGreaterThan, count);
	    spot?.IncrementToken(indexEqualToOrGreaterThan, count);
	    power?.IncrementToken(indexEqualToOrGreaterThan, count);
	    offset?.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

        foreach (ref var statement in Statements.AsSpan())
        {
            statement.DecrementToken(indexEqualToOrGreaterThan, count);
        }

	    ws_red?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ws_blue?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ws_green?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ws_alpha?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ws_light?.DecrementToken(indexEqualToOrGreaterThan, count);
	    ws_light_range?.DecrementToken(indexEqualToOrGreaterThan, count);
	    discus?.DecrementToken(indexEqualToOrGreaterThan, count);
	    save_name?.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable_select?.DecrementToken(indexEqualToOrGreaterThan, count);
	    max_unit?.DecrementToken(indexEqualToOrGreaterThan, count);
	    blind?.DecrementToken(indexEqualToOrGreaterThan, count);
	    name?.DecrementToken(indexEqualToOrGreaterThan, count);
	    map?.DecrementToken(indexEqualToOrGreaterThan, count);
	    help?.DecrementToken(indexEqualToOrGreaterThan, count);
	    locate_x?.DecrementToken(indexEqualToOrGreaterThan, count);
	    locate_y?.DecrementToken(indexEqualToOrGreaterThan, count);
	    begin_text?.DecrementToken(indexEqualToOrGreaterThan, count);
	    world?.DecrementToken(indexEqualToOrGreaterThan, count);
	    fight?.DecrementToken(indexEqualToOrGreaterThan, count);
	    politics?.DecrementToken(indexEqualToOrGreaterThan, count);
	    war_capacity?.DecrementToken(indexEqualToOrGreaterThan, count);
	    spot_capacity?.DecrementToken(indexEqualToOrGreaterThan, count);
	    gain_per?.DecrementToken(indexEqualToOrGreaterThan, count);
	    support_range?.DecrementToken(indexEqualToOrGreaterThan, count);
	    my_range?.DecrementToken(indexEqualToOrGreaterThan, count);
	    myhelp_range?.DecrementToken(indexEqualToOrGreaterThan, count);
	    base_level?.DecrementToken(indexEqualToOrGreaterThan, count);
	    monster_level?.DecrementToken(indexEqualToOrGreaterThan, count);
	    training_up?.DecrementToken(indexEqualToOrGreaterThan, count);
	    actor_per?.DecrementToken(indexEqualToOrGreaterThan, count);
	    sortkey?.DecrementToken(indexEqualToOrGreaterThan, count);
	    default_ending?.DecrementToken(indexEqualToOrGreaterThan, count);
	    power_order?.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable?.DecrementToken(indexEqualToOrGreaterThan, count);
	    enable_talent?.DecrementToken(indexEqualToOrGreaterThan, count);
	    party?.DecrementToken(indexEqualToOrGreaterThan, count);
	    no_autosave?.DecrementToken(indexEqualToOrGreaterThan, count);
	    zone?.DecrementToken(indexEqualToOrGreaterThan, count);
	    nozone?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item0?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item1?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item2?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item3?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item4?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item5?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item6?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_limit?.DecrementToken(indexEqualToOrGreaterThan, count);
	    poli?.DecrementToken(indexEqualToOrGreaterThan, count);
	    camp?.DecrementToken(indexEqualToOrGreaterThan, count);
	    multi?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_sale?.DecrementToken(indexEqualToOrGreaterThan, count);
	    item_hold?.DecrementToken(indexEqualToOrGreaterThan, count);
	    text?.DecrementToken(indexEqualToOrGreaterThan, count);
	    roam?.DecrementToken(indexEqualToOrGreaterThan, count);
	    spot?.DecrementToken(indexEqualToOrGreaterThan, count);
	    power?.DecrementToken(indexEqualToOrGreaterThan, count);
	    offset?.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct EventNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

    public ArrayPoolList<IStatement> Statements;
	public EventKind EventKind;
	public VariantPair<Pair_NullableString_NullableIntElement> disperse;
	public VariantPair<Pair_NullableString_NullableIntElement> castle;
	public VariantPair<Pair_NullableString_NullableIntElement> castle_battle;
	public VariantPair<Pair_NullableString_NullableIntElement> personal_battle;
	public VariantPair<Pair_NullableString_NullableIntElement> blind;
	public VariantPair<Pair_NullableString_NullableIntElement> w;
	public VariantPair<Pair_NullableString_NullableIntElement> h;
	public VariantPair<Pair_NullableString_NullableIntElement> bg;
	public VariantPair<Pair_NullableString_NullableIntElement> bcg;
	public VariantPair<Pair_NullableString_NullableIntElement> bgm;
	public VariantPair<Pair_NullableString_NullableIntElement> map;
	public VariantPair<Pair_NullableString_NullableIntElement> name;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> color;
	public VariantPair<Pair_NullableString_NullableIntElement> block;
	public VariantPair<Pair_NullableString_NullableIntElement> limit;
	public VariantPair<Pair_NullableString_NullableIntElement> title;
	public VariantPair<Pair_NullableString_NullableIntElement> center;
	public VariantPair<Pair_NullableString_NullableIntElement> italic;
	public VariantPair<Pair_NullableString_NullableIntElement> handle;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> member;
	public VariantPair<Pair_NullableString_NullableIntElement> second;
	public VariantPair<Pair_NullableString_NullableIntElement> volume;
	public VariantPair<Pair_NullableString_NullableIntElement> bg_fade;
	public VariantPair<Pair_NullableString_NullableIntElement> dark_fade;
	public VariantPair<Pair_NullableString_NullableIntElement> dark_alpha;
	public VariantPair<Pair_NullableString_NullableIntElement> bg_interval;
	public VariantPair<Pair_NullableString_NullableIntElement> dark_fade_e;
	public VariantPair<Pair_NullableString_NullableIntElement> last_second;

    public EventNode()
    {
        Statements = new();
    
	EventKind = new();
	disperse = new();
	castle = new();
	castle_battle = new();
	personal_battle = new();
	blind = new();
	w = new();
	h = new();
	bg = new();
	bcg = new();
	bgm = new();
	map = new();
	name = new();
	color = new();
	block = new();
	limit = new();
	title = new();
	center = new();
	italic = new();
	handle = new();
	member = new();
	second = new();
	volume = new();
	bg_fade = new();
	dark_fade = new();
	dark_alpha = new();
	bg_interval = new();
	dark_fade_e = new();
	last_second = new();
    }

	public void Dispose()
	{
		Statements.Dispose();
		disperse.Dispose();
		castle.Dispose();
		castle_battle.Dispose();
		personal_battle.Dispose();
		blind.Dispose();
		w.Dispose();
		h.Dispose();
		bg.Dispose();
		bcg.Dispose();
		bgm.Dispose();
		map.Dispose();
		name.Dispose();
		color.Dispose();
		block.Dispose();
		limit.Dispose();
		title.Dispose();
		center.Dispose();
		italic.Dispose();
		handle.Dispose();
		member.Dispose();
		second.Dispose();
		volume.Dispose();
		bg_fade.Dispose();
		dark_fade.Dispose();
		dark_alpha.Dispose();
		bg_interval.Dispose();
		dark_fade_e.Dispose();
		last_second.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

        foreach (ref var statement in Statements.AsSpan())
        {
            statement.IncrementToken(indexEqualToOrGreaterThan, count);
        }

	    disperse.IncrementToken(indexEqualToOrGreaterThan, count);
	    castle.IncrementToken(indexEqualToOrGreaterThan, count);
	    castle_battle.IncrementToken(indexEqualToOrGreaterThan, count);
	    personal_battle.IncrementToken(indexEqualToOrGreaterThan, count);
	    blind.IncrementToken(indexEqualToOrGreaterThan, count);
	    w.IncrementToken(indexEqualToOrGreaterThan, count);
	    h.IncrementToken(indexEqualToOrGreaterThan, count);
	    bg.IncrementToken(indexEqualToOrGreaterThan, count);
	    bcg.IncrementToken(indexEqualToOrGreaterThan, count);
	    bgm.IncrementToken(indexEqualToOrGreaterThan, count);
	    map.IncrementToken(indexEqualToOrGreaterThan, count);
	    name.IncrementToken(indexEqualToOrGreaterThan, count);
	    color.IncrementToken(indexEqualToOrGreaterThan, count);
	    block.IncrementToken(indexEqualToOrGreaterThan, count);
	    limit.IncrementToken(indexEqualToOrGreaterThan, count);
	    title.IncrementToken(indexEqualToOrGreaterThan, count);
	    center.IncrementToken(indexEqualToOrGreaterThan, count);
	    italic.IncrementToken(indexEqualToOrGreaterThan, count);
	    handle.IncrementToken(indexEqualToOrGreaterThan, count);
	    member.IncrementToken(indexEqualToOrGreaterThan, count);
	    second.IncrementToken(indexEqualToOrGreaterThan, count);
	    volume.IncrementToken(indexEqualToOrGreaterThan, count);
	    bg_fade.IncrementToken(indexEqualToOrGreaterThan, count);
	    dark_fade.IncrementToken(indexEqualToOrGreaterThan, count);
	    dark_alpha.IncrementToken(indexEqualToOrGreaterThan, count);
	    bg_interval.IncrementToken(indexEqualToOrGreaterThan, count);
	    dark_fade_e.IncrementToken(indexEqualToOrGreaterThan, count);
	    last_second.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

        foreach (ref var statement in Statements.AsSpan())
        {
            statement.DecrementToken(indexEqualToOrGreaterThan, count);
        }

	    disperse.DecrementToken(indexEqualToOrGreaterThan, count);
	    castle.DecrementToken(indexEqualToOrGreaterThan, count);
	    castle_battle.DecrementToken(indexEqualToOrGreaterThan, count);
	    personal_battle.DecrementToken(indexEqualToOrGreaterThan, count);
	    blind.DecrementToken(indexEqualToOrGreaterThan, count);
	    w.DecrementToken(indexEqualToOrGreaterThan, count);
	    h.DecrementToken(indexEqualToOrGreaterThan, count);
	    bg.DecrementToken(indexEqualToOrGreaterThan, count);
	    bcg.DecrementToken(indexEqualToOrGreaterThan, count);
	    bgm.DecrementToken(indexEqualToOrGreaterThan, count);
	    map.DecrementToken(indexEqualToOrGreaterThan, count);
	    name.DecrementToken(indexEqualToOrGreaterThan, count);
	    color.DecrementToken(indexEqualToOrGreaterThan, count);
	    block.DecrementToken(indexEqualToOrGreaterThan, count);
	    limit.DecrementToken(indexEqualToOrGreaterThan, count);
	    title.DecrementToken(indexEqualToOrGreaterThan, count);
	    center.DecrementToken(indexEqualToOrGreaterThan, count);
	    italic.DecrementToken(indexEqualToOrGreaterThan, count);
	    handle.DecrementToken(indexEqualToOrGreaterThan, count);
	    member.DecrementToken(indexEqualToOrGreaterThan, count);
	    second.DecrementToken(indexEqualToOrGreaterThan, count);
	    volume.DecrementToken(indexEqualToOrGreaterThan, count);
	    bg_fade.DecrementToken(indexEqualToOrGreaterThan, count);
	    dark_fade.DecrementToken(indexEqualToOrGreaterThan, count);
	    dark_alpha.DecrementToken(indexEqualToOrGreaterThan, count);
	    bg_interval.DecrementToken(indexEqualToOrGreaterThan, count);
	    dark_fade_e.DecrementToken(indexEqualToOrGreaterThan, count);
	    last_second.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}

public partial struct StoryNode : IInheritableNode
{
    public uint Kind { get; set; }
    public uint BracketLeft { get; set; }
    public uint BracketRight { get; set; }
    public uint Name { get; set; }
    public uint Super { get; set; }
	public bool HasSuper { get; set; }

    public ArrayPoolList<IStatement> Statements;
	public VariantPair<Pair_NullableString_NullableInt_ArrayElement> friend;
	public VariantPair<Pair_NullableString_NullableIntElement> fight;

    public StoryNode()
    {
        Statements = new();
    
	friend = new();
	fight = new();
    }

	public void Dispose()
	{
		Statements.Dispose();
		friend.Dispose();
		fight.Dispose();
	}

    public void IncrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind += count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft += count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight += count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name += count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super += count;
        }

        foreach (ref var statement in Statements.AsSpan())
        {
            statement.IncrementToken(indexEqualToOrGreaterThan, count);
        }

	    friend.IncrementToken(indexEqualToOrGreaterThan, count);
	    fight.IncrementToken(indexEqualToOrGreaterThan, count);
    }

    public void DecrementToken(uint indexEqualToOrGreaterThan, uint count)
    {
        if (Kind >= indexEqualToOrGreaterThan)
        {
            Kind -= count;
        }

        if (BracketLeft >= indexEqualToOrGreaterThan)
        {
            BracketLeft -= count;
        }

        if (BracketRight >= indexEqualToOrGreaterThan)
        {
            BracketRight -= count;
        }

        if (Name >= indexEqualToOrGreaterThan)
        {
            Name -= count;
        }

        if (HasSuper && Super >= indexEqualToOrGreaterThan)
        {
            Super -= count;
        }

        foreach (ref var statement in Statements.AsSpan())
        {
            statement.DecrementToken(indexEqualToOrGreaterThan, count);
        }

	    friend.DecrementToken(indexEqualToOrGreaterThan, count);
	    fight.DecrementToken(indexEqualToOrGreaterThan, count);
    }
}
