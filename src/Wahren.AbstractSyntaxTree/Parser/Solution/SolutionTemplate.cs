#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
namespace Wahren.AbstractSyntaxTree.Parser;

public sealed partial class Solution : ISolutionResolver
{
	public ref Result TryGetScenarioNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.ScenarioNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetEventNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.EventNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetStoryNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.StoryNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetMovetypeNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.MovetypeNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSkillNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.SkillNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSkillsetNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.SkillsetNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetRaceNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.RaceNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetUnitNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.UnitNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetClassNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.ClassNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetPowerNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.PowerNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSpotNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.SpotNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetFieldNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.FieldNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetObjectNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.ObjectNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetDungeonNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.DungeonNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetVoiceNode(ReadOnlySpan<char> name, out uint index)
    {
        foreach (ref var file in Files)
        {
            ref var list = ref file.VoiceNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public bool CheckExistance()
    {
        var success = true;

        foreach (ref var file in Files)
        {
            ref var set = ref file.ScenarioSet;
            for (uint i = 10, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"scenario '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }


        foreach (ref var file in Files)
        {
            ref var set = ref file.EventSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"event '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.StorySet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"story '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.MovetypeSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"movetype '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.SkillSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"skill '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.SkillsetSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"skillset '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.RaceSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"race '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.UnitSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"unit '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.ClassSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"class '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.PowerSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"power '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.SpotSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"spot '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.FieldSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"field '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.ObjectSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"object '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.DungeonSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"dungeon '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        foreach (ref var file in Files)
        {
            ref var set = ref file.VoiceSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (Unsafe.IsNullRef(ref TryGetScenarioNode(name, out _)))
                {
                    success = false;
                    SolutionErrorList.Add(new($"voice '{name}' is not found in this solution. File: {file.FilePath}"));
                }
            }
        }

        if (!success)
        {
            return false;
        }

        return true;
    }
}
