<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.TextTemplateHelper.dll" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.Basic.dll" #>
<#@ import namespace="Wahren.AbstractSyntaxTree" #>
<#@ import namespace="Wahren.AbstractSyntaxTree.TextTemplateHelper" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
#nullable enable

namespace Wahren.AbstractSyntaxTree.Parser;

public static partial class NodeValidator
{
	public static void AddReferenceAndValidate(ref Context context, ref Result result)
	{
<# foreach (var elementName in Helper.Inheritables.Concat(Helper.BlockContainers)) { #>
		foreach (ref var node in result.<#= elementName #>NodeList.AsSpan())
		{
			AddReferenceAndValidate(ref context, ref result, ref node);
		}
<# } #>
	}
<# foreach (var elementName in Helper.BlockContainers.Concat(Helper.Inheritables)) {
	var elements = ElementInfo.Get(elementName).Where(x => x.referenceKind.CanProcessEarly()); #>

	public static void AddReferenceAndValidate(ref Context context, ref Result result, ref <#= elementName #>Node node)
	{
<#  if (elementName.IsBlockContainer()) { #>
		foreach (var statement in node.Statements.AsSpan())
		{
			AddReferenceAndValidate(ref context, ref result, statement);
		}
<#  } #>
<#	foreach (var element in elements) {
		switch (element.referenceKind) { #>
<#			case ReferenceKind.Scenario					: #>
<#			case ReferenceKind.Event					: #>
<#			case ReferenceKind.Story					: #>
<#			case ReferenceKind.Movetype					: #>
<#			case ReferenceKind.Skill					: #>
<#			case ReferenceKind.Skillset					: #>
<#			case ReferenceKind.Race						: #>
<#			case ReferenceKind.Unit						: #>
<#			case ReferenceKind.Class					: #>
<#			case ReferenceKind.Power					: #>
<#			case ReferenceKind.Spot						: #>
<#			case ReferenceKind.Field					: #>
<#			case ReferenceKind.Object					: #>
<#			case ReferenceKind.Dungeon					: #>
<#			case ReferenceKind.Voice					: #>
<#			case ReferenceKind.AttributeType			: #>
<#			case ReferenceKind.VoiceTypeReader			: #>
<#			case ReferenceKind.VoiceTypeWriter			: #>
<#			case ReferenceKind.FieldAttributeTypeReader	: #>
<#			case ReferenceKind.FieldAttributeTypeWriter	: #>
<#			case ReferenceKind.FieldIdReader			: #>
<#			case ReferenceKind.FieldIdWriter			: #>
<#			case ReferenceKind.ClassTypeReader			: #>
<#			case ReferenceKind.ClassTypeWriter			: #>
<#			case ReferenceKind.map						: #>
<#			case ReferenceKind.bgm						: #>
<#			case ReferenceKind.imagedata				: #>
<#			case ReferenceKind.face						: #>
<#			case ReferenceKind.se						: #>
<#			case ReferenceKind.picture					: #>
<#			case ReferenceKind.image_file				: #>
<#			case ReferenceKind.flag						: #>
<#			case ReferenceKind.font						: #>
		AddReference(ref result, ref node.<#= element.name.Escape() #>, ref result.<#= element.referenceKind #>Set, ReferenceKind.<#= element.referenceKind #>);
<#				break;#>
<#			case ReferenceKind.Number: #>
<#			case ReferenceKind.Boolean: #>
		Validate<#= element.referenceKind #>(ref result, ref node.<#= element.name.Escape() #>, " '<#= element.Name #>' of <#= elementName.ToLowerInvariant() #> requires <#= element.referenceKind #>.");
<#				break;#>
<#			case ReferenceKind.Boolean | ReferenceKind.Number: #>
		ValidateBooleanNumber(ref result, ref node.<#= element.name.Escape() #>, " '<#= element.Name #>' of <#= elementName.ToLowerInvariant() #> requires Boolean 'on' or Number.");
<#				break;#>
<#			case ReferenceKind.Special: #>
		SpecialTreatment_<#= elementName.ToLowerInvariant() #>_<#= element.Name #>(ref result, ref node.<#= element.name.Escape() #>, context.RequiredSeverity);
<#				break;#>
<#			case ReferenceKind.Text: #>
		// Ignore Text <#= elementName #> <#= element.Name #>
<#				break;#>
<#		}#>
<#	}#>
	}
<# } #>
}
