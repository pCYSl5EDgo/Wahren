<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.TextTemplateHelper.dll" #>
<#@ import namespace="Wahren.AbstractSyntaxTree.TextTemplateHelper" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
#nullable enable

namespace Wahren.AbstractSyntaxTree.Parser;

public static partial class NodeValidator
{<# foreach (var elementName in Helper.Inheritables.Concat(Helper.BlockContainers)) {
	var elements = ElementInfo.Get(elementName); #>

	public static bool AddReferenceAndValidate(this ref Result result, ref <#= elementName #>Node node)
	{
		bool success = true;
<#	foreach (var element in elements) {
		if (element.elementContentType == ElementContentType.Unknown) continue;
		var correspondingType = element.name.GetCorrespondingType();
		if (correspondingType == "StringElement" || correspondingType == "StringArrayElement") continue;
		var isSingle = correspondingType == "Pair_NullableString_NullableIntElement";
		switch (element.elementContentType) { #>
<#			default: continue;#>
<#			case ElementContentType.Scenario: #>
<#			case ElementContentType.Event: #>
<#			case ElementContentType.Story: #>
<#			case ElementContentType.Movetype: #>
<#			case ElementContentType.Skill: #>
<#			case ElementContentType.Skillset: #>
<#			case ElementContentType.Race: #>
<#			case ElementContentType.Unit: #>
<#			case ElementContentType.Class: #>
<#			case ElementContentType.Power: #>
<#			case ElementContentType.Spot: #>
<#			case ElementContentType.Field: #>
<#			case ElementContentType.Object: #>
<#			case ElementContentType.Dungeon: #>
<#			case ElementContentType.Voice: #>
		AddReference(ref result, ref node.<#= element.name.Escape() #>, ref result.<#= element.elementContentType #>Set, ReferenceKind.<#= element.elementContentType #>);
<#				break;#>
<#			case ElementContentType.VoiceType: #>
<#				break;#>
<#			case ElementContentType.AttributeType: #>
<#				break;#>
<#			case ElementContentType.Number: #>
<#			case ElementContentType.Boolean: #>
		if (!Validate<#= element.elementContentType #>(ref result, ref node.<#= element.name.Escape() #>, " '<#= element.name #>' of <#= elementName.ToLowerInvariant() #> requires <#= element.elementContentType #>."))
		{
			success = false;
		}
<#				break;#>
<#			case ElementContentType.Special: #>
		AddReference_<#= elementName #>_<#= element.name #>(ref result, ref node.<#= element.name.Escape() #>);
<#				break;#>
<#		}#>
<#	}#>
		return success;
	}
<# } #>
}
