// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
#nullable enable
using Wahren.AbstractSyntaxTree.Element.Statement.Expression;

namespace Wahren.AbstractSyntaxTree.Parser;

public static partial class NodeValidator
{
    public static void AddReferenceAndValidate(ref Context context, ref Result result, CallFunctionExpression statement)
    {
        var arguments = statement.Arguments.AsSpan();
        if (arguments.IsEmpty)
        {
            return;
        }

        ref var argument = ref arguments[0];
        ReadOnlySpan<char> span;
        switch (statement.Kind)
        {
            case FunctionKind.isSelect:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.ErrorList.Add(new($"Unknown action 'isSelect'.", result.TokenList[statement.TokenId].Range, DiagnosticSeverity.Warning));
                }
                break;
            case FunctionKind.isWhoDead:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.ErrorList.Add(new($"Unknown action 'isWhoDead'.", result.TokenList[statement.TokenId].Range, DiagnosticSeverity.Warning));
                }
                break;
            case FunctionKind.isGameOver:
                if (context.CreateError(DiagnosticSeverity.Warning))
                {
                    result.ErrorList.Add(new($"Unknown action 'isGameOver'.", result.TokenList[statement.TokenId].Range, DiagnosticSeverity.Warning));
                }
                break;
            case FunctionKind.has:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'has'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.Length > 1 && span[0] == '@')
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.inVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'inVar'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.Length > 1 && span[0] == '@')
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.inSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'inSpot'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"1-th argument is empty. String Variable is required by action 'inSpot'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorList.Add(new($"{i}-th argument is empty. String Variable is required by action 'inSpot'.", result.TokenList[argument.TokenId].Range));
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.inPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'inPower'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                
                break;
            case FunctionKind.inRoamSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'inRoamSpot'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"1-th argument is empty. String Variable is required by action 'inRoamSpot'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorList.Add(new($"{i}-th argument is empty. String Variable is required by action 'inRoamSpot'.", result.TokenList[argument.TokenId].Range));
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.yet:
                argument.ReferenceKind = ReferenceKind.Event;
                argument.ReferenceId = result.EventSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.count:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'count'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.amount:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'amount'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.conVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'conVar'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.isDone:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isDone'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.getLife:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'getLife'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'countVar'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                break;
            case FunctionKind.isActive:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isActive'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isArbeit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isArbeit'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isEnable:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isEnable'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isInvade:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isInvade'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isLeader:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isLeader'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isMaster:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isMaster'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isPlayer:
                
                break;
            case FunctionKind.isRoamer:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isRoamer'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isTalent:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isTalent'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isVassal:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isVassal'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countGain:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'countGain'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'countSpot'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countUnit:
                
                break;
            case FunctionKind.isAllDead:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isAllDead'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isNowSpot:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isNowSpot'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countForce:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'countForce'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countMoney:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'countMoney'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.countSkill:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'countSkill'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Skill;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.getLifePer:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'getLifePer'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isInterval:
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isScenario:
                argument.ReferenceKind = ReferenceKind.Scenario;
                argument.ReferenceId = result.ScenarioSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.isRoamLeader:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isRoamLeader'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.getClearFloor:
                AddReferenceAndValidate_Function_getClearFloor(ref context, ref result, statement);
                break;
            case FunctionKind.equal:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'equal'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.eqVar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'eqVar'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isWar:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isWar'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.Power;
                argument.ReferenceId = result.PowerSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.ptest:
                argument.ReferenceKind = ReferenceKind.Spot;
                argument.ReferenceId = result.SpotSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.Unit;
                argument.ReferenceId = result.UnitSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case FunctionKind.reckon:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'reckon'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }
                else
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"0-th argument '{span}' is String Variable. '@' should be written.", result.TokenList[argument.TokenId].Range));
                    }
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.Length > 1 && span[0] == '@')
                {
                    argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isEnemy:
                
                
                break;
            case FunctionKind.isFriend:
                
                
                break;
            case FunctionKind.isLeague:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isLeague'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"1-th argument is empty. String Variable is required by action 'isLeague'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isSameArmy:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isSameArmy'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isNpc:
                
                break;
            case FunctionKind.isDead:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isDead'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorList.Add(new($"{i}-th argument is empty. String Variable is required by action 'isDead'.", result.TokenList[argument.TokenId].Range));
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.isAlive:
                
                break;
            case FunctionKind.inBattle:
                
                break;
            case FunctionKind.isAnyDead:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isAnyDead'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorList.Add(new($"{i}-th argument is empty. String Variable is required by action 'isAnyDead'.", result.TokenList[argument.TokenId].Range));
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case FunctionKind.isJoin:
                AddReferenceAndValidate_Function_isJoin(ref context, ref result, statement);
                break;
            case FunctionKind.isNext:
                AddReferenceAndValidate_Function_isNext(ref context, ref result, statement);
                break;
            case FunctionKind.getDistance:
                AddReferenceAndValidate_Function_getDistance(ref context, ref result, statement);
                break;
            case FunctionKind.isPostIn:
                AddReferenceAndValidate_Function_isPostIn(ref context, ref result, statement);
                break;
            case FunctionKind.countPost:
                if (!argument.IsNumber && (argument.HasReference = IsRedBlue(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.RedBlue;
                }
                else
                {
                    result.ErrorList.Add(new($"The 0-th argument of action 'countPost' must be RedBlue.", result.TokenList[argument.TokenId].Range));
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"1-th argument is empty. String Variable is required by action 'countPost'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[4];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[5];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isComTurn:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorList.Add(new($"0-th argument is empty. String Variable is required by action 'isComTurn'.", result.TokenList[argument.TokenId].Range));
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                break;
            case FunctionKind.isDungeon:
                argument.ReferenceKind = ReferenceKind.Dungeon;
                argument.ReferenceId = result.DungeonSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_NumberIsExpected(argument.TokenId, $" The 1-th argument of action 'isDungeon' must be Number.");
                }

                break;
        }
    }

    public static bool ArgumentCountValidation(ref Context context, ref Result result, FunctionKind kind, int count, uint index)
    {
        if (count < 0)
        {
            return false;
        }

		switch (kind)
        {
            case FunctionKind.has:
            case FunctionKind.inVar:
            case FunctionKind.inSpot:
            case FunctionKind.inPower:
            case FunctionKind.inRoamSpot:
                if (count < 2)
                {
                    result.ErrorList.Add(new($"There are too less arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 2~.", result.TokenList[index].Range));
                    return false;
                }
                break;
            case FunctionKind.yet:
            case FunctionKind.count:
            case FunctionKind.amount:
            case FunctionKind.conVar:
            case FunctionKind.isDone:
            case FunctionKind.getLife:
            case FunctionKind.countVar:
            case FunctionKind.isActive:
            case FunctionKind.isArbeit:
            case FunctionKind.isEnable:
            case FunctionKind.isInvade:
            case FunctionKind.isLeader:
            case FunctionKind.isMaster:
            case FunctionKind.isPlayer:
            case FunctionKind.isRoamer:
            case FunctionKind.isTalent:
            case FunctionKind.isVassal:
            case FunctionKind.countGain:
            case FunctionKind.countSpot:
            case FunctionKind.countUnit:
            case FunctionKind.isAllDead:
            case FunctionKind.isNowSpot:
            case FunctionKind.countForce:
            case FunctionKind.countMoney:
            case FunctionKind.countSkill:
            case FunctionKind.getLifePer:
            case FunctionKind.isInterval:
            case FunctionKind.isScenario:
            case FunctionKind.isRoamLeader:
            case FunctionKind.getClearFloor:
                if (count < 1)
                {
                    result.ErrorList.Add(new($"There are too less arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 1.", result.TokenList[index].Range));
                    return false;
                }
                else if (count > 1)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 1.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
            case FunctionKind.rand:
            case FunctionKind.isMap:
            case FunctionKind.isNPM:
            case FunctionKind.getMode:
            case FunctionKind.getTime:
            case FunctionKind.getTurn:
            case FunctionKind.isEvent:
            case FunctionKind.isPeace:
            case FunctionKind.isWorld:
            case FunctionKind.getLimit:
            case FunctionKind.isNewTurn:
            case FunctionKind.istoWorld:
            case FunctionKind.countPower:
            case FunctionKind.isRedAlive:
            case FunctionKind.isWatching:
            case FunctionKind.getRedCount:
            case FunctionKind.isBlueAlive:
            case FunctionKind.isGameClear:
            case FunctionKind.isPlayerEnd:
            case FunctionKind.getBlueCount:
            case FunctionKind.isPlayerTurn:
            case FunctionKind.isWorldMusicStop:
				if (count != 0)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 0.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
            case FunctionKind.equal:
            case FunctionKind.eqVar:
            case FunctionKind.isWar:
            case FunctionKind.ptest:
            case FunctionKind.reckon:
            case FunctionKind.isEnemy:
            case FunctionKind.isFriend:
            case FunctionKind.isLeague:
            case FunctionKind.isSameArmy:
                if (count < 2)
                {
                    result.ErrorList.Add(new($"There are too less arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 2.", result.TokenList[index].Range));
                    return false;
                }
                else if (count > 2)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 2.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
            case FunctionKind.isNpc:
            case FunctionKind.isDead:
            case FunctionKind.isAlive:
            case FunctionKind.inBattle:
            case FunctionKind.isAnyDead:
                if (count < 1)
                {
                    result.ErrorList.Add(new($"There are too less arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 1~.", result.TokenList[index].Range));
                    return false;
                }
                break;
            case FunctionKind.isJoin:
            case FunctionKind.isNext:
            case FunctionKind.getDistance:
				if (count < 2)
                {
                    result.ErrorList.Add(new($"There are too less arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 2~3.", result.TokenList[index].Range));
                    return false;
                }
                else if (count > 3)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 2~3.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
            case FunctionKind.isPostIn:
				if (count < 3)
                {
                    result.ErrorList.Add(new($"There are too less arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 3~5.", result.TokenList[index].Range));
                    return false;
                }
                else if (count > 5)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 3~5.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
            case FunctionKind.countPost:
                if (count < 6)
                {
                    result.ErrorList.Add(new($"There are too less arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 6.", result.TokenList[index].Range));
                    return false;
                }
                else if (count > 6)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 6.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
            case FunctionKind.isComTurn:
				if (count > 1)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 0~1.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
            case FunctionKind.isDungeon:
				if (count > 2)
                {
                    if (context.CreateError(DiagnosticSeverity.Warning))
                    {
                        result.ErrorList.Add(new($"There are too many arguments({count}) for '{kind}'. Exceeding arguments are just ignored. Required: 0~2.", result.TokenList[index].Range, DiagnosticSeverity.Warning));
                    }
                    return false;
                }
                break;
        }
        return true;
	}
}
