<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.TextTemplateHelper.dll" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.Basic.dll" #>
<#@ import namespace="Wahren.AbstractSyntaxTree" #>
<#@ import namespace="Wahren.AbstractSyntaxTree.TextTemplateHelper" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
#nullable enable
namespace Wahren.AbstractSyntaxTree.Parser;

public static partial class Parser
{
<# foreach (var node in NodeInfo.Nodes.Where(x => !x.HasBlock)) {
    ElementInfo[] elements = node.Elements;
    var usageGroup = elements.MakeUsageGroup(); #>
    private static bool Parse<#= node.Name #>(ref Context context, ref Result result, AnalysisResult analysisResult, out bool canContinue)
    {
        result.<#= node.Name #>NodeList.Add(new());
        ref var tokenList = ref result.TokenList;
        ref var node = ref result.<#= node.Name #>NodeList.Last;
        node.Kind = tokenList.LastIndex;
        canContinue = false;
        if (!ParseNameAndSuperAndBracketLeft(ref context, ref result, ref node, ref analysisResult.<#= node.Name #>Set))
        {
            return false;
        }

        var createErrorWarning = context.CreateError(DiagnosticSeverity.Warning);
        uint variant = uint.MaxValue;
        ref var source = ref result.Source;
<#  foreach (var (type, _) in usageGroup) { #>
        ref var pair_<#= type #> = ref Unsafe.NullRef<<#= type #>?>();
<#  } #>
        ulong key = 0UL;
        do
        {
            if (!ReadUsefulToken(ref context, ref result))
            {
                result.ErrorAdd_BracketRightNotFound(node.Kind, node.Name);
                return false;
            }

            if (result.IsBracketRight(tokenList.LastIndex))
            {
                node.BracketRight = tokenList.LastIndex;
                canContinue = true;
                return true;
            }

            var currentIndex = tokenList.LastIndex;
<# if (node.IsAllScenarioVariant) { #>
            if (!result.SplitElement(analysisResult, currentIndex, out var span, out variant))
<# } else { #>
            if (!result.SplitElementPlain(currentIndex, out var span, out var variantSpan))
<# } #>
            {
                return false;
            }

            if (!ReadToken(ref context, ref result))
            {
                result.ErrorAdd_UnexpectedEndOfFile(tokenList.LastIndex, "'=' is expected but not found.");
                return false;
            }

            if (!result.IsAssign(tokenList.LastIndex))
            {
                result.ErrorAdd_UnexpectedOperatorToken(tokenList.LastIndex, "'=' is expected but not found.");
                return false;
            }

            key = StringHashUtility.Calc(span);
            switch (span.Length)
            {
<#  foreach (var (len, items) in elements.MakeGroup()) { #>
                case <#= len #>:
                    switch (key)
                    {
<#      foreach (var (item, key, rest) in items) {
            var type = item.Type;
            var trailer = item.Name.GetCorrespondingTrailer(); #>
                        case 0x<#= key #>UL<# if (len == StringHashUtility.HashLengthMax + 1) { #> when span[StringHashUtility.HashLengthMax] == '<#= rest[0] #>'<# } else if (len > StringHashUtility.HashLengthMax + 1) { #> when span.Slice(StringHashUtility.HashLengthMax).SequenceEqual("<#= rest #>")<# } #>:
<#          if (item.VariantType == "") { #>
                            if (variantSpan.Length != 0)
                            {
                                result.ErrorAdd_VariantNotAllowed(node.Kind, currentIndex);
                            }
                            variant = uint.MaxValue;
                            pair_<#= type #> = ref node.<#= item.Name.Escape() #>;
<#          } else if (node.IsAllScenarioVariant) { #>
                            pair_<#= type #> = ref node.<#= item.Name.Escape() #>.EnsureGet(variant);
<#          } else { #>
                            pair_<#= type #> = ref node.<#= item.Name.Escape() #>.EnsureGet(variant = analysisResult.<#= item.VariantType #>Set.GetOrAdd(variantSpan, currentIndex));
<#          } #>
                            goto <#= trailer #>;
<#      } #>
                    }
                    break;
<#  } #>
            }

<#  if (node.IsAllowedUndefinedContent) { #>
            foreach (ref var other in node.Others)
            {
                if (other.EqualsKey(span, ref result))
                {
                    pair_Pair_NullableString_NullableIntElement = ref other.EnsureGet(variant);
                    goto DEFAULT;
                }
            }

            node.Others.Add(new());
            pair_Pair_NullableString_NullableIntElement = ref node.Others.Last.EnsureGet(variant);
<#  } else { #>
            if (Parse_Discard(ref context, ref result, currentIndex, key))
            {
                result.ErrorAdd_UnexpectedElementName(node.Kind, currentIndex);
                continue;
            }
            else
            {
                return false;
            }
<#  }#>
<#  foreach (var (type, outers) in usageGroup) {
        foreach (var (x, _) in outers) {
            var (trailer, func) = x;
            if (trailer == "ROAM" && node.Name == "Voice") { func = "Parse_Voice_ROAM_EnglishMode"; }#>
        <#= trailer #>:
            if (pair_<#= type #> is null)
            {
                pair_<#= type #> = new(currentIndex);
                pair_<#= type #>.ElementScenarioId = variant;
                pair_<#= type #>.ElementKeyRange.Length = (uint)span.Length;
                {
                    pair_<#= type #>.ElementKeyRange.Line = tokenList.GetLine(currentIndex);
                    pair_<#= type #>.ElementKeyRange.Offset = tokenList.GetOffset(currentIndex);
                }
                if (<#= func #>(ref context, ref result, pair_<#= type #>))
                {
                   continue;
                }

                return false;
            }

            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_<#= trailer #>(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                return false;
            }
<#      }
    } #>
        } while (true);
    }

<# } #>
}
