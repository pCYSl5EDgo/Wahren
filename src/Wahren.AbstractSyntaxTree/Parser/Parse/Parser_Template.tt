<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Memory" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.Basic.dll" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.TextTemplateHelper.dll" #>
<#@ import namespace="Wahren.AbstractSyntaxTree" #>
<#@ import namespace="Wahren.AbstractSyntaxTree.TextTemplateHelper" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
namespace Wahren.AbstractSyntaxTree.Parser;

using Statement;

public static partial class Parser
{
<#
foreach (var node in NodeInfo.Nodes) {
    ElementInfo[] elements = node.Elements;
    var usageGroup = elements.MakeUsageGroup();
#>
    private static bool Parse<#= node.Name #>(ref Context context, ref Result result)
    {
        result.<#= node.Name #>NodeList.Add(new());
        ref var node = ref result.<#= node.Name #>NodeList.Last;
        ref var tokenList = ref result.TokenList;
        node.Kind = tokenList.LastIndex;
        if (!ParseNameAndSuperAndBracketLeft(ref context, ref result, ref node))
        {
            return false;
        }
<#  if (node.HasBlock) { #>
        ArrayPoolList<IBlockStatement> blockStack = new();
<#  } #>
<#  foreach (var (type, _) in usageGroup) { #>
        scoped ref var pair_<#= type #> = ref Unsafe.NullRef<<#= type #>?>();
<#  } #>
        ulong key = 0UL;
        do
        {
            if (!ReadUsefulToken(ref context, ref result))
            {
                result.ErrorAdd_BracketRightNotFound(node.Kind, node.Name);
                goto FALSE;
            }

            var currentIndex = tokenList.LastIndex;
            if (result.IsBracketRight(currentIndex))
            {
<#  if (node.HasBlock) { #>
                blockStack.Dispose();
<#  } #>
                node.BracketRight = currentIndex;
                return true;
            }

            if (!ReadToken(ref context, ref result))
            {
                result.ErrorAdd_UnexpectedEndOfFile_AssignmentOrParenLeftIsExpected();
                goto FALSE;
            }

            if (!result.IsAssign(tokenList.LastIndex))
            {
<#  if (node.HasBlock) { #>
                if (result.IsParenLeft(tokenList.LastIndex))
                {
                    if (Parse_RootBlock(ref context, ref result, currentIndex, ref node.Statements, ref blockStack))
                    {
                        continue;
                    }
                    goto FALSE;
                }
<#      if (node.Name == "Event") { #>
                else if (result.IsBracketLeft(tokenList.LastIndex) && result.GetSpan(currentIndex).SequenceEqual("battle"))
                {
                    NextStatement? nextStatement = null;
                    foreach (ref var statement in node.Statements)
                    {
                        if ((nextStatement = statement as NextStatement) is not null)
                        {
                            break;
                        }
                    }

                    if (nextStatement is null)
                    {
                        result.ErrorAdd_CoresspondingNextDoesNotExist(currentIndex);
                    }

                    var battleStatement = new BattleStatement(currentIndex, nextStatement);
                    tokenList.GetKind(currentIndex) = TokenKind.battle;
                    blockStack.Add(battleStatement);
                    node.Statements.Add(battleStatement);
                    var answer = Parse_Block(ref context, ref result, ref battleStatement.Statements, ref blockStack);
                    blockStack.RemoveLast();
                    if (answer)
                    {
                        continue;
                    }

                    goto FALSE;
                }
<#      } #>
<#  } #>
                result.ErrorAdd_UnexpectedOperatorToken(tokenList.LastIndex);
                goto FALSE;
            }

            if (!result.SplitElementPlain(currentIndex, out var span, out var variantSpan))
            {
                return false;
            }

            key = StringHashUtility.Calc(span);
            switch (span.Length)
            {
<#  foreach (var (len, items) in elements.MakeGroup()) { #>
                case <#= len #>:
                    switch (key)
                    {
<#      foreach (var (item, key, rest) in items) {
            var type = item.Type;
            var trailer = item.Name.GetCorrespondingTrailer(); #>
                        case 0x<#= key #>UL<# if (len == StringHashUtility.HashLengthMax + 1) { #> when span[StringHashUtility.HashLengthMax] == '<#= rest[0] #>'<# } else if (len > StringHashUtility.HashLengthMax + 1) { #> when span.Slice(StringHashUtility.HashLengthMax).SequenceEqual("<#= rest #>")<# } #>:
<#          if (item.VariantType == "") { #>
                            if (variantSpan.Length != 0)
                            {
                                result.ErrorAdd_VariantNotAllowed(node.Kind, currentIndex);
                            }
                            pair_<#= type #> = ref node.<#= item.Name.Escape() #>;
<#          } else { #>
                            pair_<#= type #> = ref node.<#= item.Name.Escape() #>.EnsureGet(variantSpan, ref result);
<#          } #>
                            goto <#= trailer #>;
<#      } #>
                    }
                    break;
<#  } #>
            }

            if (Parse_Discard(ref context, ref result, currentIndex, key))
            {
                result.ErrorAdd_UnexpectedElementName(node.Kind, currentIndex);
                continue;
            }
            else
            {
                goto FALSE;
            }

<# foreach (var (type, outers) in usageGroup) {
    foreach (var ((trailer, func), _) in outers) { #>
        <#= trailer #>:
            if (pair_<#= type #> is null)
            {
                pair_<#= type #> = new(currentIndex, span.Length, !variantSpan.IsEmpty);
                if (<#= func #>(ref context, ref result, pair_<#= type #>))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }

            result.ErrorAdd_MultipleAssignment(currentIndex);
            if (Parse_Discard_<#= trailer #>(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
<#  }
}#>
        } while (true);

    FALSE:
<#  if (node.HasBlock) { #>
        blockStack.Dispose();
<#  } #>
        return false;
    }
<#}#>
}
