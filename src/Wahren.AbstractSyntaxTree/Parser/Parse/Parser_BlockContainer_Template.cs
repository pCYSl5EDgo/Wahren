#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using System.Buffers.Binary;
using System.Runtime.InteropServices;

namespace Wahren.AbstractSyntaxTree.Parser;

using Statement;

public static partial class Parser
{
    private static bool ParseEvent(ref Context context, ref Result result, out bool canContinue)
    {
        result.EventNodeList.Add(new());
        ref var node = ref result.EventNodeList.Last;
        ref var tokenList = ref result.TokenList;
        node.Kind = tokenList.LastIndex;
        canContinue = false;
        if (!ParseNameAndSuperAndBracketLeft(ref context, ref result, ref node, ref result.EventSet))
        {
            return false;
        }

        var createErrorWarning = context.CreateError(DiagnosticSeverity.Warning);
        uint variant = uint.MaxValue;
        ref var source = ref result.Source;
        List<IBlockStatement> blockStack = new();
        ref var element_DEFAULT = ref Unsafe.NullRef<Pair_NullableString_NullableIntElement?>();
        ref var element_RAY = ref Unsafe.NullRef<Pair_NullableString_NullableInt_ArrayElement?>();
        ref var element_MEMBER = ref Unsafe.NullRef<Pair_NullableString_NullableInt_ArrayElement?>();
        ulong key = 0UL;
        do
        {
            if (!ReadUsefulToken(ref context, ref result))
            {
                result.ErrorAdd_BracketRightNotFound(node.Kind, node.Name);
                goto FALSE;
            }

            var currentIndex = tokenList.LastIndex;
            if (tokenList.Last.IsBracketRight(ref source))
            {
                node.BracketRight = currentIndex;
                blockStack.Dispose();
                canContinue = true;
                return true;
            }

            if (!ReadToken(ref context, ref result))
            {
                result.ErrorAdd_UnexpectedEndOfFile(tokenList.LastIndex, "'=' or '(' is expected but not found.");
                goto FALSE;
            }
            
            if (!tokenList.Last.IsAssign(ref source))
            {
                if (tokenList.Last.IsParenLeft(ref source))
                {
                    if (Parse_RootBlock(ref context, ref result, currentIndex, ref node.Statements, ref blockStack))
                    {
                        continue;
                    }

                    goto FALSE;
                }
                else if (tokenList.Last.IsBracketLeft(ref source) && result.GetSpan(currentIndex).SequenceEqual("battle"))
                {
                    NextStatement? nextStatement = null;
                    foreach (ref var statement in node.Statements)
                    {
                        if ((nextStatement = statement as NextStatement) is not null)
                        {
                            break;
                        }
                    }
                        
                    if (nextStatement is null)
                    {
                        result.ErrorList.Add(new("'battle{}' block does not have corresponding 'next()' statement.", tokenList[currentIndex].Range));
                    }

                    var battleStatement = new BattleStatement(currentIndex, nextStatement);
                    tokenList[currentIndex].Kind = TokenKind.battle;
                    blockStack.Add(battleStatement);
                    var answer = Parse_Block(ref context, ref result, ref battleStatement.Statements, ref blockStack);
                    blockStack.RemoveLast();
                    if (answer)
                    {
                        continue;
                    }
                        
                    goto FALSE;
                }
 
                   
                result.ErrorAdd_UnexpectedOperatorToken(tokenList.LastIndex, "'=' or '(' is expected but not found.");
                goto FALSE;
            }

            if (!result.SplitElement(currentIndex, out var span, out variant))
            {
                return false;
            }

            var byteSpan = MemoryMarshal.Cast<char, byte>(span);
            var originalLength = span.Length;
            switch (originalLength)
            {
                case 0: return false;
                case 1:
                    switch (span[0])
                    {
                        case 'w': element_DEFAULT = ref node.w.EnsureGet(variant); goto DEFAULT;
                        case 'h': element_DEFAULT = ref node.h.EnsureGet(variant); goto DEFAULT;
                    }
                    key = ((ulong)byteSpan[0]) | ((ulong)byteSpan[1] << 8);
                    span = Span<char>.Empty;
                    goto DISCARD;
                case 2:
                    key = BinaryPrimitives.ReadUInt32LittleEndian(byteSpan);
                    switch ((uint)key)
                    {
                        case 0x00670062U: element_DEFAULT = ref node.bg.EnsureGet(variant); goto DEFAULT;
                    }
                    span = Span<char>.Empty;
                    goto DISCARD;
                case 3:
                    key = BinaryPrimitives.ReadUInt32LittleEndian(byteSpan) | (((ulong)BinaryPrimitives.ReadUInt16LittleEndian(byteSpan.Slice(4))) << 32);
                    switch (key)
                    {
                        case 0x006700630062UL: element_DEFAULT = ref node.bcg.EnsureGet(variant); goto DEFAULT;
                        case 0x006D00670062UL: element_DEFAULT = ref node.bgm.EnsureGet(variant); goto DEFAULT;
                        case 0x00700061006DUL: element_DEFAULT = ref node.map.EnsureGet(variant); goto DEFAULT;
                    }
                    span = Span<char>.Empty;
                    goto DISCARD;
            }

            key = System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(byteSpan);
            span = span.Slice(4);
            switch (span.Length)
            {
                case 0:
                    switch (key)
                    {
                        case 0x0065006D0061006EUL when span.SequenceEqual(""): element_DEFAULT = ref node.name.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0065007A00690073UL when span.SequenceEqual(""): element_DEFAULT = ref node.size.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 1:
                    switch (key)
                    {
                        case 0x006E0069006C0062UL when span[0] == 'd': element_DEFAULT = ref node.blind.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006F006C006F0063UL when span[0] == 'r': element_RAY = ref node.color.EnsureGet(variant); goto RAY;                            
                        case 0x0063006F006C0062UL when span[0] == 'k': element_DEFAULT = ref node.block.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0069006D0069006CUL when span[0] == 't': element_DEFAULT = ref node.limit.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006C007400690074UL when span[0] == 'e': element_DEFAULT = ref node.title.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 2:
                    switch (key)
                    {
                        case 0x0074007300610063UL when span.SequenceEqual("le"): element_DEFAULT = ref node.castle.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0074006E00650063UL when span.SequenceEqual("er"): element_DEFAULT = ref node.center.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006C006100740069UL when span.SequenceEqual("ic"): element_DEFAULT = ref node.italic.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0064006E00610068UL when span.SequenceEqual("le"): element_DEFAULT = ref node.handle.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0062006D0065006DUL when span.SequenceEqual("er"): element_MEMBER = ref node.member.EnsureGet(variant); goto MEMBER;                            
                        case 0x006F006300650073UL when span.SequenceEqual("nd"): element_DEFAULT = ref node.second.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0075006C006F0076UL when span.SequenceEqual("me"): element_DEFAULT = ref node.volume.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 3:
                    switch (key)
                    {
                        case 0x0066005F00670062UL when span.SequenceEqual("ade"): element_DEFAULT = ref node.bg_fade.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 4:
                    switch (key)
                    {
                        case 0x0070007300690064UL when span.SequenceEqual("erse"): element_DEFAULT = ref node.disperse.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 5:
                    switch (key)
                    {
                        case 0x006B007200610064UL when span.SequenceEqual("_fade"): element_DEFAULT = ref node.dark_fade.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 6:
                    switch (key)
                    {
                        case 0x006B007200610064UL when span.SequenceEqual("_alpha"): element_DEFAULT = ref node.dark_alpha.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 7:
                    switch (key)
                    {
                        case 0x0069005F00670062UL when span.SequenceEqual("nterval"): element_DEFAULT = ref node.bg_interval.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006B007200610064UL when span.SequenceEqual("_fade_e"): element_DEFAULT = ref node.dark_fade_e.EnsureGet(variant); goto DEFAULT;                            
                        case 0x007400730061006CUL when span.SequenceEqual("_second"): element_DEFAULT = ref node.last_second.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 9:
                    switch (key)
                    {
                        case 0x0074007300610063UL when span.SequenceEqual("le_battle"): element_DEFAULT = ref node.castle_battle.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
            }

        DISCARD:
            if (Parse_Discard(ref context, ref result, currentIndex, span, key))
            {
                if (createErrorWarning)
                {
                    result.WarningAdd_UnexpectedElementName(node.Kind, currentIndex);
                }
                continue;
            }
            else
            {
                goto FALSE;
            }

        DEFAULT:
            if (element_DEFAULT is null)
            {
                element_DEFAULT = new(currentIndex);
                element_DEFAULT.ElementScenarioId = variant;
                element_DEFAULT.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_DEFAULT.ElementKeyRange.Line = start.Line;
                    element_DEFAULT.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_DEFAULT(ref context, ref result, element_DEFAULT))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_DEFAULT(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        RAY:
            if (element_RAY is null)
            {
                element_RAY = new(currentIndex);
                element_RAY.ElementScenarioId = variant;
                element_RAY.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_RAY.ElementKeyRange.Line = start.Line;
                    element_RAY.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_RAY(ref context, ref result, element_RAY))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_RAY(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        MEMBER:
            if (element_MEMBER is null)
            {
                element_MEMBER = new(currentIndex);
                element_MEMBER.ElementScenarioId = variant;
                element_MEMBER.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_MEMBER.ElementKeyRange.Line = start.Line;
                    element_MEMBER.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_MEMBER(ref context, ref result, element_MEMBER))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_MEMBER(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        } while (true);

    FALSE:
        blockStack.Dispose();
        return false;
    }
    private static bool ParseScenario(ref Context context, ref Result result, out bool canContinue)
    {
        result.ScenarioNodeList.Add(new());
        ref var node = ref result.ScenarioNodeList.Last;
        ref var tokenList = ref result.TokenList;
        node.Kind = tokenList.LastIndex;
        canContinue = false;
        if (!ParseNameAndSuperAndBracketLeft(ref context, ref result, ref node, ref result.ScenarioSet))
        {
            return false;
        }

        var createErrorWarning = context.CreateError(DiagnosticSeverity.Warning);
        uint variant = uint.MaxValue;
        ref var source = ref result.Source;
        List<IBlockStatement> blockStack = new();
        ref var element_DEFAULT = ref Unsafe.NullRef<Pair_NullableString_NullableIntElement?>();
        ref var element_RAY = ref Unsafe.NullRef<Pair_NullableString_NullableInt_ArrayElement?>();
        ref var element_MEMBER = ref Unsafe.NullRef<Pair_NullableString_NullableInt_ArrayElement?>();
        ref var element_TEXT = ref Unsafe.NullRef<StringElement?>();
        ref var element_ROAM = ref Unsafe.NullRef<StringArrayElement?>();
        ref var element_OFFSET = ref Unsafe.NullRef<StringArrayElement?>();
        ulong key = 0UL;
        do
        {
            if (!ReadUsefulToken(ref context, ref result))
            {
                result.ErrorAdd_BracketRightNotFound(node.Kind, node.Name);
                goto FALSE;
            }

            var currentIndex = tokenList.LastIndex;
            if (tokenList.Last.IsBracketRight(ref source))
            {
                node.BracketRight = currentIndex;
                blockStack.Dispose();
                canContinue = true;
                return true;
            }

            if (!ReadToken(ref context, ref result))
            {
                result.ErrorAdd_UnexpectedEndOfFile(tokenList.LastIndex, "'=' or '(' is expected but not found.");
                goto FALSE;
            }
            
            if (!tokenList.Last.IsAssign(ref source))
            {
                if (tokenList.Last.IsParenLeft(ref source))
                {
                    if (Parse_RootBlock(ref context, ref result, currentIndex, ref node.Statements, ref blockStack))
                    {
                        continue;
                    }

                    goto FALSE;
                }
 
                   
                result.ErrorAdd_UnexpectedOperatorToken(tokenList.LastIndex, "'=' or '(' is expected but not found.");
                goto FALSE;
            }

            if (!result.SplitElement(currentIndex, out var span, out variant))
            {
                return false;
            }

            var byteSpan = MemoryMarshal.Cast<char, byte>(span);
            var originalLength = span.Length;
            switch (originalLength)
            {
                case 0: return false;
                case 1:
                    key = ((ulong)byteSpan[0]) | ((ulong)byteSpan[1] << 8);
                    span = Span<char>.Empty;
                    goto DISCARD;
                case 2:
                    key = BinaryPrimitives.ReadUInt32LittleEndian(byteSpan);
                    span = Span<char>.Empty;
                    goto DISCARD;
                case 3:
                    key = BinaryPrimitives.ReadUInt32LittleEndian(byteSpan) | (((ulong)BinaryPrimitives.ReadUInt16LittleEndian(byteSpan.Slice(4))) << 32);
                    switch (key)
                    {
                        case 0x00700061006DUL: element_DEFAULT = ref node.map.EnsureGet(variant); goto DEFAULT;
                    }
                    span = Span<char>.Empty;
                    goto DISCARD;
            }

            key = System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(byteSpan);
            span = span.Slice(4);
            switch (span.Length)
            {
                case 0:
                    switch (key)
                    {
                        case 0x0065006D0061006EUL when span.SequenceEqual(""): element_DEFAULT = ref node.name.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0070006C00650068UL when span.SequenceEqual(""): element_DEFAULT = ref node.help.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0065006E006F007AUL when span.SequenceEqual(""): element_DEFAULT = ref node.zone.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0069006C006F0070UL when span.SequenceEqual(""): element_RAY = ref node.poli.EnsureGet(variant); goto RAY;                            
                        case 0x0070006D00610063UL when span.SequenceEqual(""): element_RAY = ref node.camp.EnsureGet(variant); goto RAY;                            
                        case 0x006D006500740069UL when span.SequenceEqual(""): element_MEMBER = ref node.item.EnsureGet(variant); goto MEMBER;                            
                        case 0x0074007800650074UL when span.SequenceEqual(""): element_TEXT = ref node.text.EnsureGet(variant); goto TEXT;                            
                        case 0x006D0061006F0072UL when span.SequenceEqual(""): element_ROAM = ref node.roam.EnsureGet(variant); goto ROAM;                            
                        case 0x0074006F00700073UL when span.SequenceEqual(""): element_ROAM = ref node.spot.EnsureGet(variant); goto ROAM;                            
                    }
                    break;
                case 1:
                    switch (key)
                    {
                        case 0x006E0069006C0062UL when span[0] == 'd': element_DEFAULT = ref node.blind.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006C0072006F0077UL when span[0] == 'd': element_DEFAULT = ref node.world.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0068006700690066UL when span[0] == 't': element_DEFAULT = ref node.fight.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0074007200610070UL when span[0] == 'y': element_DEFAULT = ref node.party.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span[0] == '0': element_DEFAULT = ref node.item0.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span[0] == '1': element_DEFAULT = ref node.item1.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span[0] == '2': element_DEFAULT = ref node.item2.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span[0] == '3': element_DEFAULT = ref node.item3.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span[0] == '4': element_DEFAULT = ref node.item4.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span[0] == '5': element_DEFAULT = ref node.item5.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span[0] == '6': element_DEFAULT = ref node.item6.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0074006C0075006DUL when span[0] == 'i': element_RAY = ref node.multi.EnsureGet(variant); goto RAY;                            
                        case 0x00650077006F0070UL when span[0] == 'r': element_ROAM = ref node.power.EnsureGet(variant); goto ROAM;                            
                    }
                    break;
                case 2:
                    switch (key)
                    {
                        case 0x0072005F00730077UL when span.SequenceEqual("ed"): element_DEFAULT = ref node.ws_red.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0063007300690064UL when span.SequenceEqual("us"): element_DEFAULT = ref node.discus.EnsureGet(variant); goto DEFAULT;                            
                        case 0x00620061006E0065UL when span.SequenceEqual("le"): element_DEFAULT = ref node.enable.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006F007A006F006EUL when span.SequenceEqual("ne"): element_DEFAULT = ref node.nozone.EnsureGet(variant); goto DEFAULT;                            
                        case 0x007300660066006FUL when span.SequenceEqual("et"): element_OFFSET = ref node.offset.EnsureGet(variant); goto OFFSET;                            
                    }
                    break;
                case 3:
                    switch (key)
                    {
                        case 0x0062005F00730077UL when span.SequenceEqual("lue"): element_DEFAULT = ref node.ws_blue.EnsureGet(variant); goto DEFAULT;                            
                        case 0x00740072006F0073UL when span.SequenceEqual("key"): element_DEFAULT = ref node.sortkey.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 4:
                    switch (key)
                    {
                        case 0x0067005F00730077UL when span.SequenceEqual("reen"): element_DEFAULT = ref node.ws_green.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0061005F00730077UL when span.SequenceEqual("lpha"): element_DEFAULT = ref node.ws_alpha.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006C005F00730077UL when span.SequenceEqual("ight"): element_DEFAULT = ref node.ws_light.EnsureGet(variant); goto DEFAULT;                            
                        case 0x005F00780061006DUL when span.SequenceEqual("unit"): element_DEFAULT = ref node.max_unit.EnsureGet(variant); goto DEFAULT;                            
                        case 0x00610063006F006CUL when span.SequenceEqual("te_x"): element_DEFAULT = ref node.locate_x.EnsureGet(variant); goto DEFAULT;                            
                        case 0x00610063006F006CUL when span.SequenceEqual("te_y"): element_DEFAULT = ref node.locate_y.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0069006C006F0070UL when span.SequenceEqual("tics"): element_DEFAULT = ref node.politics.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006E006900610067UL when span.SequenceEqual("_per"): element_DEFAULT = ref node.gain_per.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0072005F0079006DUL when span.SequenceEqual("ange"): element_DEFAULT = ref node.my_range.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 5:
                    switch (key)
                    {
                        case 0x0065007600610073UL when span.SequenceEqual("_name"): element_DEFAULT = ref node.save_name.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006F007400630061UL when span.SequenceEqual("r_per"): element_DEFAULT = ref node.actor_per.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span.SequenceEqual("_sale"): element_MEMBER = ref node.item_sale.EnsureGet(variant); goto MEMBER;                            
                        case 0x006D006500740069UL when span.SequenceEqual("_hold"): element_MEMBER = ref node.item_hold.EnsureGet(variant); goto MEMBER;                            
                    }
                    break;
                case 6:
                    switch (key)
                    {
                        case 0x0069006700650062UL when span.SequenceEqual("n_text"): element_DEFAULT = ref node.begin_text.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0065007300610062UL when span.SequenceEqual("_level"): element_DEFAULT = ref node.base_level.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006D006500740069UL when span.SequenceEqual("_limit"): element_DEFAULT = ref node.item_limit.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 7:
                    switch (key)
                    {
                        case 0x0069006100720074UL when span.SequenceEqual("ning_up"): element_DEFAULT = ref node.training_up.EnsureGet(variant); goto DEFAULT;                            
                        case 0x00650077006F0070UL when span.SequenceEqual("r_order"): element_DEFAULT = ref node.power_order.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0061005F006F006EUL when span.SequenceEqual("utosave"): element_DEFAULT = ref node.no_autosave.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 8:
                    switch (key)
                    {
                        case 0x005F007200610077UL when span.SequenceEqual("capacity"): element_DEFAULT = ref node.war_capacity.EnsureGet(variant); goto DEFAULT;                            
                        case 0x006500680079006DUL when span.SequenceEqual("lp_range"): element_DEFAULT = ref node.myhelp_range.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 9:
                    switch (key)
                    {
                        case 0x00620061006E0065UL when span.SequenceEqual("le_select"): element_DEFAULT = ref node.enable_select.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0074006F00700073UL when span.SequenceEqual("_capacity"): element_DEFAULT = ref node.spot_capacity.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0070007000750073UL when span.SequenceEqual("ort_range"): element_DEFAULT = ref node.support_range.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0073006E006F006DUL when span.SequenceEqual("ter_level"): element_DEFAULT = ref node.monster_level.EnsureGet(variant); goto DEFAULT;                            
                        case 0x00620061006E0065UL when span.SequenceEqual("le_talent"): element_DEFAULT = ref node.enable_talent.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 10:
                    switch (key)
                    {
                        case 0x006C005F00730077UL when span.SequenceEqual("ight_range"): element_DEFAULT = ref node.ws_light_range.EnsureGet(variant); goto DEFAULT;                            
                        case 0x0061006600650064UL when span.SequenceEqual("ult_ending"): element_DEFAULT = ref node.default_ending.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
            }

        DISCARD:
            if (Parse_Discard(ref context, ref result, currentIndex, span, key))
            {
                if (createErrorWarning)
                {
                    result.WarningAdd_UnexpectedElementName(node.Kind, currentIndex);
                }
                continue;
            }
            else
            {
                goto FALSE;
            }

        DEFAULT:
            if (element_DEFAULT is null)
            {
                element_DEFAULT = new(currentIndex);
                element_DEFAULT.ElementScenarioId = variant;
                element_DEFAULT.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_DEFAULT.ElementKeyRange.Line = start.Line;
                    element_DEFAULT.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_DEFAULT(ref context, ref result, element_DEFAULT))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_DEFAULT(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        RAY:
            if (element_RAY is null)
            {
                element_RAY = new(currentIndex);
                element_RAY.ElementScenarioId = variant;
                element_RAY.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_RAY.ElementKeyRange.Line = start.Line;
                    element_RAY.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_RAY(ref context, ref result, element_RAY))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_RAY(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        MEMBER:
            if (element_MEMBER is null)
            {
                element_MEMBER = new(currentIndex);
                element_MEMBER.ElementScenarioId = variant;
                element_MEMBER.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_MEMBER.ElementKeyRange.Line = start.Line;
                    element_MEMBER.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_MEMBER(ref context, ref result, element_MEMBER))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_MEMBER(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        TEXT:
            if (element_TEXT is null)
            {
                element_TEXT = new(currentIndex);
                element_TEXT.ElementScenarioId = variant;
                element_TEXT.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_TEXT.ElementKeyRange.Line = start.Line;
                    element_TEXT.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_TEXT(ref context, ref result, element_TEXT))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_TEXT(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        ROAM:
            if (element_ROAM is null)
            {
                element_ROAM = new(currentIndex);
                element_ROAM.ElementScenarioId = variant;
                element_ROAM.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_ROAM.ElementKeyRange.Line = start.Line;
                    element_ROAM.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_ROAM(ref context, ref result, element_ROAM))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_ROAM(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        OFFSET:
            if (element_OFFSET is null)
            {
                element_OFFSET = new(currentIndex);
                element_OFFSET.ElementScenarioId = variant;
                element_OFFSET.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_OFFSET.ElementKeyRange.Line = start.Line;
                    element_OFFSET.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_OFFSET(ref context, ref result, element_OFFSET))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_OFFSET(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        } while (true);

    FALSE:
        blockStack.Dispose();
        return false;
    }
    private static bool ParseStory(ref Context context, ref Result result, out bool canContinue)
    {
        result.StoryNodeList.Add(new());
        ref var node = ref result.StoryNodeList.Last;
        ref var tokenList = ref result.TokenList;
        node.Kind = tokenList.LastIndex;
        canContinue = false;
        if (!ParseNameAndSuperAndBracketLeft(ref context, ref result, ref node, ref result.StorySet))
        {
            return false;
        }

        var createErrorWarning = context.CreateError(DiagnosticSeverity.Warning);
        uint variant = uint.MaxValue;
        ref var source = ref result.Source;
        List<IBlockStatement> blockStack = new();
        ref var element_OFFSET = ref Unsafe.NullRef<StringArrayElement?>();
        ref var element_DEFAULT = ref Unsafe.NullRef<Pair_NullableString_NullableIntElement?>();
        ulong key = 0UL;
        do
        {
            if (!ReadUsefulToken(ref context, ref result))
            {
                result.ErrorAdd_BracketRightNotFound(node.Kind, node.Name);
                goto FALSE;
            }

            var currentIndex = tokenList.LastIndex;
            if (tokenList.Last.IsBracketRight(ref source))
            {
                node.BracketRight = currentIndex;
                blockStack.Dispose();
                canContinue = true;
                return true;
            }

            if (!ReadToken(ref context, ref result))
            {
                result.ErrorAdd_UnexpectedEndOfFile(tokenList.LastIndex, "'=' or '(' is expected but not found.");
                goto FALSE;
            }
            
            if (!tokenList.Last.IsAssign(ref source))
            {
                if (tokenList.Last.IsParenLeft(ref source))
                {
                    if (Parse_RootBlock(ref context, ref result, currentIndex, ref node.Statements, ref blockStack))
                    {
                        continue;
                    }

                    goto FALSE;
                }
 
                   
                result.ErrorAdd_UnexpectedOperatorToken(tokenList.LastIndex, "'=' or '(' is expected but not found.");
                goto FALSE;
            }

            if (!result.SplitElement(currentIndex, out var span, out variant))
            {
                return false;
            }

            var byteSpan = MemoryMarshal.Cast<char, byte>(span);
            var originalLength = span.Length;
            switch (originalLength)
            {
                case 0: return false;
                case 1:
                    key = ((ulong)byteSpan[0]) | ((ulong)byteSpan[1] << 8);
                    span = Span<char>.Empty;
                    goto DISCARD;
                case 2:
                    key = BinaryPrimitives.ReadUInt32LittleEndian(byteSpan);
                    span = Span<char>.Empty;
                    goto DISCARD;
                case 3:
                    key = BinaryPrimitives.ReadUInt32LittleEndian(byteSpan) | (((ulong)BinaryPrimitives.ReadUInt16LittleEndian(byteSpan.Slice(4))) << 32);
                    span = Span<char>.Empty;
                    goto DISCARD;
            }

            key = System.Buffers.Binary.BinaryPrimitives.ReadUInt64LittleEndian(byteSpan);
            span = span.Slice(4);
            switch (span.Length)
            {
                case 1:
                    switch (key)
                    {
                        case 0x0068006700690066UL when span[0] == 't': element_DEFAULT = ref node.fight.EnsureGet(variant); goto DEFAULT;                            
                    }
                    break;
                case 2:
                    switch (key)
                    {
                        case 0x0065006900720066UL when span.SequenceEqual("nd"): element_OFFSET = ref node.friend.EnsureGet(variant); goto OFFSET;                            
                    }
                    break;
            }

        DISCARD:
            if (Parse_Discard(ref context, ref result, currentIndex, span, key))
            {
                if (createErrorWarning)
                {
                    result.WarningAdd_UnexpectedElementName(node.Kind, currentIndex);
                }
                continue;
            }
            else
            {
                goto FALSE;
            }

        OFFSET:
            if (element_OFFSET is null)
            {
                element_OFFSET = new(currentIndex);
                element_OFFSET.ElementScenarioId = variant;
                element_OFFSET.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_OFFSET.ElementKeyRange.Line = start.Line;
                    element_OFFSET.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_OFFSET(ref context, ref result, element_OFFSET))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_OFFSET(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        DEFAULT:
            if (element_DEFAULT is null)
            {
                element_DEFAULT = new(currentIndex);
                element_DEFAULT.ElementScenarioId = variant;
                element_DEFAULT.ElementKeyRange.Length = (uint)originalLength;
                {
                    ref var start = ref tokenList[currentIndex].Range.StartInclusive;
                    element_DEFAULT.ElementKeyRange.Line = start.Line;
                    element_DEFAULT.ElementKeyRange.Offset = start.Offset;
                }
                if (Parse_Element_DEFAULT(ref context, ref result, element_DEFAULT))
                {
                    continue;
                }
                else
                {
                    goto FALSE;
                }
            }
            
            if (createErrorWarning)
            {
                result.WarningAdd_MultipleAssignment(currentIndex);
            }

            if (Parse_Discard_DEFAULT(ref context, ref result, currentIndex))
            {
                continue;
            }
            else
            {
                goto FALSE;
            }
        } while (true);

    FALSE:
        blockStack.Dispose();
        return false;
    }
}
