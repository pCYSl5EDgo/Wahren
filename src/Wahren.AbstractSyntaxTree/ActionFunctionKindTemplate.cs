#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
namespace Wahren.AbstractSyntaxTree;

public enum FunctionKind : uint
{
    isSelect,
    isWhoDead,
    isGameOver,
    has,
    inVar,
    yet,
    rand,
    count,
    amount,
    equal,
    eqVar,
    isMap,
    isNpc,
    isNPM,
    isWar,
    ptest,
    conVar,
    inSpot,
    isDead,
    isDone,
    isJoin,
    isNext,
    reckon,
    getLife,
    getMode,
    getTime,
    getTurn,
    inPower,
    isAlive,
    isEnemy,
    isEvent,
    isPeace,
    isWorld,
    countVar,
    getLimit,
    inBattle,
    isActive,
    isArbeit,
    isEnable,
    isFriend,
    isInvade,
    isLeader,
    isLeague,
    isMaster,
    isPlayer,
    isPostIn,
    isRoamer,
    isTalent,
    isVassal,
    countGain,
    countPost,
    countSpot,
    countUnit,
    isAllDead,
    isAnyDead,
    isComTurn,
    isDungeon,
    isNewTurn,
    isNowSpot,
    istoWorld,
    countForce,
    countMoney,
    countPower,
    countSkill,
    getLifePer,
    inRoamSpot,
    isInterval,
    isRedAlive,
    isSameArmy,
    isScenario,
    isWatching,
    getDistance,
    getRedCount,
    isBlueAlive,
    isGameClear,
    isPlayerEnd,
    getBlueCount,
    isPlayerTurn,
    isRoamLeader,
    getClearFloor,
    isWorldMusicStop,
    None = uint.MaxValue,
}

public static class FunctionKindHelper
{
    public static FunctionKind Convert(ReadOnlySpan<char> key)
    {
        if (key.Length < 3 || key.Length > 16)
        {
            return FunctionKind.None;
        }

        switch (StringHashUtility.Calc(key))
        {
            case 0x0000019F0A3B3538UL:
                return FunctionKind.isSelect;
            case 0x00003BFEEB0191B1UL:
                return FunctionKind.isWhoDead;
            case 0x0008AA721A81A6BCUL:
                return FunctionKind.isGameOver;
            case 0x0000000000005C77UL:
                return FunctionKind.has;
            case 0x0000000002152F21UL:
                return FunctionKind.inVar;
            case 0x000000000000B7F5UL:
                return FunctionKind.yet;
            case 0x0000000000151729UL:
                return FunctionKind.rand;
            case 0x00000000016A5BE2UL:
                return FunctionKind.count;
            case 0x000000002BDD619EUL:
                return FunctionKind.amount;
            case 0x0000000001A51795UL:
                return FunctionKind.equal;
            case 0x0000000001A51CF4UL:
                return FunctionKind.eqVar;
            case 0x000000000218DC4FUL:
                return FunctionKind.isMap;
            case 0x000000000218E3C6UL:
                return FunctionKind.isNpc;
            case 0x000000000218E3D0UL:
                return FunctionKind.isNPM;
            case 0x00000000021911CBUL:
                return FunctionKind.isWar;
            case 0x0000000002E1A899UL:
                return FunctionKind.ptest;
            case 0x00000000345A06C3UL:
                return FunctionKind.conVar;
            case 0x000000004D0DCE13UL:
                return FunctionKind.inSpot;
            case 0x000000004D90F5ECUL:
                return FunctionKind.isDead;
            case 0x000000004D912D48UL:
                return FunctionKind.isDone;
            case 0x000000004D95CFC6UL:
                return FunctionKind.isJoin;
            case 0x000000004D98B3F1UL:
                return FunctionKind.isNext;
            case 0x000000007132E684UL:
                return FunctionKind.reckon;
            case 0x00000009CC09751FUL:
                return FunctionKind.getLife;
            case 0x00000009CC0A5AC8UL:
                return FunctionKind.getMode;
            case 0x00000009CC0FA50AUL:
                return FunctionKind.getTime;
            case 0x00000009CC0FE5F8UL:
                return FunctionKind.getTurn;
            case 0x0000000B22A860C7UL:
                return FunctionKind.inPower;
            case 0x0000000B35A356C4UL:
                return FunctionKind.isAlive;
            case 0x0000000B36172FA5UL:
                return FunctionKind.isEnemy;
            case 0x0000000B361D5EADUL:
                return FunctionKind.isEvent;
            case 0x0000000B374AB651UL:
                return FunctionKind.isPeace;
            case 0x0000000B381AFBBFUL:
                return FunctionKind.isWorld;
            case 0x000001181186E36EUL:
                return FunctionKind.countVar;
            case 0x0000016A7D5E139BUL:
                return FunctionKind.getLimit;
            case 0x0000019BC6E625BFUL:
                return FunctionKind.inBattle;
            case 0x0000019EBFA26758UL:
                return FunctionKind.isActive;
            case 0x0000019EC1415CB7UL:
                return FunctionKind.isArbeit;
            case 0x0000019ED1568EBFUL:
                return FunctionKind.isEnable;
            case 0x0000019ED5F14C94UL:
                return FunctionKind.isFriend;
            case 0x0000019EE1EF2EB3UL:
                return FunctionKind.isInvade;
            case 0x0000019EED43F3D5UL:
                return FunctionKind.isLeader;
            case 0x0000019EED440623UL:
                return FunctionKind.isLeague;
            case 0x0000019EF101EA00UL:
                return FunctionKind.isMaster;
            case 0x0000019EFE94FE0DUL:
                return FunctionKind.isPlayer;
            case 0x0000019EFEF8983DUL:
                return FunctionKind.isPostIn;
            case 0x0000019F072EBE5EUL:
                return FunctionKind.isRoamer;
            case 0x0000019F0DEAEDE0UL:
                return FunctionKind.isTalent;
            case 0x0000019F1634D58AUL:
                return FunctionKind.isVassal;
            case 0x0000287A887345BDUL:
                return FunctionKind.countGain;
            case 0x0000287A887A86D8UL:
                return FunctionKind.countPost;
            case 0x0000287A887CDD34UL:
                return FunctionKind.countSpot;
            case 0x0000287A887E5D5EUL:
                return FunctionKind.countUnit;
            case 0x00003BF1D6C2E0ECUL:
                return FunctionKind.isAllDead;
            case 0x00003BF1E07ADAD3UL:
                return FunctionKind.isAnyDead;
            case 0x00003BF3152E41CDUL:
                return FunctionKind.isComTurn;
            case 0x00003BF3C6FAFA4DUL:
                return FunctionKind.isDungeon;
            case 0x00003BF97F2FD788UL:
                return FunctionKind.isNewTurn;
            case 0x00003BF9A88402D7UL:
                return FunctionKind.isNowSpot;
            case 0x00003BFD3E143A4CUL:
                return FunctionKind.istoWorld;
            case 0x0005D9B5B8977C0EUL:
                return FunctionKind.countForce;
            case 0x0005D9B5B95F959FUL:
                return FunctionKind.countMoney;
            case 0x0005D9B5B9B5908CUL:
                return FunctionKind.countPower;
            case 0x0005D9B5BA07FA0AUL:
                return FunctionKind.countSkill;
            case 0x000792786B4B7E95UL:
                return FunctionKind.getLifePer;
            case 0x00089B74588F7142UL:
                return FunctionKind.inRoamSpot;
            case 0x0008AAA6304A17DBUL:
                return FunctionKind.isInterval;
            case 0x0008AB677AC19F7AUL:
                return FunctionKind.isRedAlive;
            case 0x0008AB7B57089D0DUL:
                return FunctionKind.isSameArmy;
            case 0x0008AB7C68D4E7D2UL:
                return FunctionKind.isScenario;
            case 0x0008ABD3DD49542FUL:
                return FunctionKind.isWatching;
            case 0x01182AB6E63A4C22UL:
                return FunctionKind.getDistance;
            case 0x01182BE9B3FCDE63UL:
                return FunctionKind.getRedCount;
            case 0x0140937CAC511ED4UL:
                return FunctionKind.isBlueAlive;
            case 0x0140A27DD35E30E4UL:
                return FunctionKind.isGameClear;
            case 0x0140C02A6E1FA077UL:
                return FunctionKind.isPlayerEnd;
            case 0x287E264EE979DAD1UL:
                return FunctionKind.getBlueCount;
            case 0x2E5BC621EA9DF0B2UL:
                return FunctionKind.isPlayerTurn;
            case 0x2E5CBC1671D4005CUL:
                return FunctionKind.isRoamLeader;
            case 0x287E29771BD04727UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'R':
                    case 'r':
                        return FunctionKind.getClearFloor;
                }
                break;
            case 0x2E5F0C8CD9EFC8E9UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000001642D2UL)
                {
                    return FunctionKind.isWorldMusicStop;
                }
                break;
        }

        return FunctionKind.None;
    }
}

public enum ActionKind : uint
{
    @if,
    rif,
    @while,
    next,
    @return,
    @break,
    @continue,
    vc,
    play,
    ppl1,
    citom,
    setbcg,
    showCamp,
    clickWait,
    worldskin,
    darkness_off,
    doGameEnding,
    storeDeath,
    pushDeath,
    setPowerHome,
    msg,
    msg2,
    talk,
    talk2,
    chat,
    chat2,
    dialog,
    dialogF,
    select,
    choice,
    exit,
    image,
    image2,
    showImage,
    hideImage,
    face,
    face2,
    showFace,
    hideFace,
    picture,
    picture2,
    showPict,
    showPicture,
    hidePicture,
    stop,
    bg,
    add,
    div,
    mod,
    mul,
    per,
    set,
    sub,
    win,
    addv,
    call,
    font,
    save,
    setv,
    subv,
    wait,
    zoom,
    clear,
    erase,
    @event,
    focus,
    fontc,
    gread,
    gwrite,
    index,
    storeIndex,
    storeIndexVar,
    pushv,
    setPM,
    setud,
    storeud,
    shake,
    title,
    addstr,
    addVar,
    fadein,
    locate,
    playSE,
    scroll,
    setVar,
    shadow,
    subVar,
    title2,
    volume,
    addCapa,
    addGain,
    addItem,
    addSpot,
    addUnit,
    doskill,
    fadeout,
    loopBGM,
    minimap,
    playBGM,
    pushCon,
    pushSex,
    pushVar,
    routine,
    scroll2,
    setCapa,
    setDone,
    setGain,
    shuffle,
    stopBGM,
    storePM,
    addDiplo,
    levelup,
    addLevel,
    addLimit,
    addLoyal,
    addMoney,
    addPower,
    addSkill,
    addTroop,
    stopTroop,
    addTrust,
    aimTroop,
    clearVar,
    darkness,
    exitItem,
    hideLink,
    hideSpot,
    linkSpot,
    openGoal,
    pushCapa,
    pushGain,
    pushItem,
    pushRand,
    pushRank,
    pushSpot,
    pushTurn,
    roamUnit,
    roamUnit2,
    setDiplo,
    setLevel,
    setLimit,
    setMoney,
    setTruce,
    showSpot,
    spotmark,
    showSpotMark,
    hideSpotMark,
    hideEscape,
    showParty,
    addCastle,
    addFriend,
    addMerits,
    addSkill2,
    addStatus,
    changeMap,
    closeGoal,
    ctrlTroop,
    entryItem,
    equipItem,
    eraseItem,
    eraseUnit,
    formTroop,
    freeTroop,
    haltTroop,
    hideBlind,
    hideChara,
    moveTroop,
    moveTroopFix,
    smoveTroop,
    smoveTroopFix,
    playWorld,
    pushDiplo,
    pushForce,
    pushLevel,
    pushLimit,
    pushLoyal,
    pushMoney,
    pushRand2,
    pushTrain,
    pushTrust,
    resetTime,
    resetZone,
    setArbeit,
    setCastle,
    setLeague,
    setStatus,
    showBlind,
    showChara,
    terminate,
    backScroll,
    changeRace,
    endingRoll,
    erasePower,
    eraseSkill,
    eraseUnit2,
    eraseTroop,
    linkEscape,
    playBattle,
    pushCastle,
    pushMerits,
    pushStatus,
    reloadMenu,
    removeSpot,
    resetTruce,
    setDungeon,
    shiftTroop,
    shuffleVar,
    skillTroop,
    sleepTroop,
    speedTroop,
    unionPower,
    activeTroop,
    addTraining,
    battleEvent,
    changeClass,
    choiceTitle,
    eraseFriend,
    pushSpotPos,
    pushTrainUp,
    removeSkill,
    removeTroop,
    resetLeague,
    scrollSpeed,
    setTraining,
    shiftTroop2,
    showDungeon,
    unctrlTroop,
    addBaseLevel,
    changeCastle,
    changeMaster,
    changePlayer,
    retreatTroop,
    reverseChara,
    setBaseLevel,
    setGameClear,
    showPolitics,
    storeAllSpot,
    addPowerMerce,
    addPowerStaff,
    addPowerMerce2,
    addPowerStaff2,
    addTrainingUp,
    changeDungeon,
    pushBaseLevel,
    setEnemyPower,
    setTrainingUp,
    setWorldMusic,
    storeAllPower,
    storeComPower,
    storeNextSpot,
    storeNowPower,
    storeRectUnit,
    storeSkillset,
    storeTodoUnit,
    changePowerFix,
    eraseUnitTroop,
    pushBattleHome,
    pushBattleRect,
    pushCountPower,
    storeAliveUnit,
    storeAllTalent,
    changePowerFlag,
    changePowerName,
    changeSpotImage,
    erasePowerMerce,
    erasePowerStaff,
    resetEnemyPower,
    resetWorldMusic,
    setDungeonFloor,
    storeBattleSpot,
    storePlayerUnit,
    storeRaceOfUnit,
    storeSpotOfUnit,
    storeUnitOfSpot,
    storeAttackPower,
    storeClassOfUnit,
    storeNeutralSpot,
    storePlayerPower,
    storePowerOfSpot,
    storePowerOfUnit,
    storeSkillOfUnit,
    storeSpotOfPower,
    storeTalentPower,
    storeUnitOfPower,
    clearBattleRecord,
    storeDefensePower,
    storeLeaderOfSpot,
    storeMasterOfUnit,
    storeMemberOfUnit,
    storePowerOfForce,
    storeSpotOfBattle,
    storeLeaderOfPower,
    storeMasterOfPower,
    storePowerOfAttack,
    storeNonPlayerPower,
    storePowerOfDefense,
    storeRoamUnitOfSpot,
    storeBaseClassOfUnit,
    None = uint.MaxValue,
}

public static class ActionKindHelper
{
    public static ActionKind Convert(ReadOnlySpan<char> key)
    {
        if (key.Length < 2 || key.Length > 20)
        {
            return ActionKind.None;
        }

        switch (StringHashUtility.Calc(key))
        {
            case 0x00000000000002A9UL:
                return ActionKind.@if;
            case 0x000000000000930CUL:
                return ActionKind.rif;
            case 0x0000000003A0A526UL:
                return ActionKind.@while;
            case 0x000000000012169BUL:
                return ActionKind.next;
            case 0x000000007140401AUL:
                return ActionKind.@return;
            case 0x00000000014FBD0EUL:
                return ActionKind.@break;
            case 0x00000117F53B14D1UL:
                return ActionKind.@continue;
            case 0x0000000000000487UL:
                return ActionKind.vc;
            case 0x000000000013C476UL:
                return ActionKind.play;
            case 0x000000000013DB50UL:
                return ActionKind.ppl1;
            case 0x000000000165B379UL:
                return ActionKind.citom;
            case 0x000000007561F322UL:
                return ActionKind.setbcg;
            case 0x000002757144BBFAUL:
                return ActionKind.showCamp;
            case 0x00002830DFBC1B60UL:
                return ActionKind.clickWait;
            case 0x0000685CF572D412UL:
                return ActionKind.worldskin;
            case 0x20D0BBDD974C0065UL:
                return ActionKind.darkness_off;
            case 0x21BAB2FC6C4DD1D2UL:
                return ActionKind.doGameEnding;
            case 0x000D4C5D85944029UL:
                return ActionKind.storeDeath;
            case 0x000052856B74ADAFUL:
                return ActionKind.pushDeath;
            case 0x461F68E88EC1D77EUL:
                return ActionKind.setPowerHome;
            case 0x00000000000079C2UL:
                return ActionKind.msg;
            case 0x000000000011990CUL:
                return ActionKind.msg2;
            case 0x000000000016A2A0UL:
                return ActionKind.talk;
            case 0x0000000003458122UL:
                return ActionKind.talk2;
            case 0x000000000009A2D4UL:
                return ActionKind.chat;
            case 0x00000000016488A6UL:
                return ActionKind.chat2;
            case 0x0000000037C64C3AUL:
                return ActionKind.dialog;
            case 0x000000080FA90471UL:
                return ActionKind.dialogF;
            case 0x00000000755BD452UL:
                return ActionKind.select;
            case 0x00000000339258C1UL:
                return ActionKind.choice;
            case 0x00000000000B8546UL:
                return ActionKind.exit;
            case 0x000000000213F9C8UL:
                return ActionKind.image;
            case 0x000000004CE319EAUL:
                return ActionKind.image2;
            case 0x00005AF95FA3C5B9UL:
                return ActionKind.showImage;
            case 0x000037E4AC68E77EUL:
                return ActionKind.hideImage;
            case 0x00000000000BCF37UL:
                return ActionKind.face;
            case 0x0000000001B4F2F5UL:
                return ActionKind.face2;
            case 0x0000027571470C14UL:
                return ActionKind.showFace;
            case 0x00000182B88AA535UL:
                return ActionKind.hideFace;
            case 0x0000000F3B0F1053UL:
                return ActionKind.picture;
            case 0x00000233892D5C01UL:
                return ActionKind.picture2;
            case 0x00000275714EF18DUL:
                return ActionKind.showPict;
            case 0x01E67F949108AC1CUL:
                return ActionKind.showPicture;
            case 0x012AE5E21B3A4299UL:
                return ActionKind.hidePicture;
            case 0x00000000001642D2UL:
                return ActionKind.stop;
            case 0x00000000000001A7UL:
                return ActionKind.bg;
            case 0x0000000000003768UL:
                return ActionKind.add;
            case 0x000000000000483EUL:
                return ActionKind.div;
            case 0x000000000000792BUL:
                return ActionKind.mod;
            case 0x0000000000007A11UL:
                return ActionKind.mul;
            case 0x00000000000087D2UL:
                return ActionKind.per;
            case 0x00000000000097DFUL:
                return ActionKind.set;
            case 0x0000000000009A1DUL:
                return ActionKind.sub;
            case 0x000000000000ADD1UL:
                return ActionKind.win;
            case 0x0000000000080227UL:
                return ActionKind.addv;
            case 0x0000000000097EF4UL:
                return ActionKind.call;
            case 0x00000000000C1BBBUL:
                return ActionKind.font;
            case 0x000000000015DE2FUL:
                return ActionKind.save;
            case 0x000000000015F35AUL:
                return ActionKind.setv;
            case 0x0000000000164650UL:
                return ActionKind.subv;
            case 0x000000000018F3D1UL:
                return ActionKind.wait;
            case 0x00000000001B911DUL:
                return ActionKind.zoom;
            case 0x000000000167B2D8UL:
                return ActionKind.clear;
            case 0x0000000001A57511UL:
                return ActionKind.erase;
            case 0x0000000001A8A13FUL:
                return ActionKind.@event;
            case 0x0000000001BFC775UL:
                return ActionKind.focus;
            case 0x0000000001C00213UL:
                return ActionKind.fontc;
            case 0x0000000001DEB9BCUL:
                return ActionKind.gread;
            case 0x0000000045CA0E40UL:
                return ActionKind.gwrite;
            case 0x000000000214CF79UL:
                return ActionKind.index;
            case 0x000D4C5D862A3F93UL:
                return ActionKind.storeIndex;
            case 0x471D602277EDFDA0UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'R':
                    case 'r':
                        return ActionKind.storeIndexVar;
                }
                break;
            case 0x0000000002E2B7BFUL:
                return ActionKind.pushv;
            case 0x00000000032C2B3AUL:
                return ActionKind.setPM;
            case 0x00000000032C2BEAUL:
                return ActionKind.setud;
            case 0x0000001134A52445UL:
                return ActionKind.storeud;
            case 0x00000000032E1675UL:
                return ActionKind.shake;
            case 0x00000000034BDB03UL:
                return ActionKind.title;
            case 0x000000002AD376D0UL:
                return ActionKind.addstr;
            case 0x000000002AD3841CUL:
                return ActionKind.addVar;
            case 0x000000003F27E5ADUL:
                return ActionKind.fadein;
            case 0x0000000059840A26UL:
                return ActionKind.locate;
            case 0x0000000069B59F20UL:
                return ActionKind.playSE;
            case 0x0000000075277C5DUL:
                return ActionKind.scroll;
            case 0x0000000075625DD7UL:
                return ActionKind.setVar;
            case 0x0000000075A91B0CUL:
                return ActionKind.shadow;
            case 0x00000000771E035DUL:
                return ActionKind.subVar;
            case 0x0000000079F6A771UL:
                return ActionKind.title2;
            case 0x0000000082E0752EUL:
                return ActionKind.volume;
            case 0x0000000630836865UL:
                return ActionKind.addCapa;
            case 0x0000000630867EE3UL:
                return ActionKind.addGain;
            case 0x0000000630886FA3UL:
                return ActionKind.addItem;
            case 0x000000063090165AUL:
                return ActionKind.addSpot;
            case 0x0000000630919684UL:
                return ActionKind.addUnit;
            case 0x000000082A77812DUL:
                return ActionKind.doskill;
            case 0x0000000920C45337UL:
                return ActionKind.fadeout;
            case 0x0000000CF177DADBUL:
                return ActionKind.loopBGM;
            case 0x0000000D717752A2UL:
                return ActionKind.minimap;
            case 0x0000000F473FA517UL:
                return ActionKind.playBGM;
            case 0x0000000F6E683A5BUL:
                return ActionKind.pushCon;
            case 0x0000000F6E688E83UL:
                return ActionKind.pushSex;
            case 0x0000000F6E689DF4UL:
                return ActionKind.pushVar;
            case 0x0000001087B9F315UL:
                return ActionKind.routine;
            case 0x00000010EEB4F973UL:
                return ActionKind.scroll2;
            case 0x00000010F728E06CUL:
                return ActionKind.setCapa;
            case 0x00000010F729F0E1UL:
                return ActionKind.setDone;
            case 0x00000010F72BF6EAUL:
                return ActionKind.setGain;
            case 0x0000001103AE35A0UL:
                return ActionKind.shuffle;
            case 0x0000001134A38683UL:
                return ActionKind.stopBGM;
            case 0x0000001134A52395UL:
                return ActionKind.storePM;
            case 0x000000E50320E021UL:
                return ActionKind.addDiplo;
            case 0x0000000CC8E2B424UL:
                return ActionKind.levelup;
            case 0x000000E50402AF45UL:
                return ActionKind.addLevel;
            case 0x000000E504059734UL:
                return ActionKind.addLimit;
            case 0x000000E5040A795EUL:
                return ActionKind.addLoyal;
            case 0x000000E50426D81DUL:
                return ActionKind.addMoney;
            case 0x000000E5047CD30AUL:
                return ActionKind.addPower;
            case 0x000000E504CF3C88UL:
                return ActionKind.addSkill;
            case 0x000000E504F15F0DUL:
                return ActionKind.addTroop;
            case 0x00005C028085A23FUL:
                return ActionKind.stopTroop;
            case 0x000000E504F17FBBUL:
                return ActionKind.addTrust;
            case 0x000000E826C9B477UL:
                return ActionKind.aimTroop;
            case 0x00000116032643CCUL:
                return ActionKind.clearVar;
            case 0x00000125C224FEAFUL:
                return ActionKind.darkness;
            case 0x0000014975B08DA1UL:
                return ActionKind.exitItem;
            case 0x00000182B88F74C8UL:
                return ActionKind.hideLink;
            case 0x00000182B8950370UL:
                return ActionKind.hideSpot;
            case 0x000001DB4C1B999CUL:
                return ActionKind.linkSpot;
            case 0x00000221A4DAC1D5UL:
                return ActionKind.openGoal;
            case 0x0000023AF510249DUL:
                return ActionKind.pushCapa;
            case 0x0000023AF5133B1BUL:
                return ActionKind.pushGain;
            case 0x0000023AF5152BDBUL:
                return ActionKind.pushItem;
            case 0x0000023AF51BBC49UL:
                return ActionKind.pushRand;
            case 0x0000023AF51BBC50UL:
                return ActionKind.pushRank;
            case 0x0000023AF51CD292UL:
                return ActionKind.pushSpot;
            case 0x0000023AF51DB395UL:
                return ActionKind.pushTurn;
            case 0x000002634A7721DBUL:
                return ActionKind.roamUnit;
            case 0x00005859C337E4A9UL:
                return ActionKind.roamUnit2;
            case 0x00000273B90B3924UL:
                return ActionKind.setDiplo;
            case 0x00000273B9ED0848UL:
                return ActionKind.setLevel;
            case 0x00000273B9EFF037UL:
                return ActionKind.setLimit;
            case 0x00000273BA113120UL:
                return ActionKind.setMoney;
            case 0x00000273BADBD65FUL:
                return ActionKind.setTruce;
            case 0x0000027571516A4FUL:
                return ActionKind.showSpot;
            case 0x0000027A3865B2C5UL:
                return ActionKind.spotmark;
            case 0x465070BFA57936D2UL:
                return ActionKind.showSpotMark;
            case 0x2B3339F49EA3F6E3UL:
                return ActionKind.hideSpotMark;
            case 0x0008140CDB4E0CD1UL:
                return ActionKind.hideEscape;
            case 0x00005AF960630AD2UL:
                return ActionKind.showParty;
            case 0x000021196EBBFE66UL:
                return ActionKind.addCastle;
            case 0x000021197D006C56UL:
                return ActionKind.addFriend;
            case 0x0000211998826F02UL:
                return ActionKind.addMerits;
            case 0x00002119B1F3BFAAUL:
                return ActionKind.addSkill2;
            case 0x00002119B2EF1D6AUL:
                return ActionKind.addStatus;
            case 0x000027D3DBBE39BDUL:
                return ActionKind.changeMap;
            case 0x00002834B6B9639EUL:
                return ActionKind.closeGoal;
            case 0x000028E73955AB36UL:
                return ActionKind.ctrlTroop;
            case 0x00002EC7866B6672UL:
                return ActionKind.entryItem;
            case 0x00002F0A48496C6CUL:
                return ActionKind.equipItem;
            case 0x00002F14982FD3BCUL:
                return ActionKind.eraseItem;
            case 0x00002F149838FA9DUL:
                return ActionKind.eraseUnit;
            case 0x0000320E29D58D6DUL:
                return ActionKind.formTroop;
            case 0x0000324893D4C3B7UL:
                return ActionKind.freeTroop;
            case 0x00003738E00A5396UL:
                return ActionKind.haltTroop;
            case 0x000037E4ABA01ED4UL:
                return ActionKind.hideBlind;
            case 0x000037E4ABB9761AUL:
                return ActionKind.hideChara;
            case 0x0000486D1D1DBE10UL:
                return ActionKind.moveTroop;
            case 0x37FA7D9A05EFB6C2UL:
                return ActionKind.moveTroopFix;
            case 0x000D36033A7E249CUL:
                return ActionKind.smoveTroop;
            case 0x46A5D743CC91C879UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'X':
                    case 'x':
                        return ActionKind.smoveTroopFix;
                }
                break;
            case 0x000051B405B8B07FUL:
                return ActionKind.playWorld;
            case 0x000052856B781439UL:
                return ActionKind.pushDiplo;
            case 0x000052856BB5F2A4UL:
                return ActionKind.pushForce;
            case 0x000052856C59E35DUL:
                return ActionKind.pushLevel;
            case 0x000052856C5CCB4CUL:
                return ActionKind.pushLimit;
            case 0x000052856C61AD76UL:
                return ActionKind.pushLoyal;
            case 0x000052856C7E0C35UL:
                return ActionKind.pushMoney;
            case 0x000052856D02368FUL:
                return ActionKind.pushRand2;
            case 0x000052856D484767UL:
                return ActionKind.pushTrain;
            case 0x000052856D48B3D3UL:
                return ActionKind.pushTrust;
            case 0x000057875AFA02E7UL:
                return ActionKind.resetTime;
            case 0x000057875AFEC650UL:
                return ActionKind.resetZone;
            case 0x00005AB9B32F59E8UL:
                return ActionKind.setArbeit;
            case 0x00005AB9B99ADBD5UL:
                return ActionKind.setCastle;
            case 0x00005AB9DF320354UL:
                return ActionKind.setLeague;
            case 0x00005AB9FDCDFAD9UL:
                return ActionKind.setStatus;
            case 0x00005AF95EDAFD0FUL:
                return ActionKind.showBlind;
            case 0x00005AF95EF45455UL:
                return ActionKind.showChara;
            case 0x00005DEA820BBF3AUL:
                return ActionKind.terminate;
            case 0x0005353999E4A92EUL:
                return ActionKind.backScroll;
            case 0x0005C19EC28233CFUL:
                return ActionKind.changeRace;
            case 0x0006C16F395F6740UL:
                return ActionKind.endingRoll;
            case 0x0006CDF9FFAE4AA7UL:
                return ActionKind.erasePower;
            case 0x0006CDFA0000B425UL:
                return ActionKind.eraseSkill;
            case 0x0006CDFA003C38B3UL:
                return ActionKind.eraseUnit2;
            case 0x0006CDFA0022D6AAUL:
                return ActionKind.eraseTroop;
            case 0x0009EDB9C6071E1DUL:
                return ActionKind.linkEscape;
            case 0x000BCF047B56A96CUL:
                return ActionKind.playBattle;
            case 0x000BED48835685DEUL:
                return ActionKind.pushCastle;
            case 0x000BED48AD1CF67AUL:
                return ActionKind.pushMerits;
            case 0x000BED48C789A4E2UL:
                return ActionKind.pushStatus;
            case 0x000CA5FB1674291AUL:
                return ActionKind.reloadMenu;
            case 0x000CA61187C350B6UL:
                return ActionKind.removeSpot;
            case 0x000CA69026298AB4UL:
                return ActionKind.resetTruce;
            case 0x000D1CD8BE609262UL:
                return ActionKind.setDungeon;
            case 0x000D257C3AE35DD4UL:
                return ActionKind.shiftTroop;
            case 0x000D26853CA91274UL:
                return ActionKind.shuffleVar;
            case 0x000D2F151FAB0485UL:
                return ActionKind.skillTroop;
            case 0x000D31EA68436907UL:
                return ActionKind.sleepTroop;
            case 0x000D3EB17706728FUL:
                return ActionKind.speedTroop;
            case 0x000E25128934FE34UL:
                return ActionKind.unionPower;
            case 0x00B0BE7C0962A65FUL:
                return ActionKind.activeTroop;
            case 0x00B10282C7F9D9D8UL:
                return ActionKind.addTraining;
            case 0x00C0E864D556A9FDUL:
                return ActionKind.battleEvent;
            case 0x00D4FBF21B2CFEBBUL:
                return ActionKind.changeClass;
            case 0x00D5283A96B54D98UL:
                return ActionKind.choiceTitle;
            case 0x00FBC521CB26B607UL:
                return ActionKind.eraseFriend;
            case 0x01B94B84C7ECAB4FUL:
                return ActionKind.pushSpotPos;
            case 0x01B94B856785DA3EUL:
                return ActionKind.pushTrainUp;
            case 0x01D400889F36ABD4UL:
                return ActionKind.removeSkill;
            case 0x01D400889F58CE59UL:
                return ActionKind.removeTroop;
            case 0x01D412D5616D139DUL:
                return ActionKind.resetLeague;
            case 0x01E43977780A4543UL:
                return ActionKind.scrollSpeed;
            case 0x01E52CB329C8006FUL:
                return ActionKind.setTraining;
            case 0x01E66AF482DC8FA6UL:
                return ActionKind.shiftTroop2;
            case 0x01E67F8D98AB94D8UL:
                return ActionKind.showDungeon;
            case 0x020B48F3CBC029D7UL:
                return ActionKind.unctrlTroop;
            case 0x199521F934F91E94UL:
                return ActionKind.addBaseLevel;
            case 0x1EC869FDEC542C9AUL:
                return ActionKind.changeCastle;
            case 0x1EC869FE15A937F6UL:
                return ActionKind.changeMaster;
            case 0x1EC869FE233C4C03UL:
                return ActionKind.changePlayer;
            case 0x43A7573FDB7DD78FUL:
                return ActionKind.retreatTroop;
            case 0x43A81B4848BCBF5BUL:
                return ActionKind.reverseChara;
            case 0x461F3AF757C4B267UL:
                return ActionKind.setBaseLevel;
            case 0x461F4AECD1A87931UL:
                return ActionKind.setGameClear;
            case 0x4650707CAFCB8DB8UL:
                return ActionKind.showPolitics;
            case 0x471D601DA92A2F94UL:
                return ActionKind.storeAllSpot;
            case 0x19954FEA6BF9EC39UL:
                switch (key.Length - StringHashUtility.HashLengthMax)
                {
                    case 1:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x000000000000000EUL:
                                return ActionKind.addPowerMerce;
                        }
                        break;
                    case 2:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x0000000000000208UL:
                                return ActionKind.addPowerMerce2;
                        }
                        break;
                }
                break;
            case 0x19954FEA6BFEDD2CUL:
                switch (key.Length - StringHashUtility.HashLengthMax)
                {
                    case 1:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x000000000000000FUL:
                                return ActionKind.addPowerStaff;
                        }
                        break;
                    case 2:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x000000000000022DUL:
                                return ActionKind.addPowerStaff2;
                        }
                        break;
                }
                break;
            case 0x19955CE6E71C7C56UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'P':
                    case 'p':
                        return ActionKind.addTrainingUp;
                }
                break;
            case 0x1EC869FDF2AE1674UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'N':
                    case 'n':
                        return ActionKind.changeDungeon;
                }
                break;
            case 0x3FC7E8B03DA3718BUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'L':
                    case 'l':
                        return ActionKind.pushBaseLevel;
                }
                break;
            case 0x461F45A3E487F23DUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'R':
                    case 'r':
                        return ActionKind.setEnemyPower;
                }
                break;
            case 0x461F75E509E81029UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'P':
                    case 'p':
                        return ActionKind.setTrainingUp;
                }
                break;
            case 0x461F7F425E2054A6UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'C':
                    case 'c':
                        return ActionKind.setWorldMusic;
                }
                break;
            case 0x471D601DA927D9BDUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'R':
                    case 'r':
                        return ActionKind.storeAllPower;
                }
                break;
            case 0x471D601EE78684BFUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'R':
                    case 'r':
                        return ActionKind.storeComPower;
                }
                break;
            case 0x471D602551A7DF4AUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'T':
                    case 't':
                        return ActionKind.storeNextSpot;
                }
                break;
            case 0x471D60257ADD26CCUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'R':
                    case 'r':
                        return ActionKind.storeNowPower;
                }
                break;
            case 0x471D6027B306E10BUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'T':
                    case 't':
                        return ActionKind.storeRectUnit;
                }
                break;
            case 0x471D602865669A24UL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'T':
                    case 't':
                        return ActionKind.storeSkillset;
                }
                break;
            case 0x471D60290E506A8FUL:
                if (key.Length != StringHashUtility.HashLengthMax + 1)
                {
                    break;
                }
                switch (key[StringHashUtility.HashLengthMax])
                {
                    case 'T':
                    case 't':
                        return ActionKind.storeTodoUnit;
                }
                break;
            case 0x1EC869FE23A2AEB5UL:
                switch (key.Length - StringHashUtility.HashLengthMax)
                {
                    case 2:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x00000000000002BBUL:
                                return ActionKind.changePowerFix;
                        }
                        break;
                    case 3:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x00000000000071CFUL:
                                return ActionKind.changePowerFlag;
                        }
                        break;
                }
                break;
            case 0x24637DEB420BC99DUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000000391UL)
                {
                    return ActionKind.eraseUnitTroop;
                }
                break;
            case 0x3FC7E8B043728083UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x000000000000033CUL)
                {
                    return ActionKind.pushBattleHome;
                }
                break;
            case 0x3FC7E8B0437281EBUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000000001D9UL)
                {
                    return ActionKind.pushBattleRect;
                }
                break;
            case 0x3FC7E8CEBE533883UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000000221UL)
                {
                    return ActionKind.pushCountPower;
                }
                break;
            case 0x471D601DA8D67C5DUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000000002B7UL)
                {
                    return ActionKind.storeAliveUnit;
                }
                break;
            case 0x471D601DA92AA4BCUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000000370UL)
                {
                    return ActionKind.storeAllTalent;
                }
                break;
            case 0x1EC869FE23A2AEBDUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000000038B6UL)
                {
                    return ActionKind.changePowerName;
                }
                break;
            case 0x1EC869FE301FB82EUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000000037D8UL)
                {
                    return ActionKind.changeSpotImage;
                }
                break;
            case 0x24637DE84B0D3A4BUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x000000000000922DUL)
                {
                    return ActionKind.erasePowerMerce;
                }
                break;
            case 0x24637DE84B0D3B38UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000000037B4UL)
                {
                    return ActionKind.erasePowerStaff;
                }
                break;
            case 0x43A6B8D30BECBFB4UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x000000000000AD41UL)
                {
                    return ActionKind.resetEnemyPower;
                }
                break;
            case 0x43A6B8DDD23B3655UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000009862UL)
                {
                    return ActionKind.resetWorldMusic;
                }
                break;
            case 0x461F4312126ED052UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000000083EBUL)
                {
                    return ActionKind.setDungeonFloor;
                }
                break;
            case 0x471D601E15865FC4UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000008946UL)
                {
                    return ActionKind.storeBattleSpot;
                }
                break;
            case 0x471D60269DE431CBUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000007DB6UL)
                {
                    return ActionKind.storePlayerUnit;
                }
                break;
            case 0x471D6027A272BC92UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000007DB6UL)
                {
                    return ActionKind.storeRaceOfUnit;
                }
                break;
            case 0x471D60287AC2F315UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000007DB6UL)
                {
                    return ActionKind.storeSpotOfUnit;
                }
                break;
            case 0x471D6029A3AEE955UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000008946UL)
                {
                    return ActionKind.storeUnitOfSpot;
                }
                break;
            case 0x471D601DCB119E1DUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000001339F9UL)
                {
                    return ActionKind.storeAttackPower;
                }
                break;
            case 0x471D601ED9CB6EC8UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x000000000017AD9CUL)
                {
                    return ActionKind.storeClassOfUnit;
                }
                break;
            case 0x471D602551520CF0UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000000162D72UL)
                {
                    return ActionKind.storeNeutralSpot;
                }
                break;
            case 0x471D60269DE431C6UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000001339F9UL)
                {
                    return ActionKind.storePlayerPower;
                }
                break;
            case 0x471D6026ACB076C3UL:
                switch (key.Length - StringHashUtility.HashLengthMax)
                {
                    case 4:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x0000000000162D72UL:
                                return ActionKind.storePowerOfSpot;
                            case 0x000000000017AD9CUL:
                                return ActionKind.storePowerOfUnit;
                        }
                        break;
                    case 5:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x0000000001C01504UL:
                                return ActionKind.storePowerOfForce;
                        }
                        break;
                    case 6:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x000000002CA900F2UL:
                                return ActionKind.storePowerOfAttack;
                        }
                        break;
                    case 7:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x00000007FFAA2929UL:
                                return ActionKind.storePowerOfDefense;
                        }
                        break;
                }
                break;
            case 0x471D602865669991UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x000000000017AD9CUL)
                {
                    return ActionKind.storeSkillOfUnit;
                }
                break;
            case 0x471D60287AC2F310UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000001339F9UL)
                {
                    return ActionKind.storeSpotOfPower;
                }
                break;
            case 0x471D6028D54FDB45UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000001339F9UL)
                {
                    return ActionKind.storeTalentPower;
                }
                break;
            case 0x471D6029A3AEE952UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000001339F9UL)
                {
                    return ActionKind.storeUnitOfPower;
                }
                break;
            case 0x1F0E6FBB275171B1UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000000019A27D6UL)
                {
                    return ActionKind.clearBattleRecord;
                }
                break;
            case 0x471D601F564EA433UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000002DE2982UL)
                {
                    return ActionKind.storeDefensePower;
                }
                break;
            case 0x471D60241D2DB7ADUL:
                switch (key.Length - StringHashUtility.HashLengthMax)
                {
                    case 5:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x0000000001C32391UL:
                                return ActionKind.storeLeaderOfSpot;
                        }
                        break;
                    case 6:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x0000000040DDBBFDUL:
                                return ActionKind.storeLeaderOfPower;
                        }
                        break;
                }
                break;
            case 0x471D6024A7A24BE4UL:
                switch (key.Length - StringHashUtility.HashLengthMax)
                {
                    case 5:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x0000000001C4A3BBUL:
                                return ActionKind.storeMasterOfUnit;
                        }
                        break;
                    case 6:
                        switch (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)))
                        {
                            case 0x0000000040DDBBFDUL:
                                return ActionKind.storeMasterOfPower;
                        }
                        break;
                }
                break;
            case 0x471D6024B7713808UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000000001C4A3BBUL)
                {
                    return ActionKind.storeMemberOfUnit;
                }
                break;
            case 0x471D60287AC2F302UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x000000000135019FUL)
                {
                    return ActionKind.storeSpotOfBattle;
                }
                break;
            case 0x471D602579DBB32EUL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000008CF7948F7UL)
                {
                    return ActionKind.storeNonPlayerPower;
                }
                break;
            case 0x471D6027DC1D5270UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x00000011B7E81E4EUL)
                {
                    return ActionKind.storeRoamUnitOfSpot;
                }
                break;
            case 0x471D601E155DFFB0UL:
                if (StringHashUtility.Calc(key.Slice(StringHashUtility.HashLengthMax)) == 0x0000027C01A56B1BUL)
                {
                    return ActionKind.storeBaseClassOfUnit;
                }
                break;
        }

        return ActionKind.None;
    }
}
