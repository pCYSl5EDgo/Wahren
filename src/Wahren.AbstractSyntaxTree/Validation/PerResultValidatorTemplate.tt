<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.TextTemplateHelper.dll" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.Basic.dll" #>
<#@ import namespace="Wahren.AbstractSyntaxTree" #>
<#@ import namespace="Wahren.AbstractSyntaxTree.TextTemplateHelper" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
#nullable enable

namespace Wahren.AbstractSyntaxTree.Parser;

public static partial class PerResultValidator
{
	public static void AddReferenceAndValidate(ref Context context, ref Result result)
	{
<# foreach (var elementName in Helper.Inheritables.Concat(Helper.BlockContainers)) { #>
		foreach (ref var node in result.<#= elementName #>NodeList.AsSpan())
		{
			AddReferenceAndValidate(ref context, ref result, ref node);
		}
<# } #>
	}
<# foreach (var elementName in Helper.BlockContainers.Concat(Helper.Inheritables)) {
	var elements = ElementInfo.Get(elementName).Where(x => x.referenceKind.CanProcessEarly()); #>

	public static void AddReferenceAndValidate(ref Context context, ref Result result, ref <#= elementName #>Node node)
	{
<#  if (elementName.IsBlockContainer()) { #>
		foreach (var statement in node.Statements.AsSpan())
		{
			AddReferenceAndValidate(ref context, ref result, statement);
		}
<#  } #>
<#	foreach (var element in elements) {
		switch (element.referenceKind) { #>
<#			case ReferenceKind.Unknown					: #>
		// Ignore unknown <#= elementName #> <#= element.Name #>
<#				break;#>
<#			case ReferenceKind.Scenario					: #>
<#			case ReferenceKind.Event					: #>
<#			case ReferenceKind.Story					: #>
<#			case ReferenceKind.Movetype					: #>
<#			case ReferenceKind.Skill					: #>
<#			case ReferenceKind.Skillset					: #>
<#			case ReferenceKind.Race						: #>
<#			case ReferenceKind.Unit						: #>
<#			case ReferenceKind.Class					: #>
<#			case ReferenceKind.Power					: #>
<#			case ReferenceKind.Spot						: #>
<#			case ReferenceKind.Field					: #>
<#			case ReferenceKind.Object					: #>
<#			case ReferenceKind.Dungeon					: #>
<#			case ReferenceKind.Voice					: #>
<#			case ReferenceKind.AttributeType			: #>
<#			case ReferenceKind.VoiceTypeReader			: #>
<#			case ReferenceKind.VoiceTypeWriter			: #>
<#			case ReferenceKind.FieldAttributeTypeReader	: #>
<#			case ReferenceKind.FieldAttributeTypeWriter	: #>
<#			case ReferenceKind.FieldIdReader			: #>
<#			case ReferenceKind.FieldIdWriter			: #>
<#			case ReferenceKind.ClassTypeReader			: #>
<#			case ReferenceKind.ClassTypeWriter			: #>
<#			case ReferenceKind.map						: #>
<#			case ReferenceKind.bgm						: #>
<#			case ReferenceKind.imagedata				: #>
<#			case ReferenceKind.face						: #>
<#			case ReferenceKind.sound					: #>
<#			case ReferenceKind.picture					: #>
<#			case ReferenceKind.image_file				: #>
<#			case ReferenceKind.flag						: #>
<#			case ReferenceKind.font						: #>
		AddReference(ref result, ref node.<#= element.name.Escape() #>, ref result.<#= element.referenceKind #>Set, ReferenceKind.<#= element.referenceKind #>);
<#				break;#>
<#			case ReferenceKind.Number: #>
<#			case ReferenceKind.Boolean: #>
<#			case ReferenceKind.RedBlue: #>
<#			case ReferenceKind.Status: #>
		Validate<#= element.referenceKind #>(ref result, ref node.<#= element.name.Escape() #>, "<#= elementName #>", "<#= element.name #>");
<#				break;#>
<#			case ReferenceKind.Status | ReferenceKind.Number: #>
		ValidateStatusNumber(ref result, ref node.<#= element.name.Escape() #>, "<#= elementName #>", "<#= element.name #>");
<#				break;#>
<#			case ReferenceKind.Boolean | ReferenceKind.Number: #>
		ValidateBooleanNumber(ref result, ref node.<#= element.name.Escape() #>, "<#= elementName #>", "<#= element.name #>");
<#				break;#>
<#			case ReferenceKind.Special: #>
		SpecialTreatment_<#= elementName.ToLowerInvariant() #>_<#= element.Name #>(ref result, ref node.<#= element.name.Escape() #>);
<#				break;#>
<#			case ReferenceKind.Text: #>
		// Ignore Text <#= elementName #> <#= element.Name #>
<#				break;#>
<#		} #>
<#	}#>
	}
<#	foreach (var element in elements) { #>
<#	    if (element.referenceKind == ReferenceKind.Special && element.specialStringArray is { Length: > 0 }) { #>

	private static void SpecialTreatment_<#= elementName.ToLowerInvariant() #>_<#= element.Name #>(ref Result result, ref VariantPair<<#= element.name.GetCorrespondingType() #>> pair)
	{
		static void Validate(ref Result result, ref Pair_NullableString_NullableInt value)
        {
            var span = result.GetSpan(value.Text);
			value.HasReference = true;
			value.ReferenceKind = ReferenceKind.Special;
            if (span.SequenceEqual("<#= element.specialStringArray[0] #>"))
            {
                value.ReferenceId = 0;
            }
<#              for (int speIndex = 1; speIndex < element.specialStringArray.Length; ++speIndex) { #>
            else if (span.SequenceEqual("<#= element.specialStringArray[speIndex] #>"))
            {
                value.ReferenceId = <#= speIndex #>;
            }
<#              } #>
            else
            {
                value.HasReference = false;
                result.ErrorAdd_UnexpectedElementSpecialValue("<#= elementName #>", "<#= element.name #>", "<#= element.specialStringArray[0] #><# for (int speIndex = 1; speIndex < element.specialStringArray.Length; ++speIndex) { #>, <#= element.specialStringArray[speIndex] #><# } #>", value.Text);
            }
        }

<#              if (element.name.GetCorrespondingType() == "Pair_NullableString_NullableIntElement") { #>
        if (pair.Value is { HasValue: true, Value.HasText: true })
        {
            Validate(ref result, ref pair.Value.Value);
        }

        if (pair.VariantArray is not null)
        {
            foreach (var item in pair.VariantArray)
            {
                if (item is { HasValue: true, Value.HasText: true })
                {
                    Validate(ref result, ref item.Value);
                }
            }
        }
<#              } else { #>
        if (pair.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in pair.Value.Value.AsSpan())
            {
                Validate(ref result, ref value);
            }
        }

        if (pair.VariantArray is not null)
        {
            foreach (var item in pair.VariantArray)
            {
                if (item is { HasValue: true, Value.Count: > 0 })
                {
                    foreach (ref var value in item.Value.AsSpan())
                    {
                        Validate(ref result, ref value);
                    }
                }
            }
        }
<#              }#>
	}
<#	    } #>
<#	}#>
<# } #>
}
