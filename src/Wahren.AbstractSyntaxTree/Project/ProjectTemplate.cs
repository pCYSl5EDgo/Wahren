#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

namespace Wahren.AbstractSyntaxTree.Project;

using Parser;
using Statement;
using Statement.Expression;

public sealed partial class Project
{
	public ref Result TryGetScenarioNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Scenario.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.ScenarioNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Scenario.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetEventNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Event.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.EventNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Event.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetStoryNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Story.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.StoryNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Story.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetMovetypeNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Movetype.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.MovetypeNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Movetype.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSkillNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Skill.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Skill)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSkillsetNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Skillset.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Skillset)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetRaceNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Race.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Race)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetUnitNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Unit.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Unit)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetClassNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Class.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Class)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetPowerNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Power.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Power)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSpotNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Spot.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Spot)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetFieldNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Field.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.FieldNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Field.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetObjectNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Object.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.ObjectNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Object.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetDungeonNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Dungeon.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.DungeonNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Dungeon.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetVoiceNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var pair = ref Voice.TryGetTrack(name, queryFileId);
        if (!Unsafe.IsNullRef(ref pair))
        {
            index = pair.Id;
            return ref Files[pair.FileId];
        }
        var files = Files.AsSpan();
        for (int i = 0; i < files.Length; ++i)
        {
            ref var file = ref files[i];
            ref var list = ref file.VoiceNodeList;
            uint end = (uint)list.Count;
            if (end == 0)
            {
                continue;
            }

            for (index = 0; index != end; ++index)
            {
                ref var node = ref list[index];
                if (name.SequenceEqual(file.GetSpan(node.Name)))
                {
                    Voice.TryRegisterTrack(name, ((uint)i, index), queryFileId);
                    return ref file;
                }
            }
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public bool CheckExistance()
    {
        System.Text.StringBuilder? builder = null;
        var fileSpan = Files.AsSpan();
        var success = true;

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.ScenarioSet;
            for (uint i = 10, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetScenarioNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"scenario '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.EventSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetEventNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"event '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.StorySet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetStoryNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"story '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.MovetypeSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetMovetypeNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"movetype '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.SkillSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetSkillNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"skill '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.SkillsetSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetSkillsetNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"skillset '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.RaceSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetRaceNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"race '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.UnitSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetUnitNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"unit '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.ClassSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetClassNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"class '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.PowerSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetPowerNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"power '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.SpotSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetSpotNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"spot '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.FieldSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetFieldNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"field '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.ObjectSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetObjectNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"object '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.DungeonSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetDungeonNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"dungeon '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.VoiceSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetVoiceNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"voice '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.NumberVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.NumberVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].NumberVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.StringVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.StringVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].StringVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.GlobalVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.GlobalVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].GlobalVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.GlobalStringVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.GlobalStringVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].GlobalStringVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.ClassTypeReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.ClassTypeWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].ClassTypeWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.VoiceTypeReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.VoiceTypeWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].VoiceTypeWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.FieldIdReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.FieldIdWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].FieldIdWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref file.FieldAttributeTypeReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !file.FieldAttributeTypeWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (fileSpan[anotherFileIndex].FieldAttributeTypeWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    builder ??= new();
                    builder.Clear();
                    builder.Append($"Corresponding writing to the '{name}' is not found in this solution.");
                    foreach (var tokenId in set.References[i].AsSpan())
                    {
                        ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                        builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                    }
                    ErrorList.Add(new(builder.ToString()));
                }
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref file.AttributeTypeSet;
            for (uint i = 12, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (ContainsAttributeType(name))
                {
                    continue;
                }

                success = false;
                builder ??= new();
                builder.Clear();
                builder.Append($"attribute type '{name}' is not found in this solution.");
                foreach (var tokenId in set.References[i].AsSpan())
                {
                    ref var position = ref file.TokenList[tokenId].Range.StartInclusive;
                    builder.Append($"\n  {file.FilePath}({position.Line + 1}, {position.Offset + 1})");
                }
                ErrorList.Add(new(builder.ToString()));
            }
        }

        return success;
    }

    private void AddReferenceAndValidate_Call(ref Result result, CallFunctionExpression call)
    {
        var arguments = call.Arguments.AsSpan();
        if (arguments.IsEmpty)
        {
            return;
        }

        ref var argument = ref arguments[0];
        ReadOnlySpan<char> span;
        switch (call.Kind)
        {
            case FunctionKind.isSelect:
                result.ErrorAdd($"Unknown action 'isSelect'.", call.TokenId);
                break;
            case FunctionKind.isWhoDead:
                result.ErrorAdd($"Unknown action 'isWhoDead'.", call.TokenId);
                break;
            case FunctionKind.isGameOver:
                result.ErrorAdd($"Unknown action 'isGameOver'.", call.TokenId);
                break;
            case FunctionKind.inPower:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'inPower'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Unit, Spot, StringVariableReader is required by action 'inPower'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Unit, Spot, StringVariableReader is required by action 'inPower'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'inPower'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'inPower'.", argument.TokenId);
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Unit, Spot, StringVariableReader is required by action 'inPower'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Unit, Spot, StringVariableReader is required by action 'inPower'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'inPower'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'inPower'.", argument.TokenId);
                        }
                    }

                }
                break;
            case FunctionKind.isPlayer:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'isPlayer'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'isPlayer'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isPlayer'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isPlayer'.", argument.TokenId);
                    }
                }

                break;
            case FunctionKind.countUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'countUnit'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'countUnit'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'countUnit'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'countUnit'.", argument.TokenId);
                    }
                }

                break;
            case FunctionKind.isEnemy:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Spot, StringVariableReader is required by action 'isEnemy'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Spot, StringVariableReader is required by action 'isEnemy'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isEnemy'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isEnemy'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Unit, Spot, StringVariableReader is required by action 'isEnemy'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Unit, Spot, StringVariableReader is required by action 'isEnemy'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isEnemy'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isEnemy'.", argument.TokenId);
                    }
                }

                break;
            case FunctionKind.isFriend:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Spot, StringVariableReader is required by action 'isFriend'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Spot, StringVariableReader is required by action 'isFriend'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isFriend'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isFriend'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Unit, Spot, StringVariableReader is required by action 'isFriend'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Unit, Spot, StringVariableReader is required by action 'isFriend'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isFriend'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'isFriend'.", argument.TokenId);
                    }
                }

                break;
            case FunctionKind.isNpc:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'isNpc'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'isNpc'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isNpc'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isNpc'.", argument.TokenId);
                    }
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Unit, Power, StringVariableReader is required by action 'isNpc'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'isNpc'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isNpc'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isNpc'.", argument.TokenId);
                        }
                    }

                }
                break;
            case FunctionKind.isAlive:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'isAlive'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'isAlive'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isAlive'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isAlive'.", argument.TokenId);
                    }
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Unit, Power, StringVariableReader is required by action 'isAlive'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'isAlive'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isAlive'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'isAlive'.", argument.TokenId);
                        }
                    }

                }
                break;
            case FunctionKind.inBattle:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'inBattle'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'inBattle'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'inBattle'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'inBattle'.", argument.TokenId);
                    }
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Unit, Power, StringVariableReader is required by action 'inBattle'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'inBattle'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'inBattle'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'inBattle'.", argument.TokenId);
                        }
                    }

                }
                break;
            case FunctionKind.isJoin:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Power, Spot, StringVariableReader is required by action 'isJoin'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Power, Spot, StringVariableReader is required by action 'isJoin'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'isJoin'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'isJoin'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Power, Spot, StringVariableReader is required by action 'isJoin'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Power, Spot, StringVariableReader is required by action 'isJoin'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'isJoin'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'isJoin'.", argument.TokenId);
                    }
                }

                if (arguments.Length <= 2)
                {
                    break;
                }
                argument = ref arguments[2];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd($"The 3-th argument of action 'isJoin' must be Boolean.", argument.TokenId);
                }

                break;
            case FunctionKind.getDistance:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'getDistance'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'getDistance'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'getDistance'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'getDistance'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'getDistance'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'getDistance'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'getDistance'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'getDistance'.", argument.TokenId);
                            }
                        }

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'getDistance'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'getDistance'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'getDistance'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'getDistance'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case FunctionKind.isPostIn:
                switch (arguments.Length)
                {
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                    case 4:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[3];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                    case 5:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'isPostIn'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'isPostIn'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[3];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[4];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
        }
    }

    private void AddReferenceAndValidate_Call(ref Result result, CallActionStatement call)
    {
        var arguments = call.Arguments.AsSpan();
        if (arguments.IsEmpty)
        {
            return;
        }

        ref var argument = ref arguments[0];
        ReadOnlySpan<char> span;
        switch (call.Kind)
        {
            case ActionKind.vc:
                result.ErrorAdd($"Unknown action 'vc'.", call.TokenId);
                break;
            case ActionKind.play:
                result.ErrorAdd($"Unknown action 'play'.", call.TokenId);
                break;
            case ActionKind.ppl1:
                result.ErrorAdd($"Unknown action 'ppl1'.", call.TokenId);
                break;
            case ActionKind.citom:
                result.ErrorAdd($"Unknown action 'citom'.", call.TokenId);
                break;
            case ActionKind.setbcg:
                result.ErrorAdd($"Unknown action 'setbcg'.", call.TokenId);
                break;
            case ActionKind.showCamp:
                result.ErrorAdd($"Unknown action 'showCamp'.", call.TokenId);
                break;
            case ActionKind.clickWait:
                result.ErrorAdd($"Unknown action 'clickWait'.", call.TokenId);
                break;
            case ActionKind.worldskin:
                result.ErrorAdd($"Unknown action 'worldskin'.", call.TokenId);
                break;
            case ActionKind.darkness_off:
                result.ErrorAdd($"Unknown action 'darkness_off'.", call.TokenId);
                break;
            case ActionKind.doGameEnding:
                result.ErrorAdd($"Unknown action 'doGameEnding'.", call.TokenId);
                break;
            case ActionKind.storeDeath:
                result.ErrorAdd($"Unknown action 'storeDeath'.", call.TokenId);
                break;
            case ActionKind.dialog:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'dialog'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'dialog'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                }
                break;
            case ActionKind.dialogF:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'dialogF'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'dialogF'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                }
                break;
            case ActionKind.locate:
                switch (arguments.Length)
                {
                    case 1:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Spot, StringVariableReader is required by action 'locate'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Spot, StringVariableReader is required by action 'locate'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Spot:
                                        argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Spot;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'locate'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Spot, StringVariableReader required by action 'locate'.", argument.TokenId);
                            }
                        }

                        break;
                    case 2:
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case ActionKind.scroll:
                switch (arguments.Length)
                {
                    case 1:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, Spot, StringVariableReader is required by action 'scroll'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, Spot, StringVariableReader is required by action 'scroll'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Spot:
                                        argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Spot;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, Spot, StringVariableReader required by action 'scroll'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, Spot, StringVariableReader required by action 'scroll'.", argument.TokenId);
                            }
                        }

                        break;
                    case 2:
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case ActionKind.showSpotMark:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, Spot, StringVariableReader is required by action 'showSpotMark'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, Spot, StringVariableReader is required by action 'showSpotMark'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, Spot, StringVariableReader required by action 'showSpotMark'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, Spot, StringVariableReader required by action 'showSpotMark'.", argument.TokenId);
                    }
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_NumberIsExpected(argument.TokenId, $" The 2-th argument of action 'showSpotMark' must be Number.");
                }

                break;
            case ActionKind.msg:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'msg'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'msg'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'msg'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'msg'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        argument.ReferenceKind = ReferenceKind.face;
                        argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, 2, ref argument);

                        break;
                }
                break;
            case ActionKind.msg2:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'msg2'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'msg2'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'msg2'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'msg2'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        argument.ReferenceKind = ReferenceKind.face;
                        argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, 2, ref argument);

                        break;
                }
                break;
            case ActionKind.talk:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'talk'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'talk'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'talk'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'talk'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        argument.ReferenceKind = ReferenceKind.face;
                        argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, 2, ref argument);

                        break;
                }
                break;
            case ActionKind.talk2:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'talk2'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'talk2'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'talk2'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'talk2'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        argument.ReferenceKind = ReferenceKind.face;
                        argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, 2, ref argument);

                        break;
                }
                break;
            case ActionKind.chat:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'chat'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'chat'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'chat'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'chat'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        argument.ReferenceKind = ReferenceKind.face;
                        argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, 2, ref argument);

                        break;
                }
                break;
            case ActionKind.chat2:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'chat2'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'chat2'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Text, StringVariableReader is required by action 'chat2'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Text, StringVariableReader is required by action 'chat2'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                }
                            }
                        }

                        argument = ref arguments[1];
                        argument.ReferenceKind = ReferenceKind.face;
                        argument.ReferenceId = result.faceSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, 2, ref argument);

                        break;
                }
                break;
            case ActionKind.changeMaster:
                switch (arguments.Length)
                {
                    case 1:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'changeMaster'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Unit;
                            argument.HasReference = true;
                        }

                        break;
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'changeMaster'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'changeMaster'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Power:
                                        argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Power;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'changeMaster'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'changeMaster'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty. String Variable is required by action 'changeMaster'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Unit;
                            argument.HasReference = true;
                        }

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'changeMaster'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Unit;
                            argument.HasReference = true;
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty. String Variable is required by action 'changeMaster'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length != 1)
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.Unit;
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        argument.ReferenceKind = ReferenceKind.flag;
                        argument.ReferenceId = result.flagSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                        argument.HasReference = true;

                        break;
                }
                break;
            case ActionKind.select:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                break;
            case ActionKind.setPM:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'setPM'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'setPM'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'setPM'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Race:
                                argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Race;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'setPM'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'setPM'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.addMoney:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'addMoney'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'addMoney'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'addMoney'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'addMoney'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushGain:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Power, Spot, StringVariableReader is required by action 'pushGain'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Power, Spot, StringVariableReader is required by action 'pushGain'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'pushGain'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'pushGain'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.setMoney:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'setMoney'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'setMoney'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'setMoney'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'setMoney'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.formTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'formTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'formTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'formTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'formTroop'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.pushForce:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'pushForce'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'pushForce'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'pushForce'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'pushForce'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushMoney:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'pushMoney'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'pushMoney'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'pushMoney'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'pushMoney'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.pushTrust:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, StringVariableReader is required by action 'pushTrust'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, StringVariableReader is required by action 'pushTrust'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'pushTrust'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, StringVariableReader required by action 'pushTrust'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.speedTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'speedTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'speedTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'speedTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'speedTroop'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                break;
            case ActionKind.removeSkill:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'removeSkill'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Skill, Skillset, StringVariableReader is required by action 'removeSkill'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Skill, Skillset, StringVariableReader is required by action 'removeSkill'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
                    if (Unsafe.IsNullRef(ref track))
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Skill, Skillset, StringVariableReader required by action 'removeSkill'.", argument.TokenId);
                    }
                    else
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Skill:
                                argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Skill;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Skillset:
                                argument.ReferenceId = result.SkillsetSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Skillset;
                                argument.HasReference = true;
                                break;
                          default:
                              result.ErrorAdd($"2-th argument '{span}' is not Skill, Skillset, StringVariableReader required by action 'removeSkill'.", argument.TokenId);
                              argument.HasReference = false;
                              break;
                        }
                    }
                }

                break;
            case ActionKind.storeTodoUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'storeTodoUnit'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'storeTodoUnit'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'storeTodoUnit'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'storeTodoUnit'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty. String Variable is required by action 'storeTodoUnit'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument '@' must be String Variable.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (DiagnosticSeverity.Warning <= RequiredSeverity)
                    {
                        result.ErrorAdd($"2-th argument '{span}' is String Variable. '@' should be written.", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.storeAliveUnit:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'storeAliveUnit'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'storeAliveUnit'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'storeAliveUnit'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'storeAliveUnit'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty. String Variable is required by action 'storeAliveUnit'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument '@' must be String Variable.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.HasReference = true;
                    }
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }
                else
                {
                    if (DiagnosticSeverity.Warning <= RequiredSeverity)
                    {
                        result.ErrorAdd($"2-th argument '{span}' is String Variable. '@' should be written.", argument.TokenId);
                    }
                    argument.ReferenceId = result.StringVariableWriterSet.GetOrAdd(span, argument.TokenId);
                    argument.HasReference = true;
                    argument.ReferenceKind = ReferenceKind.StringVariableWriter;
                }

                break;
            case ActionKind.changePowerFlag:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'changePowerFlag'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                // ERROR 0

                break;
            case ActionKind.choice:
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                argument = ref arguments[1];
                AddReferenceAndValidate_CompoundText(ref result, 1, ref argument);

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    AddReferenceAndValidate_CompoundText(ref result, i, ref argument);

                }
                break;
            case ActionKind.addFriend:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'addFriend'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addFriend'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addFriend'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Race:
                                argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Race;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addFriend'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addFriend'.", argument.TokenId);
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addFriend'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addFriend'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addFriend'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addFriend'.", argument.TokenId);
                        }
                    }

                }
                break;
            case ActionKind.eraseUnit2:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Power, Spot, StringVariableReader is required by action 'eraseUnit2'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Power, Spot, StringVariableReader is required by action 'eraseUnit2'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'eraseUnit2'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Power, Spot, StringVariableReader required by action 'eraseUnit2'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty. String Variable is required by action 'eraseUnit2'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty. String Variable is required by action 'eraseUnit2'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length != 1)
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.Unit;
                        argument.HasReference = true;
                    }

                }
                break;
            case ActionKind.addPowerMerce:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'addPowerMerce'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Race:
                                argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Race;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce'.", argument.TokenId);
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce'.", argument.TokenId);
                        }
                    }

                }
                break;
            case ActionKind.addPowerStaff:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'addPowerStaff'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Race:
                                argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Race;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff'.", argument.TokenId);
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff'.", argument.TokenId);
                        }
                    }

                }
                break;
            case ActionKind.addPowerMerce2:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'addPowerMerce2'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce2'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce2'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Race:
                                argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Race;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce2'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce2'.", argument.TokenId);
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce2'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerMerce2'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce2'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerMerce2'.", argument.TokenId);
                        }
                    }

                }
                break;
            case ActionKind.addPowerStaff2:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'addPowerStaff2'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Power;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff2'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff2'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Race:
                                argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Race;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff2'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff2'.", argument.TokenId);
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff2'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'addPowerStaff2'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff2'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'addPowerStaff2'.", argument.TokenId);
                        }
                    }

                }
                break;
            case ActionKind.exit:
                if (arguments.Length <= 0)
                {
                    break;
                }
                if (argument.IsNumber)
                {
                    if (argument.Number != 0)
                    {
                        result.ErrorAdd($"1-th argument is not Number, CompoundText required by action 'exit'.", argument.TokenId);
                    }
                }
                else
                {
                    AddReferenceAndValidate_CompoundText(ref result, 0, ref argument);
                }

                break;
            case ActionKind.scroll2:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, Spot, StringVariableReader is required by action 'scroll2'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, Spot, StringVariableReader is required by action 'scroll2'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, Spot, StringVariableReader required by action 'scroll2'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, Spot, StringVariableReader required by action 'scroll2'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.ctrlTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'ctrlTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'ctrlTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'ctrlTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'ctrlTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.freeTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'freeTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'freeTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'freeTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'freeTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.haltTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'haltTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'haltTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'haltTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'haltTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.eraseTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'eraseTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'eraseTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'eraseTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'eraseTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.sleepTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'sleepTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'sleepTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'sleepTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'sleepTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.activeTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'activeTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'activeTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'activeTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'activeTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.removeTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'removeTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'removeTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'removeTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'removeTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.unctrlTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'unctrlTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'unctrlTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'unctrlTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'unctrlTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.retreatTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'retreatTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'retreatTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'retreatTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'retreatTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.eraseUnitTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'eraseUnitTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'eraseUnitTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'eraseUnitTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'eraseUnitTroop'.", argument.TokenId);
                    }
                }

                break;
            case ActionKind.aimTroop:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'aimTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'aimTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'aimTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'aimTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'aimTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'aimTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'aimTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'aimTroop'.", argument.TokenId);
                            }
                        }

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'aimTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'aimTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'aimTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'aimTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case ActionKind.pushCon:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'pushCon'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Spot;
                    argument.HasReference = true;
                }

                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'pushCon'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'pushCon'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'pushCon'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'pushCon'.", argument.TokenId);
                    }
                }

                argument = ref arguments[2];
                argument.ReferenceKind = ReferenceKind.NumberVariableWriter;
                argument.ReferenceId = result.NumberVariableWriterSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                argument.HasReference = true;

                break;
            case ActionKind.addTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'addTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'addTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'addTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'addTroop'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[3];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                // ERROR 1
                break;
            case ActionKind.stopTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'stopTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'stopTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'stopTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'stopTroop'.", argument.TokenId);
                    }
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Unit, Class, StringVariableReader is required by action 'stopTroop'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'stopTroop'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'stopTroop'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'stopTroop'.", argument.TokenId);
                        }
                    }

                }
                break;
            case ActionKind.eraseSkill:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'eraseSkill'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Skill, Skillset, StringVariableReader is required by action 'eraseSkill'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Skill, Skillset, StringVariableReader is required by action 'eraseSkill'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
                    if (Unsafe.IsNullRef(ref track))
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Skill, Skillset, StringVariableReader required by action 'eraseSkill'.", argument.TokenId);
                    }
                    else
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Skill:
                                argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Skill;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Skillset:
                                argument.ReferenceId = result.SkillsetSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Skillset;
                                argument.HasReference = true;
                                break;
                          default:
                              result.ErrorAdd($"2-th argument '{span}' is not Skill, Skillset, StringVariableReader required by action 'eraseSkill'.", argument.TokenId);
                              argument.HasReference = false;
                              break;
                        }
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Skill, Skillset, StringVariableReader is required by action 'eraseSkill'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Skill, Skillset, StringVariableReader is required by action 'eraseSkill'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
                        if (Unsafe.IsNullRef(ref track))
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Skill, Skillset, StringVariableReader required by action 'eraseSkill'.", argument.TokenId);
                        }
                        else
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Skill:
                                    argument.ReferenceId = result.SkillSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Skill;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Skillset:
                                    argument.ReferenceId = result.SkillsetSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Skillset;
                                    argument.HasReference = true;
                                    break;
                              default:
                                  result.ErrorAdd($"{i + 1}-th argument '{span}' is not Skill, Skillset, StringVariableReader required by action 'eraseSkill'.", argument.TokenId);
                                  argument.HasReference = false;
                                  break;
                            }
                        }
                    }

                }
                break;
            case ActionKind.eraseFriend:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty. String Variable is required by action 'eraseFriend'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length != 1)
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                    argument.ReferenceKind = ReferenceKind.Unit;
                    argument.HasReference = true;
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"2-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'eraseFriend'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"2-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'eraseFriend'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Race:
                                argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Race;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'eraseFriend'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"2-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'eraseFriend'.", argument.TokenId);
                    }
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd($"{i + 1}-th argument is empty.Race, Unit, Class, StringVariableReader is required by action 'eraseFriend'.", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd($"{i + 1}-th argument is empty string '@'. Race, Unit, Class, StringVariableReader is required by action 'eraseFriend'.", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = result.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'eraseFriend'.", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd($"{i + 1}-th argument '{span}' is not Race, Unit, Class, StringVariableReader required by action 'eraseFriend'.", argument.TokenId);
                        }
                    }

                }
                break;
            case ActionKind.moveTroop:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                            }
                        }

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                    case 4:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[3];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case ActionKind.moveTroopFix:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                            }
                        }

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                    case 4:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'moveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'moveTroopFix'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[3];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case ActionKind.smoveTroop:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                            }
                        }

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                    case 4:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroop'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroop'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[3];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case ActionKind.smoveTroopFix:
                switch (arguments.Length)
                {
                    case 2:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"2-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"2-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"2-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                        }

                        break;
                    case 3:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                    case 4:
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'smoveTroopFix'.", argument.TokenId);
                            }
                        }

                        argument = ref arguments[1];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[2];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        argument = ref arguments[3];
                        if (!argument.IsNumber)
                        {
                            argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                            argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                            argument.HasReference = true;
                        }

                        break;
                }
                break;
            case ActionKind.spotmark:
                if (arguments.Length <= 0)
                {
                    break;
                }
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Power, Spot, StringVariableReader is required by action 'spotmark'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Power, Spot, StringVariableReader is required by action 'spotmark'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Power:
                                argument.ReferenceId = result.PowerSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Power;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Spot:
                                argument.ReferenceId = result.SpotSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Spot;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, Spot, StringVariableReader required by action 'spotmark'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Power, Spot, StringVariableReader required by action 'spotmark'.", argument.TokenId);
                    }
                }

                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    result.ErrorAdd_NumberIsExpected(argument.TokenId, $" The 2-th argument of action 'spotmark' must be Number.");
                }

                break;
            case ActionKind.shiftTroop:
                span = result.GetSpan(argument.TokenId);
                if (span.IsEmpty)
                {
                    result.ErrorAdd($"1-th argument is empty.Unit, Class, StringVariableReader is required by action 'shiftTroop'.", argument.TokenId);
                }
                else if (span[0] == '@')
                {
                    if (span.Length == 1)
                    {
                        result.ErrorAdd($"1-th argument is empty string '@'. Unit, Class, StringVariableReader is required by action 'shiftTroop'.", argument.TokenId);
                    }
                    else
                    {
                        argument.ReferenceId = result.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                        argument.ReferenceKind = ReferenceKind.StringVariableReader;
                        argument.HasReference = true;
                    }
                }
                else
                {
                    ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                    if (!Unsafe.IsNullRef(ref track))
                    {
                        switch (track.Kind)
                        {
                            case ReferenceKind.Unit:
                                argument.ReferenceId = result.UnitSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Unit;
                                argument.HasReference = true;
                                break;
                            case ReferenceKind.Class:
                                argument.ReferenceId = result.ClassSet.GetOrAdd(span, argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.Class;
                                argument.HasReference = true;
                                break;
                            default:
                                result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'shiftTroop'.", argument.TokenId);
                                argument.HasReference = false;
                                break;
                        }
                    }
                    else
                    {
                        result.ErrorAdd($"1-th argument '{span}' is not Unit, Class, StringVariableReader required by action 'shiftTroop'.", argument.TokenId);
                    }
                }

                argument = ref arguments[1];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                argument = ref arguments[2];
                if (!argument.IsNumber)
                {
                    argument.ReferenceKind = ReferenceKind.NumberVariableReader;
                    argument.ReferenceId = result.NumberVariableReaderSet.GetOrAdd(result.GetSpan(argument.TokenId), argument.TokenId);
                    argument.HasReference = true;
                }

                if (arguments.Length <= 3)
                {
                    break;
                }
                argument = ref arguments[3];
                if (!argument.IsNumber && (argument.HasReference = PerResultValidator.IsBoolean(result.GetSpan(argument.TokenId), out argument.ReferenceId)))
                {
                    argument.ReferenceKind = ReferenceKind.Boolean;
                }
                else
                {
                    result.ErrorAdd($"The 4-th argument of action 'shiftTroop' must be Boolean.", argument.TokenId);
                }

                break;
        }
    }

    private void AddReferenceAndValidate(ref Result result, ref EventNode node)
    {
        foreach (var statement in node.Statements.AsSpan())
		{
            if (statement is not null)
            {
			    AddReferenceAndValidate_Statement(ref result, statement);
            }
		}
    }

    private void AddReferenceAndValidate(ref Result result, ref ScenarioNode node)
    {
        foreach (var statement in node.Statements.AsSpan())
		{
            if (statement is not null)
            {
			    AddReferenceAndValidate_Statement(ref result, statement);
            }
		}
    }

    private void AddReferenceAndValidate(ref Result result, ref StoryNode node)
    {
        foreach (var statement in node.Statements.AsSpan())
		{
            if (statement is not null)
            {
			    AddReferenceAndValidate_Statement(ref result, statement);
            }
		}
    }

    private void AddReferenceAndValidate(ref Result result, ref VoiceNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, ref SpotNode node)
    {
        if (node.merce.Value is { HasValue: true })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_spot_merce(ref result, ref value);
            }
        }
        if (node.merce.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.merce.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_spot_merce(ref result, ref value);
                }
            }
        }
        if (node.monster.Value is { HasValue: true })
        {
            foreach (ref var value in node.monster.Value.Value.AsSpan())
            {
                SpecialTreatment_spot_monster(ref result, ref value);
            }
        }
        if (node.monster.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.monster.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_spot_monster(ref result, ref value);
                }
            }
        }
        if (node.member.Value is { HasValue: true })
        {
            foreach (ref var value in node.member.Value.Value.AsSpan())
            {
                SpecialTreatment_spot_member(ref result, ref value);
            }
        }
        if (node.member.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.member.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_spot_member(ref result, ref value);
                }
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, ref UnitNode node)
    {
        if (node.member.Value is { HasValue: true })
        {
            foreach (ref var value in node.member.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_member(ref result, ref value);
            }
        }
        if (node.member.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.member.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_member(ref result, ref value);
                }
            }
        }
        if (node.friend.Value is { HasValue: true })
        {
            foreach (ref var value in node.friend.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_friend(ref result, ref value);
            }
        }
        if (node.friend.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.friend.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_friend(ref result, ref value);
                }
            }
        }
        if (node.merce.Value is { HasValue: true })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_merce(ref result, ref value);
            }
        }
        if (node.merce.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.merce.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_merce(ref result, ref value);
                }
            }
        }
        if (node.skill.Value is { HasValue: true })
        {
            foreach (ref var value in node.skill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_skill(ref result, ref value);
            }
        }
        if (node.skill.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.skill.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_skill(ref result, ref value);
                }
            }
        }
        if (node.skill2.Value is { HasValue: true })
        {
            foreach (ref var value in node.skill2.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_skill2(ref result, ref value);
            }
        }
        if (node.skill2.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.skill2.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_skill2(ref result, ref value);
                }
            }
        }
        if (node.learn.Value is { HasValue: true })
        {
            foreach (ref var value in node.learn.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_learn(ref result, ref value);
            }
        }
        if (node.learn.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.learn.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_learn(ref result, ref value);
                }
            }
        }
        if (node.delskill.Value is { HasValue: true })
        {
            foreach (ref var value in node.delskill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_delskill(ref result, ref value);
            }
        }
        if (node.delskill.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.delskill.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_delskill(ref result, ref value);
                }
            }
        }
        if (node.delskill2.Value is { HasValue: true })
        {
            foreach (ref var value in node.delskill2.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_delskill2(ref result, ref value);
            }
        }
        if (node.delskill2.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.delskill2.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_delskill2(ref result, ref value);
                }
            }
        }
        if (node.leader_skill.Value is { HasValue: true })
        {
            foreach (ref var value in node.leader_skill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_leader_skill(ref result, ref value);
            }
        }
        if (node.leader_skill.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.leader_skill.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_leader_skill(ref result, ref value);
                }
            }
        }
        if (node.assist_skill.Value is { HasValue: true })
        {
            foreach (ref var value in node.assist_skill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_assist_skill(ref result, ref value);
            }
        }
        if (node.assist_skill.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.assist_skill.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_assist_skill(ref result, ref value);
                }
            }
        }
        if (node.staff.Value is { HasValue: true })
        {
            foreach (ref var value in node.staff.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_staff(ref result, ref value);
            }
        }
        if (node.staff.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.staff.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_staff(ref result, ref value);
                }
            }
        }
        if (node.castle_guard.Value is { HasValue: true })
        {
            foreach (ref var value in node.castle_guard.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_castle_guard(ref result, ref value);
            }
        }
        if (node.castle_guard.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.castle_guard.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_unit_castle_guard(ref result, ref value);
                }
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, ref RaceNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, ref ClassNode node)
    {
        if (node.member.Value is { HasValue: true })
        {
            foreach (ref var value in node.member.Value.Value.AsSpan())
            {
                SpecialTreatment_class_member(ref result, ref value);
            }
        }
        if (node.member.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.member.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_member(ref result, ref value);
                }
            }
        }
        if (node.friend.Value is { HasValue: true })
        {
            foreach (ref var value in node.friend.Value.Value.AsSpan())
            {
                SpecialTreatment_class_friend(ref result, ref value);
            }
        }
        if (node.friend.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.friend.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_friend(ref result, ref value);
                }
            }
        }
        if (node.merce.Value is { HasValue: true })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_class_merce(ref result, ref value);
            }
        }
        if (node.merce.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.merce.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_merce(ref result, ref value);
                }
            }
        }
        if (node.skill.Value is { HasValue: true })
        {
            foreach (ref var value in node.skill.Value.Value.AsSpan())
            {
                SpecialTreatment_class_skill(ref result, ref value);
            }
        }
        if (node.skill.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.skill.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_skill(ref result, ref value);
                }
            }
        }
        if (node.skill2.Value is { HasValue: true })
        {
            foreach (ref var value in node.skill2.Value.Value.AsSpan())
            {
                SpecialTreatment_class_skill2(ref result, ref value);
            }
        }
        if (node.skill2.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.skill2.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_skill2(ref result, ref value);
                }
            }
        }
        if (node.learn.Value is { HasValue: true })
        {
            foreach (ref var value in node.learn.Value.Value.AsSpan())
            {
                SpecialTreatment_class_learn(ref result, ref value);
            }
        }
        if (node.learn.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.learn.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_learn(ref result, ref value);
                }
            }
        }
        if (node.delskill.Value is { HasValue: true })
        {
            foreach (ref var value in node.delskill.Value.Value.AsSpan())
            {
                SpecialTreatment_class_delskill(ref result, ref value);
            }
        }
        if (node.delskill.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.delskill.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_delskill(ref result, ref value);
                }
            }
        }
        if (node.delskill2.Value is { HasValue: true })
        {
            foreach (ref var value in node.delskill2.Value.Value.AsSpan())
            {
                SpecialTreatment_class_delskill2(ref result, ref value);
            }
        }
        if (node.delskill2.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.delskill2.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_delskill2(ref result, ref value);
                }
            }
        }
        if (node.friend_ex.Value is { HasValue: true })
        {
            foreach (ref var value in node.friend_ex.Value.Value.AsSpan())
            {
                SpecialTreatment_class_friend_ex(ref result, ref value);
            }
        }
        if (node.friend_ex.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.friend_ex.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_class_friend_ex(ref result, ref value);
                }
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, ref FieldNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, ref SkillNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, ref PowerNode node)
    {
        if (node.staff.Value is { HasValue: true })
        {
            foreach (ref var value in node.staff.Value.Value.AsSpan())
            {
                SpecialTreatment_power_staff(ref result, ref value);
            }
        }
        if (node.staff.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.staff.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_power_staff(ref result, ref value);
                }
            }
        }
        if (node.merce.Value is { HasValue: true })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_power_merce(ref result, ref value);
            }
        }
        if (node.merce.VariantArray is { Length: > 0 })
        {
            foreach (var element in node.merce.VariantArray)
            {
                if (element is not { HasValue: true })
                {
                    continue;
                }
                foreach (ref var value in element.Value.AsSpan())
                {
                    SpecialTreatment_power_merce(ref result, ref value);
                }
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, ref ObjectNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, ref DungeonNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, ref MovetypeNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, ref SkillsetNode node)
    {
    }

    private void SpecialTreatment_spot_merce(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'merce' of struct Spot.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Spot.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Spot.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Spot.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_spot_monster(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'monster' of struct Spot.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'monster' of struct Spot.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'monster' of struct Spot.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'monster' of struct Spot.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_spot_member(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'member' of struct Spot.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Spot.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Spot.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Spot.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_member(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'member' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_friend(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Race, Unit, Class required by element 'friend' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = result.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_merce(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'merce' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_skill(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'skill' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_skill2(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'skill2' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill2' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill2' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill2' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_learn(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'learn' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'learn' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'learn' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'learn' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_delskill(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'delskill' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_delskill2(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'delskill2' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill2' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill2' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill2' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_leader_skill(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'leader_skill' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'leader_skill' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'leader_skill' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'leader_skill' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_assist_skill(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'assist_skill' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'assist_skill' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'assist_skill' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'assist_skill' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_staff(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Race, Class required by element 'staff' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Race, Class required by element 'staff' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Race, Class required by element 'staff' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = result.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Race, Class required by element 'staff' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_castle_guard(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'castle_guard' of struct Unit.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'castle_guard' of struct Unit.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'castle_guard' of struct Unit.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'castle_guard' of struct Unit.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_member(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'member' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'member' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_friend(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Race, Unit, Class required by element 'friend' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = result.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_merce(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, Class required by element 'merce' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, Class required by element 'merce' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_skill(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'skill' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_skill2(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'skill2' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill2' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill2' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'skill2' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_learn(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'learn' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'learn' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'learn' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'learn' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_delskill(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'delskill' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_delskill2(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Skill, Skillset required by element 'delskill2' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill2' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill2' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = result.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = result.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Skill, Skillset required by element 'delskill2' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_friend_ex(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Race, Unit, Class required by element 'friend_ex' of struct Class.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend_ex' of struct Class.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend_ex' of struct Class.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = result.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = result.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Race, Unit, Class required by element 'friend_ex' of struct Class.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_power_staff(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, ClassTypeReader required by element 'staff' of struct Power.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, ClassTypeReader required by element 'staff' of struct Power.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, ClassTypeReader required by element 'staff' of struct Power.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, ClassTypeReader required by element 'staff' of struct Power.", value.Text);
                break;
        }
    }

    private void SpecialTreatment_power_merce(ref Result result, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd($"Value '{span}...' is not Unit, ClassTypeReader required by element 'merce' of struct Power.", value.Text);
            return;
        }
        if (value.HasNumber)
        {
            result.ErrorAdd($"Value '{span}' is not Unit, ClassTypeReader required by element 'merce' of struct Power.", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd($"Value '{span}' is not Unit, ClassTypeReader required by element 'merce' of struct Power.", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = result.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd($"Value '{span}' is not Unit, ClassTypeReader required by element 'merce' of struct Power.", value.Text);
                break;
        }
    }
}
