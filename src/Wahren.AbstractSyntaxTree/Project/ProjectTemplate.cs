#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>

namespace Wahren.AbstractSyntaxTree.Project;

using Parser;
using Statement;
using Statement.Expression;

public sealed partial class Project
{
	public ref Result TryGetPowerNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Power)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetPowerNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Power)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetClassNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Class)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetClassNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Class)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetDungeonNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Dungeon.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Dungeon)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetDungeonNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Dungeon.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Dungeon)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetFieldNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Field.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Field)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetFieldNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Field.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Field)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetMovetypeNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Movetype.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Movetype)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetMovetypeNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Movetype.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Movetype)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetObjectNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Object.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Object)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetObjectNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Object.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Object)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetRaceNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Race)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetRaceNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Race)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSkillNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Skill)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetSkillNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Skill)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSkillsetNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Skillset)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetSkillsetNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Skillset)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetSpotNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Spot)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetSpotNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Spot)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetUnitNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Unit)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetUnitNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Unit)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetVoiceNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Voice.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Voice)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetVoiceNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Voice.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Voice)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetScenarioNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Scenario.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Scenario)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetScenarioNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Scenario.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Scenario)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetEventNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Event.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Event)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetEventNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Event.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Event)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

	public ref Result TryGetStoryNode(uint queryFileId, ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Story.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Story)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public ref Result TryGetStoryNode(ReadOnlySpan<char> name, out uint index)
    {
        ref var track = ref AmbiguousDictionary_Story.TryGet(name);
        if (!Unsafe.IsNullRef(ref track) && track.Kind == ReferenceKind.Story)
        {
            index = (uint)track.NodeIndex;
            return ref Files[track.ResultId];
        }

        index = 0;
        return ref Unsafe.NullRef<Result>();
    }

    public bool CheckExistance()
    {
        var fileSpan = Files.AsSpan();
        var success = true;

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].PowerSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetPowerNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("power", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].ClassSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetClassNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("class", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].DungeonSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetDungeonNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("dungeon", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].FieldSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetFieldNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("field", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].MovetypeSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetMovetypeNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("movetype", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].ObjectSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetObjectNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("object", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].RaceSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetRaceNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("race", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].SkillSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetSkillNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("skill", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].SkillsetSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetSkillsetNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("skillset", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].SpotSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetSpotNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("spot", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].UnitSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetUnitNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("unit", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].VoiceSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetVoiceNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("voice", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].ScenarioSet;
            for (uint i = 10, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetScenarioNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("scenario", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].EventSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetEventNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("event", name, ref file, set.References[i].AsSpan());
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].StorySet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (!Unsafe.IsNullRef(ref TryGetStoryNode(fileIndex, name, out _)))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_NameStructureNotFound("story", name, ref file, set.References[i].AsSpan());
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].NumberVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].NumberVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].NumberVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("NumberVariable", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].StringVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].StringVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].StringVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("StringVariable", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].GlobalVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].GlobalVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].GlobalVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("GlobalVariable", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].GlobalStringVariableReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].GlobalStringVariableWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].GlobalStringVariableWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("GlobalStringVariable", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].ClassTypeReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].ClassTypeWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].ClassTypeWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("ClassType", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].VoiceTypeReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].VoiceTypeWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].VoiceTypeWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("VoiceType", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].FieldIdReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].FieldIdWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].FieldIdWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("FieldId", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (int fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].FieldAttributeTypeReaderSet;
            for (uint i = 0, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                bool notFound = !FileAnalysisList[fileIndex].FieldAttributeTypeWriterSet.TryGet(name, out _);
                if (notFound)
                {
                    for (int anotherFileIndex = 0; anotherFileIndex < fileSpan.Length; ++anotherFileIndex)
                    {
                        if (anotherFileIndex == fileIndex)
                        {
                            continue;
                        }

                        if (FileAnalysisList[anotherFileIndex].FieldAttributeTypeWriterSet.TryGet(name, out _))
                        {
                            notFound = false;
                            break;
                        }
                    }
                }

                if (notFound)
                {
                    this.ErrorAdd_CorrespondingWritingNotFound("FieldAttributeType", name, ref file, set.References[i].AsSpan());
                }
            }
        }

        for (uint fileIndex = 0; fileIndex < fileSpan.Length; ++fileIndex)
        {
            ref var file = ref fileSpan[(int)fileIndex];
            ref var set = ref FileAnalysisList[fileIndex].AttributeTypeSet;
            for (uint i = 12, end = set.Count; i != end ; i++)
            {
                var name = set[i];
                if (ContainsAttributeType(name))
                {
                    continue;
                }

                success = false;
                this.ErrorAdd_AttributeTypeNotFound(name, ref file, set.References[i].AsSpan());
            }
        }

        return success;
    }

    private void AddReferenceAndValidate_Call(ref Result result, AnalysisResult analysisResult, CallFunctionExpression call)
    {
        var arguments = call.Arguments.AsSpan();
        if (arguments.IsEmpty)
        {
            return;
        }

        ref var argument = ref arguments[0];
        ReadOnlySpan<char> span;
        switch (call.Kind)
        {
            case FunctionKind.isSelect:
                result.ErrorAdd($"Unknown action 'isSelect'.", call.TokenId);
                break;
            case FunctionKind.isWhoDead:
                result.ErrorAdd($"Unknown action 'isWhoDead'.", call.TokenId);
                break;
            case FunctionKind.isGameOver:
                result.ErrorAdd($"Unknown action 'isGameOver'.", call.TokenId);
                break;
            case FunctionKind.inPower:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("inPower", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", i + 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", i + 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Spot:
                                        argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Spot;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", i + 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("inPower", i + 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("inPower", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case FunctionKind.isPlayer:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isPlayer", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isPlayer", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isPlayer", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isPlayer", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isPlayer", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case FunctionKind.countUnit:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("countUnit", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("countUnit", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("countUnit", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("countUnit", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("countUnit", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case FunctionKind.isEnemy:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isEnemy", argument.TokenId, argument.TrailingTokenCount);
                }

                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isEnemy", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isEnemy", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case FunctionKind.isFriend:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isFriend", argument.TokenId, argument.TrailingTokenCount);
                }

                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isFriend", 2, "Unit, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isFriend", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case FunctionKind.isNpc:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isNpc", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Power:
                                        argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Power;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("isNpc", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("isNpc", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case FunctionKind.isAlive:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isAlive", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Power:
                                        argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Power;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("isAlive", i + 1, "Unit, Power, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("isAlive", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case FunctionKind.inBattle:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("inBattle", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", i + 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", i + 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Power:
                                        argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Power;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", i + 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("inBattle", i + 1, "Unit, Class, Power, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("inBattle", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case FunctionKind.isJoin:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isJoin", argument.TokenId, argument.TrailingTokenCount);
                }

                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 2, "Power, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 2, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 2, "Power, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isJoin", 2, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("isJoin", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case FunctionKind.getDistance:
                switch (arguments.Length)
                {
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("getDistance", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("getDistance", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("getDistance", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("getDistance", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                }
                break;
            case FunctionKind.isPostIn:
                switch (arguments.Length)
                {
                    case 3:
                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("isPostIn", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isPostIn", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("isPostIn", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("isPostIn", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("isPostIn", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 4:
                        break;
                    case 5:
                        break;
                }
                break;
        }
    }

    private void AddReferenceAndValidate_Call(ref Result result, AnalysisResult analysisResult, CallActionStatement call)
    {
        var arguments = call.Arguments.AsSpan();
        if (arguments.IsEmpty)
        {
            return;
        }

        ref var argument = ref arguments[0];
        ReadOnlySpan<char> span;
        switch (call.Kind)
        {
            case ActionKind.vc:
                result.ErrorAdd($"Unknown action 'vc'.", call.TokenId);
                break;
            case ActionKind.play:
                result.ErrorAdd($"Unknown action 'play'.", call.TokenId);
                break;
            case ActionKind.ppl1:
                result.ErrorAdd($"Unknown action 'ppl1'.", call.TokenId);
                break;
            case ActionKind.citom:
                result.ErrorAdd($"Unknown action 'citom'.", call.TokenId);
                break;
            case ActionKind.setbcg:
                result.ErrorAdd($"Unknown action 'setbcg'.", call.TokenId);
                break;
            case ActionKind.showCamp:
                result.ErrorAdd($"Unknown action 'showCamp'.", call.TokenId);
                break;
            case ActionKind.clickWait:
                result.ErrorAdd($"Unknown action 'clickWait'.", call.TokenId);
                break;
            case ActionKind.worldskin:
                result.ErrorAdd($"Unknown action 'worldskin'.", call.TokenId);
                break;
            case ActionKind.darkness_off:
                result.ErrorAdd($"Unknown action 'darkness_off'.", call.TokenId);
                break;
            case ActionKind.doGameEnding:
                result.ErrorAdd($"Unknown action 'doGameEnding'.", call.TokenId);
                break;
            case ActionKind.storeDeath:
                result.ErrorAdd($"Unknown action 'storeDeath'.", call.TokenId);
                break;
            case ActionKind.dialog:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("dialog", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("dialog", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("dialog", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.dialogF:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("dialogF", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("dialogF", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("dialogF", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.locate:
                switch (arguments.Length)
                {
                    case 1:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("locate", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("locate", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Spot:
                                            argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Spot;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("locate", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("locate", 1, "Unit, Spot, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("locate", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 2:
                        break;
                }
                break;
            case ActionKind.scroll:
                switch (arguments.Length)
                {
                    case 1:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Spot:
                                            argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Spot;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("scroll", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 2:
                        break;
                }
                break;
            case ActionKind.scroll2:
                switch (arguments.Length)
                {
                    case 1:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll2", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll2", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Spot:
                                            argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Spot;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll2", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("scroll2", 1, "Unit, Class, Spot, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("scroll2", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 2:
                        break;
                }
                break;
            case ActionKind.showSpotMark:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("showSpotMark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("showSpotMark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("showSpotMark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("showSpotMark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("showSpotMark", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.msg:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("msg", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("msg", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("msg", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("msg", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("msg", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("msg", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.msg2:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("msg2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("msg2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("msg2", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("msg2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("msg2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("msg2", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.talk:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("talk", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("talk", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("talk", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("talk", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("talk", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("talk", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.talk2:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("talk2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("talk2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("talk2", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("talk2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("talk2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("talk2", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.chat:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("chat", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("chat", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("chat", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("chat", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("chat", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("chat", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.chat2:
                switch (arguments.Length)
                {
                    case 1:
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("chat2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("chat2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("chat2", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("chat2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("chat2", 1, "Unit, Text, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                    }
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("chat2", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[2];
                        AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                        break;
                }
                break;
            case ActionKind.changeMaster:
                switch (arguments.Length)
                {
                    case 1:
                        break;
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("changeMaster", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeMaster", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Power:
                                            argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Power;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("changeMaster", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("changeMaster", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("changeMaster", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        break;
                }
                break;
            case ActionKind.select:
                argument = ref arguments[1];
                AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                break;
            case ActionKind.setPM:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("setPM", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setPM", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setPM", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setPM", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("setPM", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.addMoney:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("addMoney", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.pushGain:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("pushGain", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushGain", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushGain", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushGain", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("pushGain", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.setMoney:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("setMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("setMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("setMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("setMoney", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.formTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("formTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("formTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("formTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("formTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("formTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.pushForce:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("pushForce", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushForce", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushForce", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushForce", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("pushForce", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.pushMoney:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("pushMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushMoney", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("pushMoney", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.pushTrust:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("pushTrust", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushTrust", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushTrust", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushTrust", 1, "Unit, Power, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("pushTrust", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.speedTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("speedTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("speedTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("speedTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("speedTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("speedTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.removeSkill:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("removeSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("removeSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
                        if (Unsafe.IsNullRef(ref track))
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("removeSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Skill:
                                    argument.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Skill;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Skillset:
                                    argument.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Skillset;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("removeSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("removeSkill", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.storeTodoUnit:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeTodoUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("storeTodoUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeTodoUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("storeTodoUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("storeTodoUnit", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.storeAliveUnit:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAliveUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAliveUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAliveUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("storeAliveUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("storeAliveUnit", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.changePowerFlag:
                // ERROR 0

                break;
            case ActionKind.choice:
                argument = ref arguments[1];
                AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);

                }
                break;
            case ActionKind.addFriend:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("addFriend", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Race:
                                        argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Race;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("addFriend", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.eraseUnit2:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnit2", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnit2", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnit2", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnit2", 1, "Power, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("eraseUnit2", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.addPowerMerce:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("addPowerMerce", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Race:
                                        argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Race;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("addPowerMerce", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.addPowerStaff:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("addPowerStaff", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Race:
                                        argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Race;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("addPowerStaff", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.addPowerMerce2:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("addPowerMerce2", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Race:
                                        argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Race;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerMerce2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("addPowerMerce2", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.addPowerStaff2:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("addPowerStaff2", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Race:
                                        argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Race;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addPowerStaff2", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("addPowerStaff2", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.exit:
                if (arguments.Length <= 0)
                {
                    break;
                }
                if (argument.IsNumber)
                {
                    if (argument.Number != 0)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("exit", 1, "Number, CompoundText", argument.TokenId);                    }
                }
                else
                {
                    AddReferenceAndValidate_CompoundText(ref result, analysisResult, ref argument);
                }

                break;
            case ActionKind.ctrlTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("ctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("ctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("ctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("ctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("ctrlTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.freeTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("freeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("freeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("freeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("freeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("freeTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.haltTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("haltTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("haltTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("haltTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("haltTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("haltTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.eraseTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("eraseTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.sleepTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("sleepTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("sleepTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("sleepTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("sleepTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("sleepTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.activeTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("activeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("activeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("activeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("activeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("activeTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.removeTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("removeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("removeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("removeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("removeTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("removeTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.unctrlTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("unctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("unctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("unctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("unctrlTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("unctrlTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.retreatTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("retreatTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("retreatTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("retreatTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("retreatTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("retreatTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.eraseUnitTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnitTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnitTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnitTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseUnitTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("eraseUnitTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.addUnit:
                switch (arguments.Length)
                {
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("addUnit", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 2, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 2, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Power:
                                            argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Power;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Spot:
                                            argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Spot;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 2, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addUnit", 2, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("addUnit", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        break;
                }
                break;
            case ActionKind.aimTroop:
                switch (arguments.Length)
                {
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("aimTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("aimTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("aimTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("aimTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                }
                break;
            case ActionKind.skillTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("skillTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("skillTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("skillTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("skillTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("skillTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.pushCon:
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("pushCon", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushCon", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("pushCon", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("pushCon", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("pushCon", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.addTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("addTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("addTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("addTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("addTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                // ERROR 1
                break;
            case ActionKind.stopTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("stopTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 1; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", i + 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", i + 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", i + 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("stopTroop", i + 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("stopTroop", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.eraseSkill:
                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
                        if (Unsafe.IsNullRef(ref track))
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Skill:
                                    argument.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Skill;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Skillset:
                                    argument.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Skillset;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", 2, "Skill, Skillset, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("eraseSkill", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", i + 1, "Skill, Skillset, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", i + 1, "Skill, Skillset, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
                            if (Unsafe.IsNullRef(ref track))
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", i + 1, "Skill, Skillset, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Skill:
                                        argument.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Skill;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Skillset:
                                        argument.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Skillset;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseSkill", i + 1, "Skill, Skillset, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("eraseSkill", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.eraseFriend:
                if (arguments.Length <= 1)
                {
                    break;
                }
                argument = ref arguments[1];
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Race:
                                    argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Race;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", 2, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("eraseFriend", argument.TokenId, argument.TrailingTokenCount);
                }

                for (int i = 2; i < arguments.Length; ++i)
                {
                    argument = ref arguments[i];
                    if (argument.TrailingTokenCount == 0)
                    {
                        span = result.GetSpan(argument.TokenId);
                        if (span.IsEmpty)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else if (span[0] == '@')
                        {
                            if (span.Length == 1)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else
                            {
                                argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                argument.HasReference = true;
                            }
                        }
                        else
                        {
                            ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                            if (!Unsafe.IsNullRef(ref track))
                            {
                                switch (track.Kind)
                                {
                                    case ReferenceKind.Unit:
                                        argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Unit;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Class:
                                        argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Class;
                                        argument.HasReference = true;
                                        break;
                                    case ReferenceKind.Race:
                                        argument.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, argument.TokenId);
                                        argument.ReferenceKind = ReferenceKind.Race;
                                        argument.HasReference = true;
                                        break;
                                    default:
                                        result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                                        argument.HasReference = false;
                                        break;
                                }
                            }
                            else
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("eraseFriend", i + 1, "Race, Unit, Class, StringVariableReader", argument.TokenId);
                            }
                        }
                    }
                    else
                    {
                        result.ErrorAdd_InvalidMultipleTokenArgument("eraseFriend", argument.TokenId, argument.TrailingTokenCount);
                    }

                }
                break;
            case ActionKind.moveTroop:
                switch (arguments.Length)
                {
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 4:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                }
                break;
            case ActionKind.moveTroopFix:
                switch (arguments.Length)
                {
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 4:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("moveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("moveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                }
                break;
            case ActionKind.smoveTroop:
                switch (arguments.Length)
                {
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 4:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroop", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                }
                break;
            case ActionKind.smoveTroopFix:
                switch (arguments.Length)
                {
                    case 2:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        argument = ref arguments[1];
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 2, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 3:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                    case 4:
                        if (argument.TrailingTokenCount == 0)
                        {
                            span = result.GetSpan(argument.TokenId);
                            if (span.IsEmpty)
                            {
                                result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                            }
                            else if (span[0] == '@')
                            {
                                if (span.Length == 1)
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                                else
                                {
                                    argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.StringVariableReader;
                                    argument.HasReference = true;
                                }
                            }
                            else
                            {
                                ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                                if (!Unsafe.IsNullRef(ref track))
                                {
                                    switch (track.Kind)
                                    {
                                        case ReferenceKind.Unit:
                                            argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Unit;
                                            argument.HasReference = true;
                                            break;
                                        case ReferenceKind.Class:
                                            argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                            argument.ReferenceKind = ReferenceKind.Class;
                                            argument.HasReference = true;
                                            break;
                                        default:
                                            result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                            argument.HasReference = false;
                                            break;
                                    }
                                }
                                else
                                {
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("smoveTroopFix", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                }
                            }
                        }
                        else
                        {
                            result.ErrorAdd_InvalidMultipleTokenArgument("smoveTroopFix", argument.TokenId, argument.TrailingTokenCount);
                        }

                        break;
                }
                break;
            case ActionKind.spotmark:
                if (arguments.Length <= 0)
                {
                    break;
                }
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("spotmark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("spotmark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Power:
                                    argument.ReferenceId = analysisResult.PowerSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Power;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Spot:
                                    argument.ReferenceId = analysisResult.SpotSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Spot;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("spotmark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("spotmark", 1, "Unit, Power, Spot, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("spotmark", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
            case ActionKind.shiftTroop:
                if (argument.TrailingTokenCount == 0)
                {
                    span = result.GetSpan(argument.TokenId);
                    if (span.IsEmpty)
                    {
                        result.ErrorAdd_UnexpectedArgumentReferenceKind("shiftTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                    }
                    else if (span[0] == '@')
                    {
                        if (span.Length == 1)
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("shiftTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                        else
                        {
                            argument.ReferenceId = analysisResult.StringVariableReaderSet.GetOrAdd(span.Slice(1), argument.TokenId);
                            argument.ReferenceKind = ReferenceKind.StringVariableReader;
                            argument.HasReference = true;
                        }
                    }
                    else
                    {
                        ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
                        if (!Unsafe.IsNullRef(ref track))
                        {
                            switch (track.Kind)
                            {
                                case ReferenceKind.Unit:
                                    argument.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Unit;
                                    argument.HasReference = true;
                                    break;
                                case ReferenceKind.Class:
                                    argument.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, argument.TokenId);
                                    argument.ReferenceKind = ReferenceKind.Class;
                                    argument.HasReference = true;
                                    break;
                                default:
                                    result.ErrorAdd_UnexpectedArgumentReferenceKind("shiftTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                                    argument.HasReference = false;
                                    break;
                            }
                        }
                        else
                        {
                            result.ErrorAdd_UnexpectedArgumentReferenceKind("shiftTroop", 1, "Unit, Class, StringVariableReader", argument.TokenId);
                        }
                    }
                }
                else
                {
                    result.ErrorAdd_InvalidMultipleTokenArgument("shiftTroop", argument.TokenId, argument.TrailingTokenCount);
                }

                break;
        }
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref PowerNode node)
    {
        if (node.staff.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.staff.Value.Value.AsSpan())
            {
                SpecialTreatment_power_staff(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.staff.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_power_staff(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.merce.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_power_merce(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.merce.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_power_merce(ref result, analysisResult, ref node, ref value);
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref ClassNode node)
    {
        if (node.member.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.member.Value.Value.AsSpan())
            {
                SpecialTreatment_class_member(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.member.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_member(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.friend.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.friend.Value.Value.AsSpan())
            {
                SpecialTreatment_class_friend(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.friend.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_friend(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.merce.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_class_merce(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.merce.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_merce(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.skill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.skill.Value.Value.AsSpan())
            {
                SpecialTreatment_class_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.skill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.skill2.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.skill2.Value.Value.AsSpan())
            {
                SpecialTreatment_class_skill2(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.skill2.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_skill2(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.learn.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.learn.Value.Value.AsSpan())
            {
                SpecialTreatment_class_learn(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.learn.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_learn(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.delskill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.delskill.Value.Value.AsSpan())
            {
                SpecialTreatment_class_delskill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.delskill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_delskill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.delskill2.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.delskill2.Value.Value.AsSpan())
            {
                SpecialTreatment_class_delskill2(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.delskill2.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_delskill2(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.leader_skill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.leader_skill.Value.Value.AsSpan())
            {
                SpecialTreatment_class_leader_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.leader_skill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_leader_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.assist_skill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.assist_skill.Value.Value.AsSpan())
            {
                SpecialTreatment_class_assist_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.assist_skill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_assist_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.friend_ex.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.friend_ex.Value.Value.AsSpan())
            {
                SpecialTreatment_class_friend_ex(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.friend_ex.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_class_friend_ex(ref result, analysisResult, ref node, ref value);
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref DungeonNode node)
    {
        if (node.monster.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.monster.Value.Value.AsSpan())
            {
                SpecialTreatment_dungeon_monster(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.monster.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_dungeon_monster(ref result, analysisResult, ref node, ref value);
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref FieldNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref MovetypeNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref ObjectNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref RaceNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref SkillNode node)
    {
        if (node.image is { HasValue: true })
        {
            SpecialTreatment_skill_image(ref result, analysisResult, ref node, ref node.image.Value);
        }
        if (node.yorozu is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.yorozu.Value.AsSpan())
            {
                SpecialTreatment_skill_yorozu(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.attr is { HasValue: true })
        {
            SpecialTreatment_skill_attr(ref result, analysisResult, ref node, ref node.attr.Value);
        }
        if (node.add is { HasValue: true })
        {
            SpecialTreatment_skill_add(ref result, analysisResult, ref node, ref node.add.Value);
        }
        if (node.add2 is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.add2.Value.AsSpan())
            {
                SpecialTreatment_skill_add2(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.homing is { HasValue: true })
        {
            SpecialTreatment_skill_homing(ref result, analysisResult, ref node, ref node.homing.Value);
        }
        if (node.offset is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.offset.Value.AsSpan())
            {
                SpecialTreatment_skill_offset(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.friend is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.friend.Value.AsSpan())
            {
                SpecialTreatment_skill_friend(ref result, analysisResult, ref node, ref value);
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref SkillsetNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref SpotNode node)
    {
        if (node.merce.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_spot_merce(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.merce.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_spot_merce(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.monster.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.monster.Value.Value.AsSpan())
            {
                SpecialTreatment_spot_monster(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.monster.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_spot_monster(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.member.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.member.Value.Value.AsSpan())
            {
                SpecialTreatment_spot_member(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.member.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_spot_member(ref result, analysisResult, ref node, ref value);
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref UnitNode node)
    {
        if (node.member.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.member.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_member(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.member.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_member(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.friend.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.friend.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_friend(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.friend.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_friend(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.merce.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.merce.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_merce(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.merce.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_merce(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.skill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.skill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.skill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.skill2.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.skill2.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_skill2(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.skill2.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_skill2(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.learn.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.learn.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_learn(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.learn.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_learn(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.delskill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.delskill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_delskill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.delskill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_delskill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.delskill2.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.delskill2.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_delskill2(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.delskill2.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_delskill2(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.leader_skill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.leader_skill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_leader_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.leader_skill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_leader_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.assist_skill.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.assist_skill.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_assist_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.assist_skill.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_assist_skill(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.staff.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.staff.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_staff(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.staff.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_staff(ref result, analysisResult, ref node, ref value);
            }
        }
        if (node.castle_guard.Value is { HasValue: true, Value.Count: > 0 })
        {
            foreach (ref var value in node.castle_guard.Value.Value.AsSpan())
            {
                SpecialTreatment_unit_castle_guard(ref result, analysisResult, ref node, ref value);
            }
        }
        foreach (var element in node.castle_guard.Variants)
        {
            if (element is not { HasValue: true, Value.Count: > 0 })
            {
                continue;
            }
            foreach (ref var value in element.Value.AsSpan())
            {
                SpecialTreatment_unit_castle_guard(ref result, analysisResult, ref node, ref value);
            }
        }
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref VoiceNode node)
    {
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref ScenarioNode node)
    {
        foreach (var statement in node.Statements.AsSpan())
		{
            if (statement is not null)
            {
			    AddReferenceAndValidate_Statement(ref result, analysisResult, statement);
            }
		}
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref EventNode node)
    {
        foreach (var statement in node.Statements.AsSpan())
		{
            if (statement is not null)
            {
			    AddReferenceAndValidate_Statement(ref result, analysisResult, statement);
            }
		}
    }

    private void AddReferenceAndValidate(ref Result result, AnalysisResult analysisResult, ref StoryNode node)
    {
        foreach (var statement in node.Statements.AsSpan())
		{
            if (statement is not null)
            {
			    AddReferenceAndValidate_Statement(ref result, analysisResult, statement);
            }
		}
    }

    private void SpecialTreatment_power_staff(ref Result result, AnalysisResult analysisResult, ref PowerNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Power", "staff", "Race, Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Power", "staff", "Race, Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Power", "staff", "Race, Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_power_merce(ref Result result, AnalysisResult analysisResult, ref PowerNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Power", "merce", "Race, Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Power", "merce", "Race, Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Power", "merce", "Race, Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_member(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "member", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "member", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "member", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_merce(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "merce", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "merce", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "merce", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_skill(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "skill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "skill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "skill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_skill2(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "skill2", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "skill2", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "skill2", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_learn(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "learn", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "learn", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "learn", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_delskill(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "delskill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "delskill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "delskill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_delskill2(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "delskill2", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "delskill2", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "delskill2", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_leader_skill(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "leader_skill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "leader_skill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "leader_skill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_assist_skill(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "assist_skill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "assist_skill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "assist_skill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_class_friend_ex(ref Result result, AnalysisResult analysisResult, ref ClassNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "friend_ex", "Race, Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Class", "friend_ex", "Race, Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Class", "friend_ex", "Race, Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_dungeon_monster(ref Result result, AnalysisResult analysisResult, ref DungeonNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Dungeon", "monster", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Dungeon", "monster", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Dungeon", "monster", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_skill_friend(ref Result result, AnalysisResult analysisResult, ref SkillNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Skill", "friend", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Skill", "friend", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Skill", "friend", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_spot_merce(ref Result result, AnalysisResult analysisResult, ref SpotNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "merce", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "merce", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "merce", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_spot_monster(ref Result result, AnalysisResult analysisResult, ref SpotNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "monster", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "monster", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "monster", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_spot_member(ref Result result, AnalysisResult analysisResult, ref SpotNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "member", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "member", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Spot", "member", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_member(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "member", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "member", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "member", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_merce(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "merce", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "merce", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "merce", "Unit, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_skill(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "skill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "skill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "skill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_skill2(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "skill2", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "skill2", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "skill2", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_learn(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "learn", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "learn", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "learn", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_delskill(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "delskill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "delskill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "delskill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_delskill2(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "delskill2", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "delskill2", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "delskill2", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_leader_skill(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "leader_skill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "leader_skill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "leader_skill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_assist_skill(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "assist_skill", "Skill, Skillset", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_SkillSkillset.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "assist_skill", "Skill, Skillset", value.Text);
            return;
        }
        switch (reference.Kind)
        {
           case ReferenceKind.Skill:
               value.ReferenceId = analysisResult.SkillSet.GetOrAdd(span, value.Text);
               value.ReferenceKind = ReferenceKind.Skill;
               value.HasReference = true;
               break;
            case ReferenceKind.Skillset:
                value.ReferenceId = analysisResult.SkillsetSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Skillset;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "assist_skill", "Skill, Skillset", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_staff(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "staff", "Race, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "staff", "Race, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            case ReferenceKind.Race:
                value.ReferenceId = analysisResult.RaceSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Race;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "staff", "Race, Class", value.Text);
                break;
        }
    }

    private void SpecialTreatment_unit_castle_guard(ref Result result, AnalysisResult analysisResult, ref UnitNode node, ref Pair_NullableString_NullableInt value)
    {
        if (!value.HasText)
        {
            return;
        }
        var span = result.GetSpan(value.Text);
        if (value.TrailingTokenCount != 0)
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "castle_guard", "Unit, Class", value.Text);
            return;
        }
        ref var reference = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(span);
        if (Unsafe.IsNullRef(ref reference))
        {
            result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "castle_guard", "Unit, Class", value.Text);
            return;
        }
        switch (reference.Kind)
        {
            case ReferenceKind.Unit:
                value.ReferenceId = analysisResult.UnitSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Unit;
                value.HasReference = true;
                break;
            case ReferenceKind.Class:
                value.ReferenceId = analysisResult.ClassSet.GetOrAdd(span, value.Text);
                value.ReferenceKind = ReferenceKind.Class;
                value.HasReference = true;
                break;
            default:
                result.ErrorAdd_UnexpectedElementReferenceKind("Unit", "castle_guard", "Unit, Class", value.Text);
                break;
        }
    }
}
