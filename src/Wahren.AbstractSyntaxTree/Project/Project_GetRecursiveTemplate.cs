#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
using Wahren.AbstractSyntaxTree.Parser;

namespace Wahren.AbstractSyntaxTree.Project;

public sealed partial class Project
{

	public Pair_NullableString_NullableIntElement? GetRecursive_castle_battle(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.castle_battle.Value is not null)
			{
				return node.castle_battle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_event(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.@event.Value is not null)
			{
				return node.@event.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.name.Value is not null)
			{
				return node.name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_help(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.help.Value is not null)
			{
				return node.help.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_master(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.master.Value is not null)
			{
				return node.master.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_flag(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.flag.Value is not null)
			{
				return node.flag.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bgm(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.bgm.Value is not null)
			{
				return node.bgm.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_volume(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.volume.Value is not null)
			{
				return node.volume.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_diplomacy(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.diplomacy.Value is not null)
			{
				return node.diplomacy.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable_select(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.enable_select.Value is not null)
			{
				return node.enable_select.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable_talent(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.enable_talent.Value is not null)
			{
				return node.enable_talent.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_free_raise(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.free_raise.Value is not null)
			{
				return node.free_raise.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_money(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.money.Value is not null)
			{
				return node.money.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_home(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.home.Value is not null)
			{
				return node.home.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_fix(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.fix.Value is not null)
			{
				return node.fix.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_diplo(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.diplo.Value is not null)
			{
				return node.diplo.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_league(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.league.Value is not null)
			{
				return node.league.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_enemy_power(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.enemy_power.Value is not null)
			{
				return node.enemy_power.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_staff(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.staff.Value is not null)
			{
				return node.staff.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_merce(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.merce.Value is not null)
			{
				return node.merce.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_training_average(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.training_average.Value is not null)
			{
				return node.training_average.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_base_merits(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.base_merits.Value is not null)
			{
				return node.base_merits.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_merits(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.merits.Value is not null)
			{
				return node.merits.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_base_loyal(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.base_loyal.Value is not null)
			{
				return node.base_loyal.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_loyals(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.loyals.Value is not null)
			{
				return node.loyals.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_head(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.head.Value is not null)
			{
				return node.head.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_head2(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.head2.Value is not null)
			{
				return node.head2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_head3(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.head3.Value is not null)
			{
				return node.head3.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_head4(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.head4.Value is not null)
			{
				return node.head4.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_head5(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.head5.Value is not null)
			{
				return node.head5.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_head6(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.head6.Value is not null)
			{
				return node.head6.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_diff(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.diff.Value is not null)
			{
				return node.diff.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_yabo(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.yabo.Value is not null)
			{
				return node.yabo.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_kosen(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.kosen.Value is not null)
			{
				return node.kosen.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_text(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.text.Value is not null)
			{
				return node.text.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.member.Value is not null)
			{
				return node.member.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_friend(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.friend.Value is not null)
			{
				return node.friend.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_master2(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.master2.Value is not null)
			{
				return node.master2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_master3(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.master3.Value is not null)
			{
				return node.master3.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_master4(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.master4.Value is not null)
			{
				return node.master4.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_master5(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.master5.Value is not null)
			{
				return node.master5.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_master6(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.master6.Value is not null)
			{
				return node.master6.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.enable.Value is not null)
			{
				return node.enable.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_training_up(ref Result result, ref PowerNode node)
	{
		do
		{
			if (node.training_up.Value is not null)
			{
				return node.training_up.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.PowerNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_troop_sort(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.troop_sort.Value is not null)
			{
				return node.troop_sort.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_stealth(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.stealth.Value is not null)
			{
				return node.stealth.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_free_move(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.free_move.Value is not null)
			{
				return node.free_move.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.name.Value is not null)
			{
				return node.name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_help(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.help.Value is not null)
			{
				return node.help.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sex(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.sex.Value is not null)
			{
				return node.sex.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_a(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.a.Value is not null)
			{
				return node.a.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_h(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.h.Value is not null)
			{
				return node.h.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_w(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.w.Value is not null)
			{
				return node.w.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_text(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.text.Value is not null)
			{
				return node.text.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sub_image_even(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.sub_image_even.Value is not null)
			{
				return node.sub_image_even.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_yorozu(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.yorozu.Value is not null)
			{
				return node.yorozu.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_radius(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.radius.Value is not null)
			{
				return node.radius.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_radius_press(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.radius_press.Value is not null)
			{
				return node.radius_press.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_escape(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.no_escape.Value is not null)
			{
				return node.no_escape.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_regular(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.no_regular.Value is not null)
			{
				return node.no_regular.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_knock(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.no_knock.Value is not null)
			{
				return node.no_knock.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_cover(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.no_cover.Value is not null)
			{
				return node.no_cover.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dead_event(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.dead_event.Value is not null)
			{
				return node.dead_event.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_beast_unit(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.beast_unit.Value is not null)
			{
				return node.beast_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_summon_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.summon_max.Value is not null)
			{
				return node.summon_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_summon_level(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.summon_level.Value is not null)
			{
				return node.summon_level.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attack_range(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.attack_range.Value is not null)
			{
				return node.attack_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_escape_range(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.escape_range.Value is not null)
			{
				return node.escape_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_escape_run(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.escape_run.Value is not null)
			{
				return node.escape_run.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hand_range(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hand_range.Value is not null)
			{
				return node.hand_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_wake_range(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.wake_range.Value is not null)
			{
				return node.wake_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_view_range(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.view_range.Value is not null)
			{
				return node.view_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_cavalry_range(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.cavalry_range.Value is not null)
			{
				return node.cavalry_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_view_unit(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.view_unit.Value is not null)
			{
				return node.view_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_view_unit(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.force_view_unit.Value is not null)
			{
				return node.force_view_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_blind_unit(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.force_blind_unit.Value is not null)
			{
				return node.force_blind_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_satellite(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.satellite.Value is not null)
			{
				return node.satellite.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hasexp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hasexp.Value is not null)
			{
				return node.hasexp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_brave(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.brave.Value is not null)
			{
				return node.brave.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_level(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.level.Value is not null)
			{
				return node.level.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hp.Value is not null)
			{
				return node.hp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.mp.Value is not null)
			{
				return node.mp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attack(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.attack.Value is not null)
			{
				return node.attack.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defense(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.defense.Value is not null)
			{
				return node.defense.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magic(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magic.Value is not null)
			{
				return node.magic.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdef(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magdef.Value is not null)
			{
				return node.magdef.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speed(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.speed.Value is not null)
			{
				return node.speed.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dext(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.dext.Value is not null)
			{
				return node.dext.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_move(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.move.Value is not null)
			{
				return node.move.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprec(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hprec.Value is not null)
			{
				return node.hprec.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprec(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.mprec.Value is not null)
			{
				return node.mprec.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_heal_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.heal_max.Value is not null)
			{
				return node.heal_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attack_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.attack_max.Value is not null)
			{
				return node.attack_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defense_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.defense_max.Value is not null)
			{
				return node.defense_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magic_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magic_max.Value is not null)
			{
				return node.magic_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdef_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magdef_max.Value is not null)
			{
				return node.magdef_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speed_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.speed_max.Value is not null)
			{
				return node.speed_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dext_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.dext_max.Value is not null)
			{
				return node.dext_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_move_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.move_max.Value is not null)
			{
				return node.move_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprec_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hprec_max.Value is not null)
			{
				return node.hprec_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprec_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.mprec_max.Value is not null)
			{
				return node.mprec_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_movetype(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.movetype.Value is not null)
			{
				return node.movetype.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hpUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hpUp.Value is not null)
			{
				return node.hpUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mpUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.mpUp.Value is not null)
			{
				return node.mpUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attackUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.attackUp.Value is not null)
			{
				return node.attackUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defenseUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.defenseUp.Value is not null)
			{
				return node.defenseUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magicUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magicUp.Value is not null)
			{
				return node.magicUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdefUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magdefUp.Value is not null)
			{
				return node.magdefUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speedUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.speedUp.Value is not null)
			{
				return node.speedUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dextUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.dextUp.Value is not null)
			{
				return node.dextUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_moveUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.moveUp.Value is not null)
			{
				return node.moveUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprecUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hprecUp.Value is not null)
			{
				return node.hprecUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprecUp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.mprecUp.Value is not null)
			{
				return node.mprecUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hpMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hpMax.Value is not null)
			{
				return node.hpMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mpMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.mpMax.Value is not null)
			{
				return node.mpMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attackMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.attackMax.Value is not null)
			{
				return node.attackMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defenseMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.defenseMax.Value is not null)
			{
				return node.defenseMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magicMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magicMax.Value is not null)
			{
				return node.magicMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdefMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.magdefMax.Value is not null)
			{
				return node.magdefMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speedMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.speedMax.Value is not null)
			{
				return node.speedMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dextMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.dextMax.Value is not null)
			{
				return node.dextMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_moveMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.moveMax.Value is not null)
			{
				return node.moveMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprecMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.hprecMax.Value is not null)
			{
				return node.hprecMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprecMax(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.mprecMax.Value is not null)
			{
				return node.mprecMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_race(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.race.Value is not null)
			{
				return node.race.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sortkey(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.sortkey.Value is not null)
			{
				return node.sortkey.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture.Value is not null)
			{
				return node.picture.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_detail(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture_detail.Value is not null)
			{
				return node.picture_detail.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_menu(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture_menu.Value is not null)
			{
				return node.picture_menu.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_floor(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture_floor.Value is not null)
			{
				return node.picture_floor.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_shift(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture_shift.Value is not null)
			{
				return node.picture_shift.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_shift_up(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture_shift_up.Value is not null)
			{
				return node.picture_shift_up.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_center(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture_center.Value is not null)
			{
				return node.picture_center.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_back(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.picture_back.Value is not null)
			{
				return node.picture_back.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_price(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.price.Value is not null)
			{
				return node.price.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_cost(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.cost.Value is not null)
			{
				return node.cost.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_finance(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.finance.Value is not null)
			{
				return node.finance.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_tkool(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.tkool.Value is not null)
			{
				return node.tkool.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_keep_form(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.keep_form.Value is not null)
			{
				return node.keep_form.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_breast_width(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.breast_width.Value is not null)
			{
				return node.breast_width.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_medical(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.medical.Value is not null)
			{
				return node.medical.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_active(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.active.Value is not null)
			{
				return node.active.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_activenum(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.activenum.Value is not null)
			{
				return node.activenum.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_handle(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.handle.Value is not null)
			{
				return node.handle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_red(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.red.Value is not null)
			{
				return node.red.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_rank_text(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.rank_text.Value is not null)
			{
				return node.rank_text.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_training(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.no_training.Value is not null)
			{
				return node.no_training.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_voice(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.force_voice.Value is not null)
			{
				return node.force_voice.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_face(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.face.Value is not null)
			{
				return node.face.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_same_friend(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.same_friend.Value is not null)
			{
				return node.same_friend.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_same_call(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.same_call.Value is not null)
			{
				return node.same_call.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.member.Value is not null)
			{
				return node.member.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_level_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.level_max.Value is not null)
			{
				return node.level_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_exp(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.exp.Value is not null)
			{
				return node.exp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_exp_mul(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.exp_mul.Value is not null)
			{
				return node.exp_mul.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_exp_max(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.exp_max.Value is not null)
			{
				return node.exp_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_line(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.line.Value is not null)
			{
				return node.line.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.image.Value is not null)
			{
				return node.image.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sub_image(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.sub_image.Value is not null)
			{
				return node.sub_image.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_politics(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.politics.Value is not null)
			{
				return node.politics.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_element_lost(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.element_lost.Value is not null)
			{
				return node.element_lost.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_fkey(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.fkey.Value is not null)
			{
				return node.fkey.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_friend(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.friend.Value is not null)
			{
				return node.friend.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_merce(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.merce.Value is not null)
			{
				return node.merce.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_consti(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.consti.Value is not null)
			{
				return node.consti.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_multi(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.multi.Value is not null)
			{
				return node.multi.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_lost_corpse(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.lost_corpse.Value is not null)
			{
				return node.lost_corpse.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_add_vassal(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.add_vassal.Value is not null)
			{
				return node.add_vassal.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_value(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.value.Value is not null)
			{
				return node.value.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_break(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.@break.Value is not null)
			{
				return node.@break.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_scream(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.scream.Value is not null)
			{
				return node.scream.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_skill(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.skill.Value is not null)
			{
				return node.skill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_skill2(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.skill2.Value is not null)
			{
				return node.skill2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_learn(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.learn.Value is not null)
			{
				return node.learn.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_delskill(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.delskill.Value is not null)
			{
				return node.delskill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_delskill2(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.delskill2.Value is not null)
			{
				return node.delskill2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_item(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.item.Value is not null)
			{
				return node.item.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_leader_skill(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.leader_skill.Value is not null)
			{
				return node.leader_skill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_assist_skill(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.assist_skill.Value is not null)
			{
				return node.assist_skill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image2(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.image2.Value is not null)
			{
				return node.image2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sub_image2(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.sub_image2.Value is not null)
			{
				return node.sub_image2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_unique(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.unique.Value is not null)
			{
				return node.unique.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_same_sex(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.same_sex.Value is not null)
			{
				return node.same_sex.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_change(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.change.Value is not null)
			{
				return node.change.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_friend_ex(ref Result result, ref ClassNode node)
	{
		do
		{
			if (node.friend_ex.Value is not null)
			{
				return node.friend_ex.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ClassNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.name.Value is not null)
			{
				return node.name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_max(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.max.Value is not null)
			{
				return node.max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_move_speed(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.move_speed.Value is not null)
			{
				return node.move_speed.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_prefix(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.prefix.Value is not null)
			{
				return node.prefix.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_suffix(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.suffix.Value is not null)
			{
				return node.suffix.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_lv_adjust(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.lv_adjust.Value is not null)
			{
				return node.lv_adjust.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_open(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.open.Value is not null)
			{
				return node.open.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_limit(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.limit.Value is not null)
			{
				return node.limit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bgm(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.bgm.Value is not null)
			{
				return node.bgm.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_volume(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.volume.Value is not null)
			{
				return node.volume.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_blind(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.blind.Value is not null)
			{
				return node.blind.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_base_level(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.base_level.Value is not null)
			{
				return node.base_level.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_color(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.color.Value is not null)
			{
				return node.color.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_map(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.map.Value is not null)
			{
				return node.map.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_floor(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.floor.Value is not null)
			{
				return node.floor.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_wall(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.wall.Value is not null)
			{
				return node.wall.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_start(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.start.Value is not null)
			{
				return node.start.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_goal(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.goal.Value is not null)
			{
				return node.goal.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_monster(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.monster.Value is not null)
			{
				return node.monster.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_monster_num(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.monster_num.Value is not null)
			{
				return node.monster_num.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_box(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.box.Value is not null)
			{
				return node.box.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_item(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.item.Value is not null)
			{
				return node.item.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item_num(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.item_num.Value is not null)
			{
				return node.item_num.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item_text(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.item_text.Value is not null)
			{
				return node.item_text.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_home(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.home.Value is not null)
			{
				return node.home.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_ray(ref Result result, ref DungeonNode node)
	{
		do
		{
			if (node.ray.Value is not null)
			{
				return node.ray.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Dungeon.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.DungeonNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_type(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.type is not null)
			{
				return node.type;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attr(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.attr is not null)
			{
				return node.attr;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_color(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.color is not null)
			{
				return node.color;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_id(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.id is not null)
			{
				return node.id;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_edge(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.edge is not null)
			{
				return node.edge;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_joint(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.joint is not null)
			{
				return node.joint;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.image is not null)
			{
				return node.image;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_add2(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.add2 is not null)
			{
				return node.add2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.member is not null)
			{
				return node.member;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_alt(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.alt is not null)
			{
				return node.alt;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_alt_max(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.alt_max is not null)
			{
				return node.alt_max;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_smooth(ref Result result, ref FieldNode node)
	{
		do
		{
			if (node.smooth is not null)
			{
				return node.smooth;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Field.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.FieldNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref MovetypeNode node)
	{
		do
		{
			if (node.name is not null)
			{
				return node.name;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Movetype.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.MovetypeNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_help(ref Result result, ref MovetypeNode node)
	{
		do
		{
			if (node.help is not null)
			{
				return node.help;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Movetype.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.MovetypeNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_consti(ref Result result, ref MovetypeNode node)
	{
		do
		{
			if (node.consti is not null)
			{
				return node.consti;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Movetype.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.MovetypeNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_skill(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.skill is not null)
			{
				return node.skill;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_front(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.front is not null)
			{
				return node.front;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_width(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.width is not null)
			{
				return node.width;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_height(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.height is not null)
			{
				return node.height;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_alpha(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.alpha is not null)
			{
				return node.alpha;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_type(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.type is not null)
			{
				return node.type;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_breakfire(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.breakfire is not null)
			{
				return node.breakfire;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_color(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.color is not null)
			{
				return node.color;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_land_base(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.land_base is not null)
			{
				return node.land_base;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_stop(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.no_stop is not null)
			{
				return node.no_stop;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_wall2(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.no_wall2 is not null)
			{
				return node.no_wall2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_arc_hit(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.no_arc_hit is not null)
			{
				return node.no_arc_hit;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_radius(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.radius is not null)
			{
				return node.radius;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_blk(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.blk is not null)
			{
				return node.blk;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_w(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.w is not null)
			{
				return node.w;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_h(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.h is not null)
			{
				return node.h;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_a(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.a is not null)
			{
				return node.a;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.image is not null)
			{
				return node.image;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image2(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.image2 is not null)
			{
				return node.image2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image2_w(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.image2_w is not null)
			{
				return node.image2_w;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image2_h(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.image2_h is not null)
			{
				return node.image2_h;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image2_a(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.image2_a is not null)
			{
				return node.image2_a;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.member is not null)
			{
				return node.member;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ground(ref Result result, ref ObjectNode node)
	{
		do
		{
			if (node.ground is not null)
			{
				return node.ground;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Object.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ObjectNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref RaceNode node)
	{
		do
		{
			if (node.name.Value is not null)
			{
				return node.name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.RaceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_align(ref Result result, ref RaceNode node)
	{
		do
		{
			if (node.align.Value is not null)
			{
				return node.align.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.RaceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_brave(ref Result result, ref RaceNode node)
	{
		do
		{
			if (node.brave.Value is not null)
			{
				return node.brave.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.RaceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_consti(ref Result result, ref RaceNode node)
	{
		do
		{
			if (node.consti.Value is not null)
			{
				return node.consti.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.RaceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_movetype(ref Result result, ref RaceNode node)
	{
		do
		{
			if (node.movetype.Value is not null)
			{
				return node.movetype.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.RaceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bright(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.bright is not null)
			{
				return node.bright;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_func(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.func is not null)
			{
				return node.func;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.name is not null)
			{
				return node.name;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_icon(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.icon is not null)
			{
				return node.icon;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_fkey(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.fkey is not null)
			{
				return node.fkey;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sortkey(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.sortkey is not null)
			{
				return node.sortkey;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_special(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.special is not null)
			{
				return node.special;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_delay(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.delay is not null)
			{
				return node.delay;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_gun_delay(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.gun_delay is not null)
			{
				return node.gun_delay;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_quickreload(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.quickreload is not null)
			{
				return node.quickreload;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_help(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.help is not null)
			{
				return node.help;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hide_help(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.hide_help is not null)
			{
				return node.hide_help;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_sound(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.sound is not null)
			{
				return node.sound;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_msg(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.msg.Value is not null)
			{
				return node.msg.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.picture.Value is not null)
			{
				return node.picture.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_cutin(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.cutin is not null)
			{
				return node.cutin;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_value(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.value is not null)
			{
				return node.value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_talent(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.talent is not null)
			{
				return node.talent;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_exp_per(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.exp_per is not null)
			{
				return node.exp_per;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_movetype(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.movetype is not null)
			{
				return node.movetype;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_type(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.type is not null)
			{
				return node.type;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_color(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.color is not null)
			{
				return node.color;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_w(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.w is not null)
			{
				return node.w;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_h(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.h is not null)
			{
				return node.h;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_a(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.a is not null)
			{
				return node.a;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mp(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.mp is not null)
			{
				return node.mp;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.image is not null)
			{
				return node.image;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_alpha_tip(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.alpha_tip is not null)
			{
				return node.alpha_tip;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_alpha_butt(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.alpha_butt is not null)
			{
				return node.alpha_butt;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_anime(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.anime is not null)
			{
				return node.anime;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_anime_interval(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.anime_interval is not null)
			{
				return node.anime_interval;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_center(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.center is not null)
			{
				return node.center;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ground(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.ground is not null)
			{
				return node.ground;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_d360(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.d360 is not null)
			{
				return node.d360;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_d360_adj(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.d360_adj is not null)
			{
				return node.d360_adj;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_rotate(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.rotate is not null)
			{
				return node.rotate;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_direct(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.direct is not null)
			{
				return node.direct;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_interval(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_interval is not null)
			{
				return node.resize_interval;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_start(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_start is not null)
			{
				return node.resize_start;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_reverse(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_reverse is not null)
			{
				return node.resize_reverse;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_w(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_w is not null)
			{
				return node.resize_w;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_w_start(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_w_start is not null)
			{
				return node.resize_w_start;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_w_max(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_w_max is not null)
			{
				return node.resize_w_max;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_w_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_w_min is not null)
			{
				return node.resize_w_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_h_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_h_min is not null)
			{
				return node.resize_h_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_h_max(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_h_max is not null)
			{
				return node.resize_h_max;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_h_start(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_h_start is not null)
			{
				return node.resize_h_start;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_h(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_h is not null)
			{
				return node.resize_h;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_x(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_x is not null)
			{
				return node.resize_x;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_x_start(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_x_start is not null)
			{
				return node.resize_x_start;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_x_max(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_x_max is not null)
			{
				return node.resize_x_max;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_x_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_x_min is not null)
			{
				return node.resize_x_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_y_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_y_min is not null)
			{
				return node.resize_y_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_y_max(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_y_max is not null)
			{
				return node.resize_y_max;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_y_start(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_y_start is not null)
			{
				return node.resize_y_start;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_y(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_y is not null)
			{
				return node.resize_y;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_a(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_a is not null)
			{
				return node.resize_a;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_s(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_s is not null)
			{
				return node.resize_s;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_a_start(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_a_start is not null)
			{
				return node.resize_a_start;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_s_start(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_s_start is not null)
			{
				return node.resize_s_start;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_a_max(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_a_max is not null)
			{
				return node.resize_a_max;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_s_max(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_s_max is not null)
			{
				return node.resize_s_max;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_a_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_a_min is not null)
			{
				return node.resize_a_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_resize_s_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.resize_s_min is not null)
			{
				return node.resize_s_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_fire(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.force_fire is not null)
			{
				return node.force_fire;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_slow_per(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.slow_per is not null)
			{
				return node.slow_per;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_slow_time(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.slow_time is not null)
			{
				return node.slow_time;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_slide(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.slide is not null)
			{
				return node.slide;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_slide_speed(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.slide_speed is not null)
			{
				return node.slide_speed;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_slide_delay(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.slide_delay is not null)
			{
				return node.slide_delay;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_slide_stamp(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.slide_stamp is not null)
			{
				return node.slide_stamp;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_wait_time(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.wait_time is not null)
			{
				return node.wait_time;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_wait_time2(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.wait_time2 is not null)
			{
				return node.wait_time2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_shake(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.shake is not null)
			{
				return node.shake;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_ray(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.ray is not null)
			{
				return node.ray;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_ray(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.force_ray is not null)
			{
				return node.force_ray;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_flash(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.flash is not null)
			{
				return node.flash;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_flash_anime(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.flash_anime is not null)
			{
				return node.flash_anime;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_flash_image(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.flash_image is not null)
			{
				return node.flash_image;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_collision(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.collision is not null)
			{
				return node.collision;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_afterdeath(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.afterdeath is not null)
			{
				return node.afterdeath;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_afterhit(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.afterhit is not null)
			{
				return node.afterhit;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_yorozu(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.yorozu is not null)
			{
				return node.yorozu;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_str(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.str is not null)
			{
				return node.str;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_str_ratio(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.str_ratio is not null)
			{
				return node.str_ratio;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attr(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.attr is not null)
			{
				return node.attr;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_add(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.add is not null)
			{
				return node.add;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_add2(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.add2 is not null)
			{
				return node.add2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_add_all(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.add_all is not null)
			{
				return node.add_all;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_add_per(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.add_per is not null)
			{
				return node.add_per;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_damage(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.damage is not null)
			{
				return node.damage;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_damage_range_adjust(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.damage_range_adjust is not null)
			{
				return node.damage_range_adjust;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attack_us(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.attack_us is not null)
			{
				return node.attack_us;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_allfunc(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.allfunc is not null)
			{
				return node.allfunc;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bom(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.bom is not null)
			{
				return node.bom;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_homing(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.homing is not null)
			{
				return node.homing;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_homing2(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.homing2 is not null)
			{
				return node.homing2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_forward(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.forward is not null)
			{
				return node.forward;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_far(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.far is not null)
			{
				return node.far;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hard(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.hard is not null)
			{
				return node.hard;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hard2(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.hard2 is not null)
			{
				return node.hard2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_onehit(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.onehit is not null)
			{
				return node.onehit;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_offset(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.offset is not null)
			{
				return node.offset;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_offset_attr(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.offset_attr is not null)
			{
				return node.offset_attr;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_knock(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.knock is not null)
			{
				return node.knock;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_knock_speed(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.knock_speed is not null)
			{
				return node.knock_speed;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_knock_power(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.knock_power is not null)
			{
				return node.knock_power;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_range(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.range is not null)
			{
				return node.range;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_range_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.range_min is not null)
			{
				return node.range_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_check(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.check is not null)
			{
				return node.check;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speed(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.speed is not null)
			{
				return node.speed;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_wave(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.wave is not null)
			{
				return node.wave;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_origin(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.origin is not null)
			{
				return node.origin;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_random_space(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.random_space is not null)
			{
				return node.random_space;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_random_space_min(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.random_space_min is not null)
			{
				return node.random_space_min;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_time(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.time is not null)
			{
				return node.time;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_height(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.height is not null)
			{
				return node.height;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_rush(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.rush is not null)
			{
				return node.rush;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_rush_interval(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.rush_interval is not null)
			{
				return node.rush_interval;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_rush_degree(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.rush_degree is not null)
			{
				return node.rush_degree;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_rush_random_degree(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.rush_random_degree is not null)
			{
				return node.rush_random_degree;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_follow(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.follow is not null)
			{
				return node.follow;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_start_degree(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.start_degree is not null)
			{
				return node.start_degree;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_start_degree_fix(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.start_degree_fix is not null)
			{
				return node.start_degree_fix;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_start_degree_turnunit(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.start_degree_turnunit is not null)
			{
				return node.start_degree_turnunit;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_start_degree_type(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.start_degree_type is not null)
			{
				return node.start_degree_type;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_start_random_degree(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.start_random_degree is not null)
			{
				return node.start_random_degree;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_drop_degree(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.drop_degree is not null)
			{
				return node.drop_degree;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_drop_degree2(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.drop_degree2 is not null)
			{
				return node.drop_degree2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_joint_skill(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.joint_skill is not null)
			{
				return node.joint_skill;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_send_target(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.send_target is not null)
			{
				return node.send_target;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_send_image_degree(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.send_image_degree is not null)
			{
				return node.send_image_degree;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_next(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next is not null)
			{
				return node.next;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_next2(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next2 is not null)
			{
				return node.next2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_next3(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next3 is not null)
			{
				return node.next3;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_next4(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next4 is not null)
			{
				return node.next4;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_next_order(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next_order is not null)
			{
				return node.next_order;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_next_last(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next_last is not null)
			{
				return node.next_last;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_next_first(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next_first is not null)
			{
				return node.next_first;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_next_interval(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.next_interval is not null)
			{
				return node.next_interval;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_just_next(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.just_next is not null)
			{
				return node.just_next;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_pair_next(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.pair_next is not null)
			{
				return node.pair_next;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item_type(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.item_type is not null)
			{
				return node.item_type;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item_sort(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.item_sort is not null)
			{
				return node.item_sort;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item_nosell(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.item_nosell is not null)
			{
				return node.item_nosell;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_price(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.price is not null)
			{
				return node.price;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_friend(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.friend is not null)
			{
				return node.friend;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_summon_level(ref Result result, ref SkillNode node)
	{
		do
		{
			if (node.summon_level is not null)
			{
				return node.summon_level;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref SkillsetNode node)
	{
		do
		{
			if (node.name is not null)
			{
				return node.name;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillsetNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_back(ref Result result, ref SkillsetNode node)
	{
		do
		{
			if (node.back is not null)
			{
				return node.back;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillsetNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref SkillsetNode node)
	{
		do
		{
			if (node.member is not null)
			{
				return node.member;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_SkillSkillset.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SkillsetNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_value(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.value.Value is not null)
			{
				return node.value.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_politics(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.politics.Value is not null)
			{
				return node.politics.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_merce(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.merce.Value is not null)
			{
				return node.merce.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.name.Value is not null)
			{
				return node.name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.image.Value is not null)
			{
				return node.image.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_x(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.x.Value is not null)
			{
				return node.x.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_y(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.y.Value is not null)
			{
				return node.y.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_w(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.w.Value is not null)
			{
				return node.w.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_h(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.h.Value is not null)
			{
				return node.h.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_big(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.big.Value is not null)
			{
				return node.big.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_color(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.color.Value is not null)
			{
				return node.color.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_map(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.map.Value is not null)
			{
				return node.map.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_castle_battle(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.castle_battle.Value is not null)
			{
				return node.castle_battle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_yorozu(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.yorozu.Value is not null)
			{
				return node.yorozu.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_limit(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.limit.Value is not null)
			{
				return node.limit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bgm(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.bgm.Value is not null)
			{
				return node.bgm.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_volume(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.volume.Value is not null)
			{
				return node.volume.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_gain(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.gain.Value is not null)
			{
				return node.gain.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_castle(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.castle.Value is not null)
			{
				return node.castle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_capacity(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.capacity.Value is not null)
			{
				return node.capacity.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_monster(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.monster.Value is not null)
			{
				return node.monster.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.member.Value is not null)
			{
				return node.member.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dungeon(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.dungeon.Value is not null)
			{
				return node.dungeon.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_home(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.no_home.Value is not null)
			{
				return node.no_home.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_raise(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.no_raise.Value is not null)
			{
				return node.no_raise.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_castle_lot(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.castle_lot.Value is not null)
			{
				return node.castle_lot.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_text(ref Result result, ref SpotNode node)
	{
		do
		{
			if (node.text.Value is not null)
			{
				return node.text.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.SpotNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_troop_sort(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.troop_sort.Value is not null)
			{
				return node.troop_sort.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_stealth(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.stealth.Value is not null)
			{
				return node.stealth.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_free_move(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.free_move.Value is not null)
			{
				return node.free_move.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.name.Value is not null)
			{
				return node.name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_help(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.help.Value is not null)
			{
				return node.help.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sex(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.sex.Value is not null)
			{
				return node.sex.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_a(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.a.Value is not null)
			{
				return node.a.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_h(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.h.Value is not null)
			{
				return node.h.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_w(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.w.Value is not null)
			{
				return node.w.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_text(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.text.Value is not null)
			{
				return node.text.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sub_image_even(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.sub_image_even.Value is not null)
			{
				return node.sub_image_even.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_yorozu(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.yorozu.Value is not null)
			{
				return node.yorozu.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_radius(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.radius.Value is not null)
			{
				return node.radius.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_radius_press(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.radius_press.Value is not null)
			{
				return node.radius_press.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_escape(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.no_escape.Value is not null)
			{
				return node.no_escape.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_regular(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.no_regular.Value is not null)
			{
				return node.no_regular.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_knock(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.no_knock.Value is not null)
			{
				return node.no_knock.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_cover(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.no_cover.Value is not null)
			{
				return node.no_cover.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dead_event(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.dead_event.Value is not null)
			{
				return node.dead_event.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_beast_unit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.beast_unit.Value is not null)
			{
				return node.beast_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_summon_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.summon_max.Value is not null)
			{
				return node.summon_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_summon_level(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.summon_level.Value is not null)
			{
				return node.summon_level.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attack_range(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.attack_range.Value is not null)
			{
				return node.attack_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_escape_range(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.escape_range.Value is not null)
			{
				return node.escape_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_escape_run(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.escape_run.Value is not null)
			{
				return node.escape_run.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hand_range(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hand_range.Value is not null)
			{
				return node.hand_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_wake_range(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.wake_range.Value is not null)
			{
				return node.wake_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_view_range(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.view_range.Value is not null)
			{
				return node.view_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_cavalry_range(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.cavalry_range.Value is not null)
			{
				return node.cavalry_range.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_view_unit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.view_unit.Value is not null)
			{
				return node.view_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_view_unit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.force_view_unit.Value is not null)
			{
				return node.force_view_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_blind_unit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.force_blind_unit.Value is not null)
			{
				return node.force_blind_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_satellite(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.satellite.Value is not null)
			{
				return node.satellite.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hasexp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hasexp.Value is not null)
			{
				return node.hasexp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_brave(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.brave.Value is not null)
			{
				return node.brave.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_level(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.level.Value is not null)
			{
				return node.level.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hp.Value is not null)
			{
				return node.hp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.mp.Value is not null)
			{
				return node.mp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attack(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.attack.Value is not null)
			{
				return node.attack.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defense(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.defense.Value is not null)
			{
				return node.defense.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magic(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magic.Value is not null)
			{
				return node.magic.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdef(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magdef.Value is not null)
			{
				return node.magdef.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speed(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.speed.Value is not null)
			{
				return node.speed.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dext(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.dext.Value is not null)
			{
				return node.dext.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_move(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.move.Value is not null)
			{
				return node.move.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprec(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hprec.Value is not null)
			{
				return node.hprec.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprec(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.mprec.Value is not null)
			{
				return node.mprec.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_heal_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.heal_max.Value is not null)
			{
				return node.heal_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attack_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.attack_max.Value is not null)
			{
				return node.attack_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defense_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.defense_max.Value is not null)
			{
				return node.defense_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magic_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magic_max.Value is not null)
			{
				return node.magic_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdef_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magdef_max.Value is not null)
			{
				return node.magdef_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speed_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.speed_max.Value is not null)
			{
				return node.speed_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dext_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.dext_max.Value is not null)
			{
				return node.dext_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_move_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.move_max.Value is not null)
			{
				return node.move_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprec_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hprec_max.Value is not null)
			{
				return node.hprec_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprec_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.mprec_max.Value is not null)
			{
				return node.mprec_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_movetype(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.movetype.Value is not null)
			{
				return node.movetype.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hpUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hpUp.Value is not null)
			{
				return node.hpUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mpUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.mpUp.Value is not null)
			{
				return node.mpUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attackUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.attackUp.Value is not null)
			{
				return node.attackUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defenseUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.defenseUp.Value is not null)
			{
				return node.defenseUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magicUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magicUp.Value is not null)
			{
				return node.magicUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdefUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magdefUp.Value is not null)
			{
				return node.magdefUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speedUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.speedUp.Value is not null)
			{
				return node.speedUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dextUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.dextUp.Value is not null)
			{
				return node.dextUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_moveUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.moveUp.Value is not null)
			{
				return node.moveUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprecUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hprecUp.Value is not null)
			{
				return node.hprecUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprecUp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.mprecUp.Value is not null)
			{
				return node.mprecUp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hpMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hpMax.Value is not null)
			{
				return node.hpMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mpMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.mpMax.Value is not null)
			{
				return node.mpMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_attackMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.attackMax.Value is not null)
			{
				return node.attackMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_defenseMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.defenseMax.Value is not null)
			{
				return node.defenseMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magicMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magicMax.Value is not null)
			{
				return node.magicMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_magdefMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.magdefMax.Value is not null)
			{
				return node.magdefMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_speedMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.speedMax.Value is not null)
			{
				return node.speedMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dextMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.dextMax.Value is not null)
			{
				return node.dextMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_moveMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.moveMax.Value is not null)
			{
				return node.moveMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_hprecMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.hprecMax.Value is not null)
			{
				return node.hprecMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_mprecMax(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.mprecMax.Value is not null)
			{
				return node.mprecMax.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_race(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.race.Value is not null)
			{
				return node.race.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sortkey(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.sortkey.Value is not null)
			{
				return node.sortkey.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture.Value is not null)
			{
				return node.picture.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_detail(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture_detail.Value is not null)
			{
				return node.picture_detail.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_menu(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture_menu.Value is not null)
			{
				return node.picture_menu.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_floor(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture_floor.Value is not null)
			{
				return node.picture_floor.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_shift(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture_shift.Value is not null)
			{
				return node.picture_shift.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_shift_up(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture_shift_up.Value is not null)
			{
				return node.picture_shift_up.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_center(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture_center.Value is not null)
			{
				return node.picture_center.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_picture_back(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.picture_back.Value is not null)
			{
				return node.picture_back.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_price(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.price.Value is not null)
			{
				return node.price.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_cost(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.cost.Value is not null)
			{
				return node.cost.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_finance(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.finance.Value is not null)
			{
				return node.finance.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_tkool(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.tkool.Value is not null)
			{
				return node.tkool.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_keep_form(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.keep_form.Value is not null)
			{
				return node.keep_form.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_breast_width(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.breast_width.Value is not null)
			{
				return node.breast_width.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_medical(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.medical.Value is not null)
			{
				return node.medical.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_active(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.active.Value is not null)
			{
				return node.active.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_activenum(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.activenum.Value is not null)
			{
				return node.activenum.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_handle(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.handle.Value is not null)
			{
				return node.handle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_red(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.red.Value is not null)
			{
				return node.red.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_rank_text(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.rank_text.Value is not null)
			{
				return node.rank_text.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_training(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.no_training.Value is not null)
			{
				return node.no_training.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_force_voice(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.force_voice.Value is not null)
			{
				return node.force_voice.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_face(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.face.Value is not null)
			{
				return node.face.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_same_friend(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.same_friend.Value is not null)
			{
				return node.same_friend.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_same_call(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.same_call.Value is not null)
			{
				return node.same_call.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.member.Value is not null)
			{
				return node.member.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_level_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.level_max.Value is not null)
			{
				return node.level_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_exp(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.exp.Value is not null)
			{
				return node.exp.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_exp_mul(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.exp_mul.Value is not null)
			{
				return node.exp_mul.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_exp_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.exp_max.Value is not null)
			{
				return node.exp_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_line(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.line.Value is not null)
			{
				return node.line.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_image(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.image.Value is not null)
			{
				return node.image.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sub_image(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.sub_image.Value is not null)
			{
				return node.sub_image.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_politics(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.politics.Value is not null)
			{
				return node.politics.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_element_lost(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.element_lost.Value is not null)
			{
				return node.element_lost.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_fkey(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.fkey.Value is not null)
			{
				return node.fkey.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_friend(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.friend.Value is not null)
			{
				return node.friend.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_merce(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.merce.Value is not null)
			{
				return node.merce.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_consti(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.consti.Value is not null)
			{
				return node.consti.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_multi(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.multi.Value is not null)
			{
				return node.multi.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_lost_corpse(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.lost_corpse.Value is not null)
			{
				return node.lost_corpse.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_add_vassal(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.add_vassal.Value is not null)
			{
				return node.add_vassal.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_value(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.value.Value is not null)
			{
				return node.value.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_break(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.@break.Value is not null)
			{
				return node.@break.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_scream(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.scream.Value is not null)
			{
				return node.scream.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_skill(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.skill.Value is not null)
			{
				return node.skill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_skill2(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.skill2.Value is not null)
			{
				return node.skill2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_learn(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.learn.Value is not null)
			{
				return node.learn.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_delskill(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.delskill.Value is not null)
			{
				return node.delskill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_delskill2(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.delskill2.Value is not null)
			{
				return node.delskill2.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_item(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.item.Value is not null)
			{
				return node.item.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_leader_skill(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.leader_skill.Value is not null)
			{
				return node.leader_skill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_assist_skill(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.assist_skill.Value is not null)
			{
				return node.assist_skill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_talent(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.talent.Value is not null)
			{
				return node.talent.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_class(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.@class.Value is not null)
			{
				return node.@class.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bgm(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.bgm.Value is not null)
			{
				return node.bgm.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_volume(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.volume.Value is not null)
			{
				return node.volume.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_alive_per(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.alive_per.Value is not null)
			{
				return node.alive_per.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_yabo(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.yabo.Value is not null)
			{
				return node.yabo.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_kosen(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.kosen.Value is not null)
			{
				return node.kosen.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_align(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.align.Value is not null)
			{
				return node.align.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_loyal(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.loyal.Value is not null)
			{
				return node.loyal.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_power_name(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.power_name.Value is not null)
			{
				return node.power_name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_enemy(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.enemy.Value is not null)
			{
				return node.enemy.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_flag(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.flag.Value is not null)
			{
				return node.flag.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_staff(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.staff.Value is not null)
			{
				return node.staff.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_diplomacy(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.diplomacy.Value is not null)
			{
				return node.diplomacy.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_castle_guard(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.castle_guard.Value is not null)
			{
				return node.castle_guard.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_actor(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.actor.Value is not null)
			{
				return node.actor.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.enable.Value is not null)
			{
				return node.enable.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable_select(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.enable_select.Value is not null)
			{
				return node.enable_select.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable_max(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.enable_max.Value is not null)
			{
				return node.enable_max.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_fix(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.fix.Value is not null)
			{
				return node.fix.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_home(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.home.Value is not null)
			{
				return node.home.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_noremove_unit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.noremove_unit.Value is not null)
			{
				return node.noremove_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_noemploy_unit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.noemploy_unit.Value is not null)
			{
				return node.noemploy_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_noitem_unit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.noitem_unit.Value is not null)
			{
				return node.noitem_unit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_arbeit(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.arbeit.Value is not null)
			{
				return node.arbeit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_arbeit_capacity(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.arbeit_capacity.Value is not null)
			{
				return node.arbeit_capacity.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_join(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.join.Value is not null)
			{
				return node.join.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dead(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.dead.Value is not null)
			{
				return node.dead.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_retreat(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.retreat.Value is not null)
			{
				return node.retreat.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_voice_type(ref Result result, ref UnitNode node)
	{
		do
		{
			if (node.voice_type.Value is not null)
			{
				return node.voice_type.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_UnitClassPowerSpotRace.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.UnitNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_voice_type(ref Result result, ref VoiceNode node)
	{
		do
		{
			if (node.voice_type.Value is not null)
			{
				return node.voice_type.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Voice.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.VoiceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_delskill(ref Result result, ref VoiceNode node)
	{
		do
		{
			if (node.delskill.Value is not null)
			{
				return node.delskill.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Voice.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.VoiceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_spot(ref Result result, ref VoiceNode node)
	{
		do
		{
			if (node.spot.Value is not null)
			{
				return node.spot.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Voice.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.VoiceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_roam(ref Result result, ref VoiceNode node)
	{
		do
		{
			if (node.roam.Value is not null)
			{
				return node.roam.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Voice.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.VoiceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_power(ref Result result, ref VoiceNode node)
	{
		do
		{
			if (node.power.Value is not null)
			{
				return node.power.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Voice.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.VoiceNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ws_red(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.ws_red is not null)
			{
				return node.ws_red;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ws_blue(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.ws_blue is not null)
			{
				return node.ws_blue;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ws_green(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.ws_green is not null)
			{
				return node.ws_green;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ws_alpha(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.ws_alpha is not null)
			{
				return node.ws_alpha;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ws_light(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.ws_light is not null)
			{
				return node.ws_light;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_ws_light_range(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.ws_light_range is not null)
			{
				return node.ws_light_range;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_discus(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.discus is not null)
			{
				return node.discus;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_save_name(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.save_name is not null)
			{
				return node.save_name;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable_select(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.enable_select is not null)
			{
				return node.enable_select;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_max_unit(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.max_unit is not null)
			{
				return node.max_unit;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_blind(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.blind is not null)
			{
				return node.blind;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.name is not null)
			{
				return node.name;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_map(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.map is not null)
			{
				return node.map;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_help(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.help is not null)
			{
				return node.help;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_locate_x(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.locate_x is not null)
			{
				return node.locate_x;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_locate_y(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.locate_y is not null)
			{
				return node.locate_y;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_begin_text(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.begin_text is not null)
			{
				return node.begin_text;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_world(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.world is not null)
			{
				return node.world;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_fight(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.fight is not null)
			{
				return node.fight;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_politics(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.politics is not null)
			{
				return node.politics;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_war_capacity(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.war_capacity is not null)
			{
				return node.war_capacity;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_spot_capacity(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.spot_capacity is not null)
			{
				return node.spot_capacity;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_gain_per(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.gain_per is not null)
			{
				return node.gain_per;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_support_range(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.support_range is not null)
			{
				return node.support_range;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_my_range(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.my_range is not null)
			{
				return node.my_range;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_myhelp_range(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.myhelp_range is not null)
			{
				return node.myhelp_range;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_base_level(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.base_level is not null)
			{
				return node.base_level;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_monster_level(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.monster_level is not null)
			{
				return node.monster_level;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_training_up(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.training_up is not null)
			{
				return node.training_up;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_actor_per(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.actor_per is not null)
			{
				return node.actor_per;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_sortkey(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.sortkey is not null)
			{
				return node.sortkey;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_default_ending(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.default_ending is not null)
			{
				return node.default_ending;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_power_order(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.power_order is not null)
			{
				return node.power_order;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.enable is not null)
			{
				return node.enable;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_enable_talent(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.enable_talent is not null)
			{
				return node.enable_talent;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_party(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.party is not null)
			{
				return node.party;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_no_autosave(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.no_autosave is not null)
			{
				return node.no_autosave;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_zone(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.zone is not null)
			{
				return node.zone;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_nozone(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.nozone is not null)
			{
				return node.nozone;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item0(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item0 is not null)
			{
				return node.item0;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item1(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item1 is not null)
			{
				return node.item1;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item2(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item2 is not null)
			{
				return node.item2;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item3(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item3 is not null)
			{
				return node.item3;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item4(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item4 is not null)
			{
				return node.item4;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item5(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item5 is not null)
			{
				return node.item5;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item6(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item6 is not null)
			{
				return node.item6;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_item_limit(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item_limit is not null)
			{
				return node.item_limit;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_poli(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.poli is not null)
			{
				return node.poli;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_camp(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.camp is not null)
			{
				return node.camp;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_multi(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.multi is not null)
			{
				return node.multi;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_item(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item is not null)
			{
				return node.item;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_item_sale(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item_sale is not null)
			{
				return node.item_sale;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_item_hold(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.item_hold is not null)
			{
				return node.item_hold;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_text(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.text is not null)
			{
				return node.text;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_roam(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.roam is not null)
			{
				return node.roam;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_spot(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.spot is not null)
			{
				return node.spot;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_power(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.power is not null)
			{
				return node.power;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_offset(ref Result result, ref ScenarioNode node)
	{
		do
		{
			if (node.offset is not null)
			{
				return node.offset;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Scenario.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.ScenarioNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_disperse(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.disperse.Value is not null)
			{
				return node.disperse.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_castle(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.castle.Value is not null)
			{
				return node.castle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_castle_battle(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.castle_battle.Value is not null)
			{
				return node.castle_battle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_personal_battle(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.personal_battle.Value is not null)
			{
				return node.personal_battle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_blind(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.blind.Value is not null)
			{
				return node.blind.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_w(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.w.Value is not null)
			{
				return node.w.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_h(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.h.Value is not null)
			{
				return node.h.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bg(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.bg.Value is not null)
			{
				return node.bg.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bcg(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.bcg.Value is not null)
			{
				return node.bcg.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bgm(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.bgm.Value is not null)
			{
				return node.bgm.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_map(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.map.Value is not null)
			{
				return node.map.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_name(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.name.Value is not null)
			{
				return node.name.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_color(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.color.Value is not null)
			{
				return node.color.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_block(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.block.Value is not null)
			{
				return node.block.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_limit(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.limit.Value is not null)
			{
				return node.limit.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_title(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.title.Value is not null)
			{
				return node.title.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_center(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.center.Value is not null)
			{
				return node.center.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_italic(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.italic.Value is not null)
			{
				return node.italic.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_handle(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.handle.Value is not null)
			{
				return node.handle.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_member(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.member.Value is not null)
			{
				return node.member.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_second(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.second.Value is not null)
			{
				return node.second.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_volume(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.volume.Value is not null)
			{
				return node.volume.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bg_fade(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.bg_fade.Value is not null)
			{
				return node.bg_fade.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dark_fade(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.dark_fade.Value is not null)
			{
				return node.dark_fade.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dark_alpha(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.dark_alpha.Value is not null)
			{
				return node.dark_alpha.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_bg_interval(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.bg_interval.Value is not null)
			{
				return node.bg_interval.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_dark_fade_e(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.dark_fade_e.Value is not null)
			{
				return node.dark_fade_e.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_last_second(ref Result result, ref EventNode node)
	{
		do
		{
			if (node.last_second.Value is not null)
			{
				return node.last_second.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Event.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.EventNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableInt_ArrayElement? GetRecursive_friend(ref Result result, ref StoryNode node)
	{
		do
		{
			if (node.friend.Value is not null)
			{
				return node.friend.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Story.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.StoryNodeList[track.NodeIndex];
		} while (true);
	}

	public Pair_NullableString_NullableIntElement? GetRecursive_fight(ref Result result, ref StoryNode node)
	{
		do
		{
			if (node.fight.Value is not null)
			{
				return node.fight.Value;
			}
			

			if (!node.HasSuper)
			{
				return null;
			}

			var superSpan = result.GetSpan(node.Super);
			ref var track = ref AmbiguousDictionary_Story.TryGet(superSpan);
			result = ref Files[track.ResultId];
			node = ref result.StoryNodeList[track.NodeIndex];
		} while (true);
	}
}
