<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Wahren.Compiler;

public partial class Program
{
<# var variables = new[] { ("num", "Number"), ("str", "String"), ("gnum", "Global"), ("gstr", "GlobalString") }; #>
<# var structures = new[] { "Unit", "Class", "Spot", "Power", "Skill", "Skillset", "Event", "Scenario", "Story", "Race", "Movetype", "Field", "Object", "Dungeon" }; #>
    private const string StructureKinds = "unit<# for (int i = 1; i < structures.Length; ++i) { #>, <#= structures[i].ToLowerInvariant() #><# } for (int i = 0; i < variables.Length; ++i) { #>, <#= variables[i].Item1 #><# } #>";
	
    private static void ProcessCommandReferences(Project project, ReadOnlySpan<char> readOnlySpan, ColorTheme? theme)
    {
#if JAPANESE
        const string NotFound = "見つかりませんでした。";
#else
        const string NotFound = "Not Found.";
#endif
        bool @switch = false;
        var name = readOnlySpan.Slice(readOnlySpan.LastIndexOf(' ') + 1);
        var analysisFiles = project.FileAnalysisList.AsSpan();
        var files = project.Files.AsSpan();
<# for (int i = 0; i < variables.Length; ++i) { #>
        <# if (i != 0) {#>else <# } #>if (readOnlySpan.StartsWith("<#= variables[i].Item1 #> "))
        {
            bool any = false;
            for (int i = 0; i < analysisFiles.Length; ++i)
            {
                ref var set = ref analysisFiles[i].<#= variables[i].Item2 #>VariableReaderSet;
                ref var file = ref files[i];
                ref var tokenList = ref file.TokenList;
                if (set.TryGet(name, out var id))
                {
                    any = true;
                    ref var references = ref set.References[id];
                    foreach (var reference in references.AsSpan())
                    {
                        if (theme is not null)
                        {
                            @switch = !@switch;
                            Console.ForegroundColor = @switch ? theme.Normal0 : theme.Normal1;
                        }
                        Console.WriteLine($"{file.FilePath}({tokenList.GetLine(reference) + 1}, {tokenList.GetOffset(reference) + 1}) R");
                    }
                }
                set = ref analysisFiles[i].<#= variables[i].Item2 #>VariableWriterSet;
                if (set.TryGet(name, out id))
                {
                    any = true;
                    ref var references = ref set.References[id];
                    foreach (var reference in references.AsSpan())
                    {
                        if (theme is not null)
                        {
                            @switch = !@switch;
                            Console.ForegroundColor = @switch ? theme.Normal0 : theme.Normal1;
                        }
                        Console.WriteLine($"{file.FilePath}({tokenList.GetLine(reference) + 1}, {tokenList.GetOffset(reference) + 1}) W");
                    }
                }
            }

            if (!any)
            {
                if (theme is not null)
                {
                    Console.ForegroundColor = theme.Error;
                }
                Console.WriteLine(NotFound);
            }
        }
<# } #>
<# for (int i = 0; i < structures.Length; ++i) { #>
        else if (readOnlySpan.StartsWith("<#= structures[i].ToLowerInvariant() #> "))
        {
            bool any = false;
            for (int i = 0; i < analysisFiles.Length; ++i)
            {
                ref var set = ref analysisFiles[i].<#= structures[i] #>Set;
                ref var file = ref files[i];
                ref var tokenList = ref file.TokenList;
                if (set.TryGet(name, out var id))
                {
                    any = true;
                    ref var references = ref set.References[id];
                    foreach (var reference in references.AsSpan())
                    {
                        if (theme is not null)
                        {
                            @switch = !@switch;
                            Console.ForegroundColor = @switch ? theme.Normal0 : theme.Normal1;
                        }
                        Console.WriteLine($"{file.FilePath}({tokenList.GetLine(reference) + 1}, {tokenList.GetOffset(reference) + 1})");
                    }
                }
            }

            if (!any)
            {
                if (theme is not null)
                {
                    Console.ForegroundColor = theme.Error;
                }
                Console.WriteLine(NotFound);
            }
        }
<# } #>
        if (theme is not null)
        {
            Console.ResetColor();
        }
    }

    private static void ProcessCommandListStructure(Project project, ReadOnlySpan<char> readOnlySpan, ColorTheme? theme)
    {
        System.Collections.Generic.HashSet<string> set = new();
<# for (int i = 0; i < variables.Length; ++i) { #>
        <# if (i != 0) {#>else <# } #>if (readOnlySpan.SequenceEqual("<#= variables[i].Item1 #>"))
        {
            foreach (ref var file in project.FileAnalysisList.AsSpan())
            {
                ref var variableSet = ref file.<#= variables[i].Item2 #>VariableWriterSet;
                for (uint i = 0, end = variableSet.Count; i < end; ++i)
                {
                    set.Add(new string(variableSet[i]));
                }
                variableSet = ref file.<#= variables[i].Item2 #>VariableReaderSet;
                for (uint i = 0, end = variableSet.Count; i < end; ++i)
                {
                    set.Add(new string(variableSet[i]));
                }
            }
        }
<# } #>
<# for (int i = 0; i < structures.Length; ++i) { #>
        else if (readOnlySpan.SequenceEqual("<#= structures[i].ToLowerInvariant() #>"))
        {
            foreach (ref var file in project.Files.AsSpan())
            {
                foreach (ref var node in file.<#= structures[i] #>NodeList.AsSpan())
                {
                    set.Add(new string(file.GetSpan(node.Name)));
                }
            }
        }
<# } #>
        bool @switch = false;
        foreach (var name in set)
        {
            if (theme is not null)
            {
                @switch = !@switch;
                Console.ForegroundColor = @switch ? theme.Normal0 : theme.Normal1;
            }
            Console.WriteLine(name);
        }
        if (theme is not null)
        {
            Console.ResetColor();
        }
    }
}
