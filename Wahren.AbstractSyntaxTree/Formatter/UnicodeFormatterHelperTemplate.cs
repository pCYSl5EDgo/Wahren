#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
namespace Wahren.AbstractSyntaxTree.Parser;

public partial struct Result
{
    private static bool Try_CrLf(ref FormatterContext context)
    {
        if (!"\r\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(2);
        context.Written += 2;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_ParenRight_CrLf(ref FormatterContext context)
    {
        if (!")\r\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(3);
        context.Written += 3;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_BracketRight_CrLf(ref FormatterContext context)
    {
        if (!"}\r\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(3);
        context.Written += 3;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_BracketLeft_CrLf(ref FormatterContext context)
    {
        if (!"{\r\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(3);
        context.Written += 3;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_Space_Assign_CrLf(ref FormatterContext context)
    {
        if (!" =\r\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(4);
        context.Written += 4;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_Else_CrLf(ref FormatterContext context)
    {
        if (!"else\r\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(6);
        context.Written += 6;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_Lf(ref FormatterContext context)
    {
        if (!"\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(1);
        context.Written += 1;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_ParenRight_Lf(ref FormatterContext context)
    {
        if (!")\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(2);
        context.Written += 2;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_BracketRight_Lf(ref FormatterContext context)
    {
        if (!"}\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(2);
        context.Written += 2;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_BracketLeft_Lf(ref FormatterContext context)
    {
        if (!"{\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(2);
        context.Written += 2;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_Space_Assign_Lf(ref FormatterContext context)
    {
        if (!" =\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(3);
        context.Written += 3;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_Else_Lf(ref FormatterContext context)
    {
        if (!"else\n".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(5);
        context.Written += 5;
        context.JustChangeLine = true;
        return true;
    }

    private static bool Try_Semicolon(ref FormatterContext context)
    {
        if (context.Destination.IsEmpty)
        {
            return false;
        }

        context.Destination[0] = ';';
        context.Destination = context.Destination.Slice(1);
        context.Written++;
        context.JustChangeLine = false;
        return true;
    }

    private static bool Try_Comma(ref FormatterContext context)
    {
        if (context.Destination.IsEmpty)
        {
            return false;
        }

        context.Destination[0] = ',';
        context.Destination = context.Destination.Slice(1);
        context.Written++;
        context.JustChangeLine = false;
        return true;
    }

    private static bool Try_Tab1(ref FormatterContext context)
    {
        if (!"    ".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(4);
        context.Written += 4;
        context.JustChangeLine = false;
        return true;
    }

    private static bool Try_Else_If(ref FormatterContext context)
    {
        if (!"else if(".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(8);
        context.Written += 8;
        context.JustChangeLine = false;
        return true;
    }

    private static bool Try_Else_Rif(ref FormatterContext context)
    {
        if (!"else rif(".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(9);
        context.Written += 9;
        context.JustChangeLine = false;
        return true;
    }

    private static bool Try_Comma_Space(ref FormatterContext context)
    {
        if (!", ".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(2);
        context.Written += 2;
        context.JustChangeLine = false;
        return true;
    }

    private static bool Try_Space_Assign_CrLf_Tab2(ref FormatterContext context)
    {
        if (!" =\r\n        ".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(12);
        context.Written += 12;
        context.JustChangeLine = false;
        return true;
    }

    private static bool Try_Space_Assign_Lf_Tab2(ref FormatterContext context)
    {
        if (!" =\n        ".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(11);
        context.Written += 11;
        context.JustChangeLine = false;
        return true;
    }

}
