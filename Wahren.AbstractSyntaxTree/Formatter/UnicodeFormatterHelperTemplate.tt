<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="NetStandard" #>
<#@ assembly name="$(t4LibFolder)\Wahren.AbstractSyntaxTree.TextTemplateHelper.dll" #>
<#@ import namespace="Wahren.AbstractSyntaxTree.TextTemplateHelper" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
#nullable enable
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY T4. DO NOT CHANGE IT. CHANGE THE .tt FILE INSTEAD.
// </auto-generated>
namespace Wahren.AbstractSyntaxTree.Parser;

public partial struct Result
{
<#
(string suffix, string chars, int count)[] suffixs = new (string suffix, string chars, int count)[] {
("CrLf", "\\r\\n", 2),
("Lf", "\\n", 1),
};
foreach ((string suffix, string chars, int count) in suffixs) { #>
    private static bool Try_<#= suffix #>(ref FormatterContext context)
    {
        if (!"<#= chars #>".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(<#= count #>);
        context.Written += <#= count #>;
        context.JustChangeLine = true;
        return true;
    }

<#  foreach (var (name, content) in new (string, string)[]{
("ParenRight", ")"),
("BracketRight", "}"),
("BracketLeft", "{"),
("Space_Assign", " ="),
("Else", "else"),
}) {#>
    private static bool Try_<#= name #>_<#= suffix #>(ref FormatterContext context)
    {
        if (!"<#= content #><#= chars #>".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(<#= count + content.Length #>);
        context.Written += <#= count + content.Length #>;
        context.JustChangeLine = true;
        return true;
    }

<#  } #>
<# } #>
<# 
(string, string)[] array6 = new (string, string)[]{
("Semicolon", ";"),
("Comma", ","),
("Tab1", "    "),
("Else_If", "else if("),
("Else_Rif", "else rif("),
("Comma_Space", ", "),
};
foreach (var (name, content) in array6) { #>
    private static bool Try_<#= name #>(ref FormatterContext context)
    {
<#  if (content.Length == 1) { #>
        if (context.Destination.IsEmpty)
        {
            return false;
        }

        context.Destination[0] = '<#= content[0] #>';
        context.Destination = context.Destination.Slice(1);
        context.Written++;
<# } else { #>
        if (!"<#= content #>".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(<#= content.Length #>);
        context.Written += <#= content.Length #>;
<# } #>
        context.JustChangeLine = false;
        return true;
    }

<# }
(string, string, string, string)[] array7 = new (string, string, string, string)[]{
("Space_Assign", " =", "Tab2", "        "),
};
foreach (var (name0, content0, name1, content1) in array7) {
    foreach (var (suffix, chars, count) in suffixs) { var total = content0.Length + content1.Length + count; #>
    private static bool Try_<#= name0 #>_<#= suffix #>_<#= name1 #>(ref FormatterContext context)
    {
        if (!"<#= content0 #><#= chars #><#= content1 #>".TryCopyTo(context.Destination))
        {
            return false;
        }

        context.Destination = context.Destination.Slice(<#= total #>);
        context.Written += <#= total #>;
        context.JustChangeLine = false;
        return true;
    }

<#  }
}#>
}
